#![feature(prelude_import)]
#![feature(trace_macros)]
#[prelude_import]
use std::prelude::rust_2021::*;
#[macro_use]
extern crate std;
use std::os::unix::net::UnixStream;
mod container {
    use crate::{docker::Docker, error::Result, http::request::RequestBuilder};
    use crate::models::container::*;
    pub struct Container<'docker> {
        docker: &'docker Docker,
        id: String,
    }
    impl<'docker> Container<'docker> {
        pub fn new<S: Into<String>>(docker: &'docker Docker, id: S) -> Self {
            Container { docker, id: id.into() }
        }
        pub fn inspect(&self) -> Result<ContainerDetails> {
            let request = RequestBuilder::get({
                    let res = ::alloc::fmt::format(
                        format_args!("/containers/{0}/json", self.id),
                    );
                    res
                })
                .build();
            let resp = self.docker.request(request)?;
            Ok(resp.into_body())
        }
    }
    pub struct Containers<'docker> {
        docker: &'docker Docker,
    }
    impl<'docker> Containers<'docker> {
        pub fn new(docker: &'docker Docker) -> Self {
            Containers { docker }
        }
        pub fn list(&self) -> Result<Vec<ContainerInfo>> {
            let request = RequestBuilder::get("/containers/json").build();
            let resp = self.docker.request(request)?;
            Ok(resp.into_body())
        }
        pub fn get<S: Into<String>>(&self, id: S) -> Container {
            Container::new(self.docker, id)
        }
    }
}
#[cfg(feature = "chrono")]
mod datetime {
    use chrono::{DateTime, Utc};
    use serde::Deserialize;
    pub(crate) fn datetime_from_unix_timestamp<'de, D>(
        deserializer: D,
    ) -> Result<Option<DateTime<Utc>>, D::Error>
    where
        D: serde::Deserializer<'de>,
    {
        let timestamp = chrono::NaiveDateTime::from_timestamp_opt(
                i64::deserialize(deserializer)?,
                0,
            )
            .unwrap();
        Ok(Some(DateTime::<Utc>::from_naive_utc_and_offset(timestamp, Utc)))
    }
}
mod docker {
    use std::env;
    use serde::Deserialize;
    use crate::error::Result;
    use crate::transport::Transport;
    pub struct Docker {
        transport: Transport,
    }
    impl Docker {
        pub fn new() -> Result<Self> {
            match env::var("DOCKER_HOST").ok() {
                Some(host) => {
                    #[cfg(feature = "unix-socket")]
                    if let Some(socket) = host.strip_prefix("unix://") {
                        return Docker::unix(socket);
                    }
                    {
                        ::core::panicking::panic_fmt(
                            format_args!("Only unix sockets are supported yet"),
                        );
                    };
                }
                #[cfg(feature = "unix-socket")]
                None => Docker::unix("/var/run/docker.sock"),
            }
        }
        #[cfg(feature = "unix-socket")]
        pub fn unix<S: Into<String>>(socket: S) -> Result<Self> {
            Ok(Docker {
                transport: Transport::unix(socket)?,
            })
        }
        pub fn request<B>(
            &self,
            req: crate::http::request::Request,
        ) -> Result<crate::http::response::Response<B>>
        where
            for<'de> B: Deserialize<'de>,
        {
            self.transport.request(req)
        }
        pub fn containers(&self) -> crate::container::Containers {
            crate::container::Containers::new(self)
        }
    }
}
mod error {
    use std::error::Error as StdError;
    use serde_json::Error as SerdeJsonError;
    pub type Result<T> = std::result::Result<T, Error>;
    type Cause = Box<dyn StdError + Send + Sync>;
    pub struct Error {
        inner: Box<ErrorImpl>,
    }
    struct ErrorImpl {
        kind: ErrorKind,
        cause: Option<Cause>,
    }
    pub enum ErrorKind {
        Io,
        Unit,
        HttpParsing(HttpParsingErrorKind),
        SerdeJson,
    }
    #[automatically_derived]
    impl ::core::fmt::Debug for ErrorKind {
        #[inline]
        fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
            match self {
                ErrorKind::Io => ::core::fmt::Formatter::write_str(f, "Io"),
                ErrorKind::Unit => ::core::fmt::Formatter::write_str(f, "Unit"),
                ErrorKind::HttpParsing(__self_0) => {
                    ::core::fmt::Formatter::debug_tuple_field1_finish(
                        f,
                        "HttpParsing",
                        &__self_0,
                    )
                }
                ErrorKind::SerdeJson => ::core::fmt::Formatter::write_str(f, "SerdeJson"),
            }
        }
    }
    pub enum HttpParsingErrorKind {
        Response,
        Header,
        Status,
        Body,
        ChunkSize,
        Chunk,
    }
    #[automatically_derived]
    impl ::core::fmt::Debug for HttpParsingErrorKind {
        #[inline]
        fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
            ::core::fmt::Formatter::write_str(
                f,
                match self {
                    HttpParsingErrorKind::Response => "Response",
                    HttpParsingErrorKind::Header => "Header",
                    HttpParsingErrorKind::Status => "Status",
                    HttpParsingErrorKind::Body => "Body",
                    HttpParsingErrorKind::ChunkSize => "ChunkSize",
                    HttpParsingErrorKind::Chunk => "Chunk",
                },
            )
        }
    }
    impl Error {
        pub fn new(kind: ErrorKind) -> Error {
            Error {
                inner: Box::new(ErrorImpl { kind, cause: None }),
            }
        }
        pub fn io() -> Error {
            Error::new(ErrorKind::Io)
        }
        pub fn with<C: Into<Cause>>(mut self, cause: C) -> Error {
            self.inner.cause = Some(cause.into());
            self
        }
        fn description(&self) -> &str {
            match self.inner.kind {
                ErrorKind::Io => "io error",
                ErrorKind::Unit => "unit error",
                ErrorKind::HttpParsing(ref kind) => kind.description(),
                ErrorKind::SerdeJson => "serde_json error",
            }
        }
    }
    impl HttpParsingErrorKind {
        fn description(&self) -> &str {
            use HttpParsingErrorKind::*;
            match self {
                Response => "invalid response",
                Header => "invalid header",
                Status => "invalid status",
                Body => "invalid body",
                ChunkSize => "invalid chunk size",
                Chunk => "invalid chunk",
            }
        }
    }
    impl std::fmt::Debug for Error {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
            let mut f = f.debug_tuple("error::Error");
            f.field(&self.inner.kind);
            if let Some(ref cause) = self.inner.cause {
                f.field(cause);
            }
            f.finish()
        }
    }
    impl std::fmt::Display for Error {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
            f.write_str(self.description())
        }
    }
    impl StdError for Error {
        fn source(&self) -> Option<&(dyn StdError + 'static)> {
            self.inner.cause.as_ref().map(|cause| &**cause as _)
        }
    }
    impl From<()> for Error {
        fn from(_: ()) -> Self {
            Error::new(ErrorKind::Unit)
        }
    }
    use macros::error_from;
    impl From<std::io::Error> for Error {
        fn from(value: std::io::Error) -> Self {
            Error::io().with(value)
        }
    }
    impl From<HttpParsingErrorKind> for Error {
        fn from(value: HttpParsingErrorKind) -> Self {
            Error::new(ErrorKind::HttpParsing(value))
        }
    }
    impl From<SerdeJsonError> for Error {
        fn from(value: SerdeJsonError) -> Self {
            Error::new(ErrorKind::SerdeJson).with(value)
        }
    }
    mod macros {
        pub(super) use error_from;
    }
}
mod http {
    pub mod request {
        use crate::http::Method;
        pub struct Request {
            method: Method,
            path: String,
            query: Option<String>,
        }
        impl Request {
            pub fn method(&self) -> Method {
                self.method
            }
            pub fn path(&self) -> &str {
                &self.path
            }
            pub fn query(&self) -> Option<&str> {
                self.query.as_deref()
            }
            /// Build the request.
            pub fn build(self) -> String {
                {
                    let res = ::alloc::fmt::format(
                        format_args!(
                            "{0} {1}{2} HTTP/1.1\r\nHost: {3}\r\n\r\n",
                            self.method,
                            self.path,
                            self
                                .query
                                .map(|q| {
                                    let res = ::alloc::fmt::format(format_args!("?{0}", q));
                                    res
                                })
                                .unwrap_or_default(),
                            crate::API_VERSION,
                        ),
                    );
                    res
                }
            }
            pub fn into_bytes(self) -> Vec<u8> {
                self.build().into_bytes()
            }
        }
        pub struct RequestBuilder {
            method: Method,
            path: String,
            query: Option<String>,
        }
        impl RequestBuilder {
            /// Create a new request builder.
            /// Prefer using the `get`, `post`, `put`, `delete`, and `head` methods
            /// to create the right request.
            pub fn new<M: Into<Method>, P: Into<String>>(method: M, path: P) -> Self {
                RequestBuilder {
                    method: method.into(),
                    path: path.into(),
                    query: None,
                }
            }
            pub fn get<P: Into<String>>(path: P) -> Self {
                RequestBuilder::new(Method::Get, path)
            }
            pub fn post<P: Into<String>>(path: P) -> Self {
                RequestBuilder::new(Method::Post, path)
            }
            pub fn put<P: Into<String>>(path: P) -> Self {
                RequestBuilder::new(Method::Put, path)
            }
            pub fn delete<P: Into<String>>(path: P) -> Self {
                RequestBuilder::new(Method::Delete, path)
            }
            pub fn head<P: Into<String>>(path: P) -> Self {
                RequestBuilder::new(Method::Head, path)
            }
            /// Add a query parameter to the request.
            pub fn query<S: Into<String>>(mut self, key: S, value: S) -> Self {
                match self.query {
                    Some(q) => {
                        self
                            .query = Some({
                            let res = ::alloc::fmt::format(
                                format_args!("{0}&{1}={2}", q, key.into(), value.into()),
                            );
                            res
                        });
                    }
                    None => {
                        self
                            .query = Some({
                            let res = ::alloc::fmt::format(
                                format_args!("{0}={1}", key.into(), value.into()),
                            );
                            res
                        });
                    }
                }
                self
            }
            /// Build the request.
            pub fn build(self) -> Request {
                Request {
                    method: self.method,
                    path: self.path,
                    query: self.query,
                }
            }
        }
    }
    pub mod response {
        use std::collections::HashMap;
        use serde::Deserialize;
        use crate::error::{Error, HttpParsingErrorKind::*, Result};
        use crate::http::{CR, LF};
        pub struct Response<B> {
            status: u16,
            body: B,
            headers: HashMap<String, String>,
        }
        #[automatically_derived]
        impl<B: ::core::fmt::Debug> ::core::fmt::Debug for Response<B> {
            #[inline]
            fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                ::core::fmt::Formatter::debug_struct_field3_finish(
                    f,
                    "Response",
                    "status",
                    &self.status,
                    "body",
                    &self.body,
                    "headers",
                    &&self.headers,
                )
            }
        }
        #[automatically_derived]
        impl<B: ::core::default::Default> ::core::default::Default for Response<B> {
            #[inline]
            fn default() -> Response<B> {
                Response {
                    status: ::core::default::Default::default(),
                    body: ::core::default::Default::default(),
                    headers: ::core::default::Default::default(),
                }
            }
        }
        impl<B> Response<B> {
            pub fn status(&self) -> u16 {
                self.status
            }
            pub fn body(&self) -> &B {
                &self.body
            }
            pub fn into_body(self) -> B {
                self.body
            }
            pub fn headers(&self) -> &HashMap<String, String> {
                &self.headers
            }
        }
        impl<B> Response<B>
        where
            for<'de> B: Deserialize<'de>,
        {
            pub fn parse_http_response(res: &[u8]) -> Result<Response<B>> {
                let mut pos: usize = 0;
                for i in 0..(res.len() - 1) {
                    if res[i] == CR && res[i + 1] == LF && res[i + 2] == CR
                        && res[i + 3] == LF
                    {
                        pos = i + 3;
                        break;
                    }
                }
                if pos == 0 {
                    return Err(Response.into());
                }
                let (resp_header, resp_body): (&[u8], &[u8]) = res.split_at(pos);
                let header_info = match String::from_utf8(resp_header.to_vec()) {
                    Ok(h) => h,
                    Err(_) => return Err(Header.into()),
                };
                let body = resp_body[1..].to_owned();
                let mut header_vec: Vec<&str> = header_info.split("\r\n").collect();
                let status = header_vec[0].to_owned();
                let status_vec: Vec<&str> = status.splitn(3, ' ').collect();
                let status: u16 = match status_vec[1].parse() {
                    Ok(s) => s,
                    Err(_) => return Err(Status.into()),
                };
                header_vec.remove(0);
                let len = header_vec.len();
                header_vec.remove(len - 1);
                let mut headers: HashMap<String, String> = HashMap::new();
                for header in header_vec {
                    let item = header.to_owned();
                    let item_vec: Vec<&str> = item.splitn(2, ": ").collect();
                    headers.insert(item_vec[0].to_owned(), item_vec[1].to_owned());
                }
                let body = match headers.get("Transfer-Encoding") {
                    Some(enc) => {
                        if enc == "chunked" && !body.is_empty() {
                            Response::<B>::parse_chunk(&body)?
                        } else {
                            body
                        }
                    }
                    None => body,
                };
                let body = serde_json::from_slice::<B>(&body)?;
                Ok(Response { status, body, headers })
            }
            /// A helper function to parse_http_reseponse, when the Header Transfer-Encoding
            /// `chunked` is present in the response.
            pub fn parse_chunk(body: &[u8]) -> Result<Vec<u8>> {
                let mut buf: Vec<u8> = Vec::new();
                let mut count: usize = 0;
                loop {
                    let mut pos: usize = 0;
                    for i in count..body.len() - 1 {
                        if body[i] == CR && body[i + 1] == LF {
                            pos = i;
                            break;
                        }
                    }
                    if pos == 0 {
                        return Err(ChunkSize.into());
                    }
                    let size_s = match std::str::from_utf8(&body[count..pos]) {
                        Ok(s) => s,
                        Err(_) => return Err(Chunk.into()),
                    };
                    count = pos + 2;
                    let size: usize = match usize::from_str_radix(size_s, 16) {
                        Ok(s) => s,
                        Err(_) => return Err(Chunk.into()),
                    };
                    if size == 0 && count + 2 == body.len() {
                        return Ok(buf);
                    }
                    buf.extend_from_slice(&body[pos + 2..pos + 2 + size]);
                    count = count + size + 2;
                }
            }
        }
        impl<B> TryFrom<&[u8]> for Response<B>
        where
            for<'de> B: Deserialize<'de>,
        {
            type Error = Error;
            fn try_from(value: &[u8]) -> Result<Self> {
                Response::parse_http_response(value)
            }
        }
    }
    const CR: u8 = b'\r';
    const LF: u8 = b'\n';
    pub enum Method {
        Get,
        Post,
        Put,
        Delete,
        Head,
    }
    #[automatically_derived]
    impl ::core::clone::Clone for Method {
        #[inline]
        fn clone(&self) -> Method {
            *self
        }
    }
    #[automatically_derived]
    impl ::core::marker::Copy for Method {}
    #[automatically_derived]
    impl ::core::fmt::Debug for Method {
        #[inline]
        fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
            ::core::fmt::Formatter::write_str(
                f,
                match self {
                    Method::Get => "Get",
                    Method::Post => "Post",
                    Method::Put => "Put",
                    Method::Delete => "Delete",
                    Method::Head => "Head",
                },
            )
        }
    }
    #[automatically_derived]
    impl ::core::marker::StructuralPartialEq for Method {}
    #[automatically_derived]
    impl ::core::cmp::PartialEq for Method {
        #[inline]
        fn eq(&self, other: &Method) -> bool {
            let __self_tag = ::core::intrinsics::discriminant_value(self);
            let __arg1_tag = ::core::intrinsics::discriminant_value(other);
            __self_tag == __arg1_tag
        }
    }
    #[automatically_derived]
    impl ::core::marker::StructuralEq for Method {}
    #[automatically_derived]
    impl ::core::cmp::Eq for Method {
        #[inline]
        #[doc(hidden)]
        #[coverage(off)]
        fn assert_receiver_is_total_eq(&self) -> () {}
    }
    impl std::fmt::Display for Method {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
            match self {
                Method::Get => f.write_str("GET"),
                Method::Post => f.write_str("POST"),
                Method::Put => f.write_str("PUT"),
                Method::Delete => f.write_str("DELETE"),
                Method::Head => f.write_str("HEAD"),
            }
        }
    }
}
mod image {}
mod models {
    pub mod container {
        use std::collections::HashMap;
        use serde::{Deserialize, Serialize};
        #[cfg(feature = "chrono")]
        use crate::datetime::datetime_from_unix_timestamp;
        #[cfg(feature = "chrono")]
        use chrono::{DateTime, Utc};
        use super::{image::ContainerConfig, model, network::NetworkSettings};
        #[serde(rename_all = "PascalCase")]
        pub struct ContainerInfo {
            #[cfg(feature = "chrono")]
            #[serde(deserialize_with = "datetime_from_unix_timestamp")]
            #[serde(skip_serializing_if = "Option::is_none")]
            pub created: Option<DateTime<Utc>>,
            #[serde(skip_serializing_if = "Option::is_none")]
            pub command: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none")]
            pub id: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none")]
            pub image: Option<String>,
            #[serde(rename = "ImageID")]
            #[serde(skip_serializing_if = "Option::is_none")]
            pub image_id: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none")]
            pub labels: Option<HashMap<String, String>>,
            #[serde(skip_serializing_if = "Option::is_none")]
            pub names: Option<Vec<String>>,
            #[serde(skip_serializing_if = "Option::is_none")]
            pub ports: Option<Vec<Port>>,
            #[serde(skip_serializing_if = "Option::is_none")]
            pub state: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none")]
            pub status: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none")]
            pub size_rw: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none")]
            pub size_root_fs: Option<i64>,
        }
        #[automatically_derived]
        impl ::core::clone::Clone for ContainerInfo {
            #[inline]
            fn clone(&self) -> ContainerInfo {
                ContainerInfo {
                    created: ::core::clone::Clone::clone(&self.created),
                    command: ::core::clone::Clone::clone(&self.command),
                    id: ::core::clone::Clone::clone(&self.id),
                    image: ::core::clone::Clone::clone(&self.image),
                    image_id: ::core::clone::Clone::clone(&self.image_id),
                    labels: ::core::clone::Clone::clone(&self.labels),
                    names: ::core::clone::Clone::clone(&self.names),
                    ports: ::core::clone::Clone::clone(&self.ports),
                    state: ::core::clone::Clone::clone(&self.state),
                    status: ::core::clone::Clone::clone(&self.status),
                    size_rw: ::core::clone::Clone::clone(&self.size_rw),
                    size_root_fs: ::core::clone::Clone::clone(&self.size_root_fs),
                }
            }
        }
        #[automatically_derived]
        impl ::core::fmt::Debug for ContainerInfo {
            #[inline]
            fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                let names: &'static _ = &[
                    "created",
                    "command",
                    "id",
                    "image",
                    "image_id",
                    "labels",
                    "names",
                    "ports",
                    "state",
                    "status",
                    "size_rw",
                    "size_root_fs",
                ];
                let values: &[&dyn ::core::fmt::Debug] = &[
                    &self.created,
                    &self.command,
                    &self.id,
                    &self.image,
                    &self.image_id,
                    &self.labels,
                    &self.names,
                    &self.ports,
                    &self.state,
                    &self.status,
                    &self.size_rw,
                    &&self.size_root_fs,
                ];
                ::core::fmt::Formatter::debug_struct_fields_finish(
                    f,
                    "ContainerInfo",
                    names,
                    values,
                )
            }
        }
        #[doc(hidden)]
        #[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
        const _: () = {
            #[allow(unused_extern_crates, clippy::useless_attribute)]
            extern crate serde as _serde;
            #[automatically_derived]
            impl _serde::Serialize for ContainerInfo {
                fn serialize<__S>(
                    &self,
                    __serializer: __S,
                ) -> _serde::__private::Result<__S::Ok, __S::Error>
                where
                    __S: _serde::Serializer,
                {
                    let mut __serde_state = _serde::Serializer::serialize_struct(
                        __serializer,
                        "ContainerInfo",
                        false as usize
                            + if Option::is_none(&self.created) { 0 } else { 1 }
                            + if Option::is_none(&self.command) { 0 } else { 1 }
                            + if Option::is_none(&self.id) { 0 } else { 1 }
                            + if Option::is_none(&self.image) { 0 } else { 1 }
                            + if Option::is_none(&self.image_id) { 0 } else { 1 }
                            + if Option::is_none(&self.labels) { 0 } else { 1 }
                            + if Option::is_none(&self.names) { 0 } else { 1 }
                            + if Option::is_none(&self.ports) { 0 } else { 1 }
                            + if Option::is_none(&self.state) { 0 } else { 1 }
                            + if Option::is_none(&self.status) { 0 } else { 1 }
                            + if Option::is_none(&self.size_rw) { 0 } else { 1 }
                            + if Option::is_none(&self.size_root_fs) { 0 } else { 1 },
                    )?;
                    if !Option::is_none(&self.created) {
                        _serde::ser::SerializeStruct::serialize_field(
                            &mut __serde_state,
                            "Created",
                            &self.created,
                        )?;
                    } else {
                        _serde::ser::SerializeStruct::skip_field(
                            &mut __serde_state,
                            "Created",
                        )?;
                    }
                    if !Option::is_none(&self.command) {
                        _serde::ser::SerializeStruct::serialize_field(
                            &mut __serde_state,
                            "Command",
                            &self.command,
                        )?;
                    } else {
                        _serde::ser::SerializeStruct::skip_field(
                            &mut __serde_state,
                            "Command",
                        )?;
                    }
                    if !Option::is_none(&self.id) {
                        _serde::ser::SerializeStruct::serialize_field(
                            &mut __serde_state,
                            "Id",
                            &self.id,
                        )?;
                    } else {
                        _serde::ser::SerializeStruct::skip_field(
                            &mut __serde_state,
                            "Id",
                        )?;
                    }
                    if !Option::is_none(&self.image) {
                        _serde::ser::SerializeStruct::serialize_field(
                            &mut __serde_state,
                            "Image",
                            &self.image,
                        )?;
                    } else {
                        _serde::ser::SerializeStruct::skip_field(
                            &mut __serde_state,
                            "Image",
                        )?;
                    }
                    if !Option::is_none(&self.image_id) {
                        _serde::ser::SerializeStruct::serialize_field(
                            &mut __serde_state,
                            "ImageID",
                            &self.image_id,
                        )?;
                    } else {
                        _serde::ser::SerializeStruct::skip_field(
                            &mut __serde_state,
                            "ImageID",
                        )?;
                    }
                    if !Option::is_none(&self.labels) {
                        _serde::ser::SerializeStruct::serialize_field(
                            &mut __serde_state,
                            "Labels",
                            &self.labels,
                        )?;
                    } else {
                        _serde::ser::SerializeStruct::skip_field(
                            &mut __serde_state,
                            "Labels",
                        )?;
                    }
                    if !Option::is_none(&self.names) {
                        _serde::ser::SerializeStruct::serialize_field(
                            &mut __serde_state,
                            "Names",
                            &self.names,
                        )?;
                    } else {
                        _serde::ser::SerializeStruct::skip_field(
                            &mut __serde_state,
                            "Names",
                        )?;
                    }
                    if !Option::is_none(&self.ports) {
                        _serde::ser::SerializeStruct::serialize_field(
                            &mut __serde_state,
                            "Ports",
                            &self.ports,
                        )?;
                    } else {
                        _serde::ser::SerializeStruct::skip_field(
                            &mut __serde_state,
                            "Ports",
                        )?;
                    }
                    if !Option::is_none(&self.state) {
                        _serde::ser::SerializeStruct::serialize_field(
                            &mut __serde_state,
                            "State",
                            &self.state,
                        )?;
                    } else {
                        _serde::ser::SerializeStruct::skip_field(
                            &mut __serde_state,
                            "State",
                        )?;
                    }
                    if !Option::is_none(&self.status) {
                        _serde::ser::SerializeStruct::serialize_field(
                            &mut __serde_state,
                            "Status",
                            &self.status,
                        )?;
                    } else {
                        _serde::ser::SerializeStruct::skip_field(
                            &mut __serde_state,
                            "Status",
                        )?;
                    }
                    if !Option::is_none(&self.size_rw) {
                        _serde::ser::SerializeStruct::serialize_field(
                            &mut __serde_state,
                            "SizeRw",
                            &self.size_rw,
                        )?;
                    } else {
                        _serde::ser::SerializeStruct::skip_field(
                            &mut __serde_state,
                            "SizeRw",
                        )?;
                    }
                    if !Option::is_none(&self.size_root_fs) {
                        _serde::ser::SerializeStruct::serialize_field(
                            &mut __serde_state,
                            "SizeRootFs",
                            &self.size_root_fs,
                        )?;
                    } else {
                        _serde::ser::SerializeStruct::skip_field(
                            &mut __serde_state,
                            "SizeRootFs",
                        )?;
                    }
                    _serde::ser::SerializeStruct::end(__serde_state)
                }
            }
        };
        #[doc(hidden)]
        #[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
        const _: () = {
            #[allow(unused_extern_crates, clippy::useless_attribute)]
            extern crate serde as _serde;
            #[automatically_derived]
            impl<'de> _serde::Deserialize<'de> for ContainerInfo {
                fn deserialize<__D>(
                    __deserializer: __D,
                ) -> _serde::__private::Result<Self, __D::Error>
                where
                    __D: _serde::Deserializer<'de>,
                {
                    #[allow(non_camel_case_types)]
                    #[doc(hidden)]
                    enum __Field {
                        __field0,
                        __field1,
                        __field2,
                        __field3,
                        __field4,
                        __field5,
                        __field6,
                        __field7,
                        __field8,
                        __field9,
                        __field10,
                        __field11,
                        __ignore,
                    }
                    #[doc(hidden)]
                    struct __FieldVisitor;
                    impl<'de> _serde::de::Visitor<'de> for __FieldVisitor {
                        type Value = __Field;
                        fn expecting(
                            &self,
                            __formatter: &mut _serde::__private::Formatter,
                        ) -> _serde::__private::fmt::Result {
                            _serde::__private::Formatter::write_str(
                                __formatter,
                                "field identifier",
                            )
                        }
                        fn visit_u64<__E>(
                            self,
                            __value: u64,
                        ) -> _serde::__private::Result<Self::Value, __E>
                        where
                            __E: _serde::de::Error,
                        {
                            match __value {
                                0u64 => _serde::__private::Ok(__Field::__field0),
                                1u64 => _serde::__private::Ok(__Field::__field1),
                                2u64 => _serde::__private::Ok(__Field::__field2),
                                3u64 => _serde::__private::Ok(__Field::__field3),
                                4u64 => _serde::__private::Ok(__Field::__field4),
                                5u64 => _serde::__private::Ok(__Field::__field5),
                                6u64 => _serde::__private::Ok(__Field::__field6),
                                7u64 => _serde::__private::Ok(__Field::__field7),
                                8u64 => _serde::__private::Ok(__Field::__field8),
                                9u64 => _serde::__private::Ok(__Field::__field9),
                                10u64 => _serde::__private::Ok(__Field::__field10),
                                11u64 => _serde::__private::Ok(__Field::__field11),
                                _ => _serde::__private::Ok(__Field::__ignore),
                            }
                        }
                        fn visit_str<__E>(
                            self,
                            __value: &str,
                        ) -> _serde::__private::Result<Self::Value, __E>
                        where
                            __E: _serde::de::Error,
                        {
                            match __value {
                                "Created" => _serde::__private::Ok(__Field::__field0),
                                "Command" => _serde::__private::Ok(__Field::__field1),
                                "Id" => _serde::__private::Ok(__Field::__field2),
                                "Image" => _serde::__private::Ok(__Field::__field3),
                                "ImageID" => _serde::__private::Ok(__Field::__field4),
                                "Labels" => _serde::__private::Ok(__Field::__field5),
                                "Names" => _serde::__private::Ok(__Field::__field6),
                                "Ports" => _serde::__private::Ok(__Field::__field7),
                                "State" => _serde::__private::Ok(__Field::__field8),
                                "Status" => _serde::__private::Ok(__Field::__field9),
                                "SizeRw" => _serde::__private::Ok(__Field::__field10),
                                "SizeRootFs" => _serde::__private::Ok(__Field::__field11),
                                _ => _serde::__private::Ok(__Field::__ignore),
                            }
                        }
                        fn visit_bytes<__E>(
                            self,
                            __value: &[u8],
                        ) -> _serde::__private::Result<Self::Value, __E>
                        where
                            __E: _serde::de::Error,
                        {
                            match __value {
                                b"Created" => _serde::__private::Ok(__Field::__field0),
                                b"Command" => _serde::__private::Ok(__Field::__field1),
                                b"Id" => _serde::__private::Ok(__Field::__field2),
                                b"Image" => _serde::__private::Ok(__Field::__field3),
                                b"ImageID" => _serde::__private::Ok(__Field::__field4),
                                b"Labels" => _serde::__private::Ok(__Field::__field5),
                                b"Names" => _serde::__private::Ok(__Field::__field6),
                                b"Ports" => _serde::__private::Ok(__Field::__field7),
                                b"State" => _serde::__private::Ok(__Field::__field8),
                                b"Status" => _serde::__private::Ok(__Field::__field9),
                                b"SizeRw" => _serde::__private::Ok(__Field::__field10),
                                b"SizeRootFs" => _serde::__private::Ok(__Field::__field11),
                                _ => _serde::__private::Ok(__Field::__ignore),
                            }
                        }
                    }
                    impl<'de> _serde::Deserialize<'de> for __Field {
                        #[inline]
                        fn deserialize<__D>(
                            __deserializer: __D,
                        ) -> _serde::__private::Result<Self, __D::Error>
                        where
                            __D: _serde::Deserializer<'de>,
                        {
                            _serde::Deserializer::deserialize_identifier(
                                __deserializer,
                                __FieldVisitor,
                            )
                        }
                    }
                    #[doc(hidden)]
                    struct __Visitor<'de> {
                        marker: _serde::__private::PhantomData<ContainerInfo>,
                        lifetime: _serde::__private::PhantomData<&'de ()>,
                    }
                    impl<'de> _serde::de::Visitor<'de> for __Visitor<'de> {
                        type Value = ContainerInfo;
                        fn expecting(
                            &self,
                            __formatter: &mut _serde::__private::Formatter,
                        ) -> _serde::__private::fmt::Result {
                            _serde::__private::Formatter::write_str(
                                __formatter,
                                "struct ContainerInfo",
                            )
                        }
                        #[inline]
                        fn visit_seq<__A>(
                            self,
                            mut __seq: __A,
                        ) -> _serde::__private::Result<Self::Value, __A::Error>
                        where
                            __A: _serde::de::SeqAccess<'de>,
                        {
                            let __field0 = match {
                                #[doc(hidden)]
                                struct __DeserializeWith<'de> {
                                    value: Option<DateTime<Utc>>,
                                    phantom: _serde::__private::PhantomData<ContainerInfo>,
                                    lifetime: _serde::__private::PhantomData<&'de ()>,
                                }
                                impl<'de> _serde::Deserialize<'de>
                                for __DeserializeWith<'de> {
                                    fn deserialize<__D>(
                                        __deserializer: __D,
                                    ) -> _serde::__private::Result<Self, __D::Error>
                                    where
                                        __D: _serde::Deserializer<'de>,
                                    {
                                        _serde::__private::Ok(__DeserializeWith {
                                            value: datetime_from_unix_timestamp(__deserializer)?,
                                            phantom: _serde::__private::PhantomData,
                                            lifetime: _serde::__private::PhantomData,
                                        })
                                    }
                                }
                                _serde::__private::Option::map(
                                    _serde::de::SeqAccess::next_element::<
                                        __DeserializeWith<'de>,
                                    >(&mut __seq)?,
                                    |__wrap| __wrap.value,
                                )
                            } {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            0usize,
                                            &"struct ContainerInfo with 12 elements",
                                        ),
                                    );
                                }
                            };
                            let __field1 = match _serde::de::SeqAccess::next_element::<
                                Option<String>,
                            >(&mut __seq)? {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            1usize,
                                            &"struct ContainerInfo with 12 elements",
                                        ),
                                    );
                                }
                            };
                            let __field2 = match _serde::de::SeqAccess::next_element::<
                                Option<String>,
                            >(&mut __seq)? {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            2usize,
                                            &"struct ContainerInfo with 12 elements",
                                        ),
                                    );
                                }
                            };
                            let __field3 = match _serde::de::SeqAccess::next_element::<
                                Option<String>,
                            >(&mut __seq)? {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            3usize,
                                            &"struct ContainerInfo with 12 elements",
                                        ),
                                    );
                                }
                            };
                            let __field4 = match _serde::de::SeqAccess::next_element::<
                                Option<String>,
                            >(&mut __seq)? {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            4usize,
                                            &"struct ContainerInfo with 12 elements",
                                        ),
                                    );
                                }
                            };
                            let __field5 = match _serde::de::SeqAccess::next_element::<
                                Option<HashMap<String, String>>,
                            >(&mut __seq)? {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            5usize,
                                            &"struct ContainerInfo with 12 elements",
                                        ),
                                    );
                                }
                            };
                            let __field6 = match _serde::de::SeqAccess::next_element::<
                                Option<Vec<String>>,
                            >(&mut __seq)? {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            6usize,
                                            &"struct ContainerInfo with 12 elements",
                                        ),
                                    );
                                }
                            };
                            let __field7 = match _serde::de::SeqAccess::next_element::<
                                Option<Vec<Port>>,
                            >(&mut __seq)? {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            7usize,
                                            &"struct ContainerInfo with 12 elements",
                                        ),
                                    );
                                }
                            };
                            let __field8 = match _serde::de::SeqAccess::next_element::<
                                Option<String>,
                            >(&mut __seq)? {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            8usize,
                                            &"struct ContainerInfo with 12 elements",
                                        ),
                                    );
                                }
                            };
                            let __field9 = match _serde::de::SeqAccess::next_element::<
                                Option<String>,
                            >(&mut __seq)? {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            9usize,
                                            &"struct ContainerInfo with 12 elements",
                                        ),
                                    );
                                }
                            };
                            let __field10 = match _serde::de::SeqAccess::next_element::<
                                Option<i64>,
                            >(&mut __seq)? {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            10usize,
                                            &"struct ContainerInfo with 12 elements",
                                        ),
                                    );
                                }
                            };
                            let __field11 = match _serde::de::SeqAccess::next_element::<
                                Option<i64>,
                            >(&mut __seq)? {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            11usize,
                                            &"struct ContainerInfo with 12 elements",
                                        ),
                                    );
                                }
                            };
                            _serde::__private::Ok(ContainerInfo {
                                created: __field0,
                                command: __field1,
                                id: __field2,
                                image: __field3,
                                image_id: __field4,
                                labels: __field5,
                                names: __field6,
                                ports: __field7,
                                state: __field8,
                                status: __field9,
                                size_rw: __field10,
                                size_root_fs: __field11,
                            })
                        }
                        #[inline]
                        fn visit_map<__A>(
                            self,
                            mut __map: __A,
                        ) -> _serde::__private::Result<Self::Value, __A::Error>
                        where
                            __A: _serde::de::MapAccess<'de>,
                        {
                            let mut __field0: _serde::__private::Option<
                                Option<DateTime<Utc>>,
                            > = _serde::__private::None;
                            let mut __field1: _serde::__private::Option<
                                Option<String>,
                            > = _serde::__private::None;
                            let mut __field2: _serde::__private::Option<
                                Option<String>,
                            > = _serde::__private::None;
                            let mut __field3: _serde::__private::Option<
                                Option<String>,
                            > = _serde::__private::None;
                            let mut __field4: _serde::__private::Option<
                                Option<String>,
                            > = _serde::__private::None;
                            let mut __field5: _serde::__private::Option<
                                Option<HashMap<String, String>>,
                            > = _serde::__private::None;
                            let mut __field6: _serde::__private::Option<
                                Option<Vec<String>>,
                            > = _serde::__private::None;
                            let mut __field7: _serde::__private::Option<
                                Option<Vec<Port>>,
                            > = _serde::__private::None;
                            let mut __field8: _serde::__private::Option<
                                Option<String>,
                            > = _serde::__private::None;
                            let mut __field9: _serde::__private::Option<
                                Option<String>,
                            > = _serde::__private::None;
                            let mut __field10: _serde::__private::Option<Option<i64>> = _serde::__private::None;
                            let mut __field11: _serde::__private::Option<Option<i64>> = _serde::__private::None;
                            while let _serde::__private::Some(__key) = _serde::de::MapAccess::next_key::<
                                __Field,
                            >(&mut __map)? {
                                match __key {
                                    __Field::__field0 => {
                                        if _serde::__private::Option::is_some(&__field0) {
                                            return _serde::__private::Err(
                                                <__A::Error as _serde::de::Error>::duplicate_field(
                                                    "Created",
                                                ),
                                            );
                                        }
                                        __field0 = _serde::__private::Some({
                                            #[doc(hidden)]
                                            struct __DeserializeWith<'de> {
                                                value: Option<DateTime<Utc>>,
                                                phantom: _serde::__private::PhantomData<ContainerInfo>,
                                                lifetime: _serde::__private::PhantomData<&'de ()>,
                                            }
                                            impl<'de> _serde::Deserialize<'de>
                                            for __DeserializeWith<'de> {
                                                fn deserialize<__D>(
                                                    __deserializer: __D,
                                                ) -> _serde::__private::Result<Self, __D::Error>
                                                where
                                                    __D: _serde::Deserializer<'de>,
                                                {
                                                    _serde::__private::Ok(__DeserializeWith {
                                                        value: datetime_from_unix_timestamp(__deserializer)?,
                                                        phantom: _serde::__private::PhantomData,
                                                        lifetime: _serde::__private::PhantomData,
                                                    })
                                                }
                                            }
                                            match _serde::de::MapAccess::next_value::<
                                                __DeserializeWith<'de>,
                                            >(&mut __map) {
                                                _serde::__private::Ok(__wrapper) => __wrapper.value,
                                                _serde::__private::Err(__err) => {
                                                    return _serde::__private::Err(__err);
                                                }
                                            }
                                        });
                                    }
                                    __Field::__field1 => {
                                        if _serde::__private::Option::is_some(&__field1) {
                                            return _serde::__private::Err(
                                                <__A::Error as _serde::de::Error>::duplicate_field(
                                                    "Command",
                                                ),
                                            );
                                        }
                                        __field1 = _serde::__private::Some(
                                            _serde::de::MapAccess::next_value::<
                                                Option<String>,
                                            >(&mut __map)?,
                                        );
                                    }
                                    __Field::__field2 => {
                                        if _serde::__private::Option::is_some(&__field2) {
                                            return _serde::__private::Err(
                                                <__A::Error as _serde::de::Error>::duplicate_field("Id"),
                                            );
                                        }
                                        __field2 = _serde::__private::Some(
                                            _serde::de::MapAccess::next_value::<
                                                Option<String>,
                                            >(&mut __map)?,
                                        );
                                    }
                                    __Field::__field3 => {
                                        if _serde::__private::Option::is_some(&__field3) {
                                            return _serde::__private::Err(
                                                <__A::Error as _serde::de::Error>::duplicate_field("Image"),
                                            );
                                        }
                                        __field3 = _serde::__private::Some(
                                            _serde::de::MapAccess::next_value::<
                                                Option<String>,
                                            >(&mut __map)?,
                                        );
                                    }
                                    __Field::__field4 => {
                                        if _serde::__private::Option::is_some(&__field4) {
                                            return _serde::__private::Err(
                                                <__A::Error as _serde::de::Error>::duplicate_field(
                                                    "ImageID",
                                                ),
                                            );
                                        }
                                        __field4 = _serde::__private::Some(
                                            _serde::de::MapAccess::next_value::<
                                                Option<String>,
                                            >(&mut __map)?,
                                        );
                                    }
                                    __Field::__field5 => {
                                        if _serde::__private::Option::is_some(&__field5) {
                                            return _serde::__private::Err(
                                                <__A::Error as _serde::de::Error>::duplicate_field("Labels"),
                                            );
                                        }
                                        __field5 = _serde::__private::Some(
                                            _serde::de::MapAccess::next_value::<
                                                Option<HashMap<String, String>>,
                                            >(&mut __map)?,
                                        );
                                    }
                                    __Field::__field6 => {
                                        if _serde::__private::Option::is_some(&__field6) {
                                            return _serde::__private::Err(
                                                <__A::Error as _serde::de::Error>::duplicate_field("Names"),
                                            );
                                        }
                                        __field6 = _serde::__private::Some(
                                            _serde::de::MapAccess::next_value::<
                                                Option<Vec<String>>,
                                            >(&mut __map)?,
                                        );
                                    }
                                    __Field::__field7 => {
                                        if _serde::__private::Option::is_some(&__field7) {
                                            return _serde::__private::Err(
                                                <__A::Error as _serde::de::Error>::duplicate_field("Ports"),
                                            );
                                        }
                                        __field7 = _serde::__private::Some(
                                            _serde::de::MapAccess::next_value::<
                                                Option<Vec<Port>>,
                                            >(&mut __map)?,
                                        );
                                    }
                                    __Field::__field8 => {
                                        if _serde::__private::Option::is_some(&__field8) {
                                            return _serde::__private::Err(
                                                <__A::Error as _serde::de::Error>::duplicate_field("State"),
                                            );
                                        }
                                        __field8 = _serde::__private::Some(
                                            _serde::de::MapAccess::next_value::<
                                                Option<String>,
                                            >(&mut __map)?,
                                        );
                                    }
                                    __Field::__field9 => {
                                        if _serde::__private::Option::is_some(&__field9) {
                                            return _serde::__private::Err(
                                                <__A::Error as _serde::de::Error>::duplicate_field("Status"),
                                            );
                                        }
                                        __field9 = _serde::__private::Some(
                                            _serde::de::MapAccess::next_value::<
                                                Option<String>,
                                            >(&mut __map)?,
                                        );
                                    }
                                    __Field::__field10 => {
                                        if _serde::__private::Option::is_some(&__field10) {
                                            return _serde::__private::Err(
                                                <__A::Error as _serde::de::Error>::duplicate_field("SizeRw"),
                                            );
                                        }
                                        __field10 = _serde::__private::Some(
                                            _serde::de::MapAccess::next_value::<
                                                Option<i64>,
                                            >(&mut __map)?,
                                        );
                                    }
                                    __Field::__field11 => {
                                        if _serde::__private::Option::is_some(&__field11) {
                                            return _serde::__private::Err(
                                                <__A::Error as _serde::de::Error>::duplicate_field(
                                                    "SizeRootFs",
                                                ),
                                            );
                                        }
                                        __field11 = _serde::__private::Some(
                                            _serde::de::MapAccess::next_value::<
                                                Option<i64>,
                                            >(&mut __map)?,
                                        );
                                    }
                                    _ => {
                                        let _ = _serde::de::MapAccess::next_value::<
                                            _serde::de::IgnoredAny,
                                        >(&mut __map)?;
                                    }
                                }
                            }
                            let __field0 = match __field0 {
                                _serde::__private::Some(__field0) => __field0,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        <__A::Error as _serde::de::Error>::missing_field("Created"),
                                    );
                                }
                            };
                            let __field1 = match __field1 {
                                _serde::__private::Some(__field1) => __field1,
                                _serde::__private::None => {
                                    _serde::__private::de::missing_field("Command")?
                                }
                            };
                            let __field2 = match __field2 {
                                _serde::__private::Some(__field2) => __field2,
                                _serde::__private::None => {
                                    _serde::__private::de::missing_field("Id")?
                                }
                            };
                            let __field3 = match __field3 {
                                _serde::__private::Some(__field3) => __field3,
                                _serde::__private::None => {
                                    _serde::__private::de::missing_field("Image")?
                                }
                            };
                            let __field4 = match __field4 {
                                _serde::__private::Some(__field4) => __field4,
                                _serde::__private::None => {
                                    _serde::__private::de::missing_field("ImageID")?
                                }
                            };
                            let __field5 = match __field5 {
                                _serde::__private::Some(__field5) => __field5,
                                _serde::__private::None => {
                                    _serde::__private::de::missing_field("Labels")?
                                }
                            };
                            let __field6 = match __field6 {
                                _serde::__private::Some(__field6) => __field6,
                                _serde::__private::None => {
                                    _serde::__private::de::missing_field("Names")?
                                }
                            };
                            let __field7 = match __field7 {
                                _serde::__private::Some(__field7) => __field7,
                                _serde::__private::None => {
                                    _serde::__private::de::missing_field("Ports")?
                                }
                            };
                            let __field8 = match __field8 {
                                _serde::__private::Some(__field8) => __field8,
                                _serde::__private::None => {
                                    _serde::__private::de::missing_field("State")?
                                }
                            };
                            let __field9 = match __field9 {
                                _serde::__private::Some(__field9) => __field9,
                                _serde::__private::None => {
                                    _serde::__private::de::missing_field("Status")?
                                }
                            };
                            let __field10 = match __field10 {
                                _serde::__private::Some(__field10) => __field10,
                                _serde::__private::None => {
                                    _serde::__private::de::missing_field("SizeRw")?
                                }
                            };
                            let __field11 = match __field11 {
                                _serde::__private::Some(__field11) => __field11,
                                _serde::__private::None => {
                                    _serde::__private::de::missing_field("SizeRootFs")?
                                }
                            };
                            _serde::__private::Ok(ContainerInfo {
                                created: __field0,
                                command: __field1,
                                id: __field2,
                                image: __field3,
                                image_id: __field4,
                                labels: __field5,
                                names: __field6,
                                ports: __field7,
                                state: __field8,
                                status: __field9,
                                size_rw: __field10,
                                size_root_fs: __field11,
                            })
                        }
                    }
                    #[doc(hidden)]
                    const FIELDS: &'static [&'static str] = &[
                        "Created",
                        "Command",
                        "Id",
                        "Image",
                        "ImageID",
                        "Labels",
                        "Names",
                        "Ports",
                        "State",
                        "Status",
                        "SizeRw",
                        "SizeRootFs",
                    ];
                    _serde::Deserializer::deserialize_struct(
                        __deserializer,
                        "ContainerInfo",
                        FIELDS,
                        __Visitor {
                            marker: _serde::__private::PhantomData::<ContainerInfo>,
                            lifetime: _serde::__private::PhantomData,
                        },
                    )
                }
            }
        };
        #[serde(rename_all = "PascalCase")]
        pub struct ContainerDetails {
            #[serde(skip_serializing_if = "Option::is_none")]
            pub id: Option<String>,
            #[cfg(feature = "chrono")]
            #[serde(skip_serializing_if = "Option::is_none")]
            pub created: Option<DateTime<Utc>>,
            #[serde(skip_serializing_if = "Option::is_none")]
            pub path: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none")]
            pub args: Option<Vec<String>>,
            #[serde(skip_serializing_if = "Option::is_none")]
            pub state: Option<State>,
            #[serde(skip_serializing_if = "Option::is_none")]
            pub image: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none")]
            pub resolv_conf_path: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none")]
            pub hostname_path: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none")]
            pub hosts_path: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none")]
            pub log_path: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none")]
            pub name: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none")]
            pub restart_count: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none")]
            pub driver: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none")]
            pub platform: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none")]
            pub mount_label: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none")]
            pub process_label: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none")]
            pub app_armor_profile: Option<String>,
            #[serde(rename = "ExecIDs")]
            #[serde(skip_serializing_if = "Option::is_none")]
            pub exec_ids: Option<Option<Vec<String>>>,
            #[serde(skip_serializing_if = "Option::is_none")]
            pub host_config: Option<HostConfig>,
            #[serde(skip_serializing_if = "Option::is_none")]
            pub graph_driver: Option<GraphDriverData>,
            #[serde(skip_serializing_if = "Option::is_none")]
            pub size_rw: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none")]
            pub mounts: Option<Vec<MountPoint>>,
            #[serde(skip_serializing_if = "Option::is_none")]
            pub config: Option<ContainerConfig>,
            #[serde(skip_serializing_if = "Option::is_none")]
            pub network_settings: Option<NetworkSettings>,
        }
        #[automatically_derived]
        impl ::core::clone::Clone for ContainerDetails {
            #[inline]
            fn clone(&self) -> ContainerDetails {
                ContainerDetails {
                    id: ::core::clone::Clone::clone(&self.id),
                    created: ::core::clone::Clone::clone(&self.created),
                    path: ::core::clone::Clone::clone(&self.path),
                    args: ::core::clone::Clone::clone(&self.args),
                    state: ::core::clone::Clone::clone(&self.state),
                    image: ::core::clone::Clone::clone(&self.image),
                    resolv_conf_path: ::core::clone::Clone::clone(
                        &self.resolv_conf_path,
                    ),
                    hostname_path: ::core::clone::Clone::clone(&self.hostname_path),
                    hosts_path: ::core::clone::Clone::clone(&self.hosts_path),
                    log_path: ::core::clone::Clone::clone(&self.log_path),
                    name: ::core::clone::Clone::clone(&self.name),
                    restart_count: ::core::clone::Clone::clone(&self.restart_count),
                    driver: ::core::clone::Clone::clone(&self.driver),
                    platform: ::core::clone::Clone::clone(&self.platform),
                    mount_label: ::core::clone::Clone::clone(&self.mount_label),
                    process_label: ::core::clone::Clone::clone(&self.process_label),
                    app_armor_profile: ::core::clone::Clone::clone(
                        &self.app_armor_profile,
                    ),
                    exec_ids: ::core::clone::Clone::clone(&self.exec_ids),
                    host_config: ::core::clone::Clone::clone(&self.host_config),
                    graph_driver: ::core::clone::Clone::clone(&self.graph_driver),
                    size_rw: ::core::clone::Clone::clone(&self.size_rw),
                    mounts: ::core::clone::Clone::clone(&self.mounts),
                    config: ::core::clone::Clone::clone(&self.config),
                    network_settings: ::core::clone::Clone::clone(&self.network_settings),
                }
            }
        }
        #[automatically_derived]
        impl ::core::fmt::Debug for ContainerDetails {
            #[inline]
            fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                let names: &'static _ = &[
                    "id",
                    "created",
                    "path",
                    "args",
                    "state",
                    "image",
                    "resolv_conf_path",
                    "hostname_path",
                    "hosts_path",
                    "log_path",
                    "name",
                    "restart_count",
                    "driver",
                    "platform",
                    "mount_label",
                    "process_label",
                    "app_armor_profile",
                    "exec_ids",
                    "host_config",
                    "graph_driver",
                    "size_rw",
                    "mounts",
                    "config",
                    "network_settings",
                ];
                let values: &[&dyn ::core::fmt::Debug] = &[
                    &self.id,
                    &self.created,
                    &self.path,
                    &self.args,
                    &self.state,
                    &self.image,
                    &self.resolv_conf_path,
                    &self.hostname_path,
                    &self.hosts_path,
                    &self.log_path,
                    &self.name,
                    &self.restart_count,
                    &self.driver,
                    &self.platform,
                    &self.mount_label,
                    &self.process_label,
                    &self.app_armor_profile,
                    &self.exec_ids,
                    &self.host_config,
                    &self.graph_driver,
                    &self.size_rw,
                    &self.mounts,
                    &self.config,
                    &&self.network_settings,
                ];
                ::core::fmt::Formatter::debug_struct_fields_finish(
                    f,
                    "ContainerDetails",
                    names,
                    values,
                )
            }
        }
        #[doc(hidden)]
        #[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
        const _: () = {
            #[allow(unused_extern_crates, clippy::useless_attribute)]
            extern crate serde as _serde;
            #[automatically_derived]
            impl _serde::Serialize for ContainerDetails {
                fn serialize<__S>(
                    &self,
                    __serializer: __S,
                ) -> _serde::__private::Result<__S::Ok, __S::Error>
                where
                    __S: _serde::Serializer,
                {
                    let mut __serde_state = _serde::Serializer::serialize_struct(
                        __serializer,
                        "ContainerDetails",
                        false as usize + if Option::is_none(&self.id) { 0 } else { 1 }
                            + if Option::is_none(&self.created) { 0 } else { 1 }
                            + if Option::is_none(&self.path) { 0 } else { 1 }
                            + if Option::is_none(&self.args) { 0 } else { 1 }
                            + if Option::is_none(&self.state) { 0 } else { 1 }
                            + if Option::is_none(&self.image) { 0 } else { 1 }
                            + if Option::is_none(&self.resolv_conf_path) { 0 } else { 1 }
                            + if Option::is_none(&self.hostname_path) { 0 } else { 1 }
                            + if Option::is_none(&self.hosts_path) { 0 } else { 1 }
                            + if Option::is_none(&self.log_path) { 0 } else { 1 }
                            + if Option::is_none(&self.name) { 0 } else { 1 }
                            + if Option::is_none(&self.restart_count) { 0 } else { 1 }
                            + if Option::is_none(&self.driver) { 0 } else { 1 }
                            + if Option::is_none(&self.platform) { 0 } else { 1 }
                            + if Option::is_none(&self.mount_label) { 0 } else { 1 }
                            + if Option::is_none(&self.process_label) { 0 } else { 1 }
                            + if Option::is_none(&self.app_armor_profile) {
                                0
                            } else {
                                1
                            } + if Option::is_none(&self.exec_ids) { 0 } else { 1 }
                            + if Option::is_none(&self.host_config) { 0 } else { 1 }
                            + if Option::is_none(&self.graph_driver) { 0 } else { 1 }
                            + if Option::is_none(&self.size_rw) { 0 } else { 1 }
                            + if Option::is_none(&self.mounts) { 0 } else { 1 }
                            + if Option::is_none(&self.config) { 0 } else { 1 }
                            + if Option::is_none(&self.network_settings) { 0 } else { 1 },
                    )?;
                    if !Option::is_none(&self.id) {
                        _serde::ser::SerializeStruct::serialize_field(
                            &mut __serde_state,
                            "Id",
                            &self.id,
                        )?;
                    } else {
                        _serde::ser::SerializeStruct::skip_field(
                            &mut __serde_state,
                            "Id",
                        )?;
                    }
                    if !Option::is_none(&self.created) {
                        _serde::ser::SerializeStruct::serialize_field(
                            &mut __serde_state,
                            "Created",
                            &self.created,
                        )?;
                    } else {
                        _serde::ser::SerializeStruct::skip_field(
                            &mut __serde_state,
                            "Created",
                        )?;
                    }
                    if !Option::is_none(&self.path) {
                        _serde::ser::SerializeStruct::serialize_field(
                            &mut __serde_state,
                            "Path",
                            &self.path,
                        )?;
                    } else {
                        _serde::ser::SerializeStruct::skip_field(
                            &mut __serde_state,
                            "Path",
                        )?;
                    }
                    if !Option::is_none(&self.args) {
                        _serde::ser::SerializeStruct::serialize_field(
                            &mut __serde_state,
                            "Args",
                            &self.args,
                        )?;
                    } else {
                        _serde::ser::SerializeStruct::skip_field(
                            &mut __serde_state,
                            "Args",
                        )?;
                    }
                    if !Option::is_none(&self.state) {
                        _serde::ser::SerializeStruct::serialize_field(
                            &mut __serde_state,
                            "State",
                            &self.state,
                        )?;
                    } else {
                        _serde::ser::SerializeStruct::skip_field(
                            &mut __serde_state,
                            "State",
                        )?;
                    }
                    if !Option::is_none(&self.image) {
                        _serde::ser::SerializeStruct::serialize_field(
                            &mut __serde_state,
                            "Image",
                            &self.image,
                        )?;
                    } else {
                        _serde::ser::SerializeStruct::skip_field(
                            &mut __serde_state,
                            "Image",
                        )?;
                    }
                    if !Option::is_none(&self.resolv_conf_path) {
                        _serde::ser::SerializeStruct::serialize_field(
                            &mut __serde_state,
                            "ResolvConfPath",
                            &self.resolv_conf_path,
                        )?;
                    } else {
                        _serde::ser::SerializeStruct::skip_field(
                            &mut __serde_state,
                            "ResolvConfPath",
                        )?;
                    }
                    if !Option::is_none(&self.hostname_path) {
                        _serde::ser::SerializeStruct::serialize_field(
                            &mut __serde_state,
                            "HostnamePath",
                            &self.hostname_path,
                        )?;
                    } else {
                        _serde::ser::SerializeStruct::skip_field(
                            &mut __serde_state,
                            "HostnamePath",
                        )?;
                    }
                    if !Option::is_none(&self.hosts_path) {
                        _serde::ser::SerializeStruct::serialize_field(
                            &mut __serde_state,
                            "HostsPath",
                            &self.hosts_path,
                        )?;
                    } else {
                        _serde::ser::SerializeStruct::skip_field(
                            &mut __serde_state,
                            "HostsPath",
                        )?;
                    }
                    if !Option::is_none(&self.log_path) {
                        _serde::ser::SerializeStruct::serialize_field(
                            &mut __serde_state,
                            "LogPath",
                            &self.log_path,
                        )?;
                    } else {
                        _serde::ser::SerializeStruct::skip_field(
                            &mut __serde_state,
                            "LogPath",
                        )?;
                    }
                    if !Option::is_none(&self.name) {
                        _serde::ser::SerializeStruct::serialize_field(
                            &mut __serde_state,
                            "Name",
                            &self.name,
                        )?;
                    } else {
                        _serde::ser::SerializeStruct::skip_field(
                            &mut __serde_state,
                            "Name",
                        )?;
                    }
                    if !Option::is_none(&self.restart_count) {
                        _serde::ser::SerializeStruct::serialize_field(
                            &mut __serde_state,
                            "RestartCount",
                            &self.restart_count,
                        )?;
                    } else {
                        _serde::ser::SerializeStruct::skip_field(
                            &mut __serde_state,
                            "RestartCount",
                        )?;
                    }
                    if !Option::is_none(&self.driver) {
                        _serde::ser::SerializeStruct::serialize_field(
                            &mut __serde_state,
                            "Driver",
                            &self.driver,
                        )?;
                    } else {
                        _serde::ser::SerializeStruct::skip_field(
                            &mut __serde_state,
                            "Driver",
                        )?;
                    }
                    if !Option::is_none(&self.platform) {
                        _serde::ser::SerializeStruct::serialize_field(
                            &mut __serde_state,
                            "Platform",
                            &self.platform,
                        )?;
                    } else {
                        _serde::ser::SerializeStruct::skip_field(
                            &mut __serde_state,
                            "Platform",
                        )?;
                    }
                    if !Option::is_none(&self.mount_label) {
                        _serde::ser::SerializeStruct::serialize_field(
                            &mut __serde_state,
                            "MountLabel",
                            &self.mount_label,
                        )?;
                    } else {
                        _serde::ser::SerializeStruct::skip_field(
                            &mut __serde_state,
                            "MountLabel",
                        )?;
                    }
                    if !Option::is_none(&self.process_label) {
                        _serde::ser::SerializeStruct::serialize_field(
                            &mut __serde_state,
                            "ProcessLabel",
                            &self.process_label,
                        )?;
                    } else {
                        _serde::ser::SerializeStruct::skip_field(
                            &mut __serde_state,
                            "ProcessLabel",
                        )?;
                    }
                    if !Option::is_none(&self.app_armor_profile) {
                        _serde::ser::SerializeStruct::serialize_field(
                            &mut __serde_state,
                            "AppArmorProfile",
                            &self.app_armor_profile,
                        )?;
                    } else {
                        _serde::ser::SerializeStruct::skip_field(
                            &mut __serde_state,
                            "AppArmorProfile",
                        )?;
                    }
                    if !Option::is_none(&self.exec_ids) {
                        _serde::ser::SerializeStruct::serialize_field(
                            &mut __serde_state,
                            "ExecIDs",
                            &self.exec_ids,
                        )?;
                    } else {
                        _serde::ser::SerializeStruct::skip_field(
                            &mut __serde_state,
                            "ExecIDs",
                        )?;
                    }
                    if !Option::is_none(&self.host_config) {
                        _serde::ser::SerializeStruct::serialize_field(
                            &mut __serde_state,
                            "HostConfig",
                            &self.host_config,
                        )?;
                    } else {
                        _serde::ser::SerializeStruct::skip_field(
                            &mut __serde_state,
                            "HostConfig",
                        )?;
                    }
                    if !Option::is_none(&self.graph_driver) {
                        _serde::ser::SerializeStruct::serialize_field(
                            &mut __serde_state,
                            "GraphDriver",
                            &self.graph_driver,
                        )?;
                    } else {
                        _serde::ser::SerializeStruct::skip_field(
                            &mut __serde_state,
                            "GraphDriver",
                        )?;
                    }
                    if !Option::is_none(&self.size_rw) {
                        _serde::ser::SerializeStruct::serialize_field(
                            &mut __serde_state,
                            "SizeRw",
                            &self.size_rw,
                        )?;
                    } else {
                        _serde::ser::SerializeStruct::skip_field(
                            &mut __serde_state,
                            "SizeRw",
                        )?;
                    }
                    if !Option::is_none(&self.mounts) {
                        _serde::ser::SerializeStruct::serialize_field(
                            &mut __serde_state,
                            "Mounts",
                            &self.mounts,
                        )?;
                    } else {
                        _serde::ser::SerializeStruct::skip_field(
                            &mut __serde_state,
                            "Mounts",
                        )?;
                    }
                    if !Option::is_none(&self.config) {
                        _serde::ser::SerializeStruct::serialize_field(
                            &mut __serde_state,
                            "Config",
                            &self.config,
                        )?;
                    } else {
                        _serde::ser::SerializeStruct::skip_field(
                            &mut __serde_state,
                            "Config",
                        )?;
                    }
                    if !Option::is_none(&self.network_settings) {
                        _serde::ser::SerializeStruct::serialize_field(
                            &mut __serde_state,
                            "NetworkSettings",
                            &self.network_settings,
                        )?;
                    } else {
                        _serde::ser::SerializeStruct::skip_field(
                            &mut __serde_state,
                            "NetworkSettings",
                        )?;
                    }
                    _serde::ser::SerializeStruct::end(__serde_state)
                }
            }
        };
        #[doc(hidden)]
        #[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
        const _: () = {
            #[allow(unused_extern_crates, clippy::useless_attribute)]
            extern crate serde as _serde;
            #[automatically_derived]
            impl<'de> _serde::Deserialize<'de> for ContainerDetails {
                fn deserialize<__D>(
                    __deserializer: __D,
                ) -> _serde::__private::Result<Self, __D::Error>
                where
                    __D: _serde::Deserializer<'de>,
                {
                    #[allow(non_camel_case_types)]
                    #[doc(hidden)]
                    enum __Field {
                        __field0,
                        __field1,
                        __field2,
                        __field3,
                        __field4,
                        __field5,
                        __field6,
                        __field7,
                        __field8,
                        __field9,
                        __field10,
                        __field11,
                        __field12,
                        __field13,
                        __field14,
                        __field15,
                        __field16,
                        __field17,
                        __field18,
                        __field19,
                        __field20,
                        __field21,
                        __field22,
                        __field23,
                        __ignore,
                    }
                    #[doc(hidden)]
                    struct __FieldVisitor;
                    impl<'de> _serde::de::Visitor<'de> for __FieldVisitor {
                        type Value = __Field;
                        fn expecting(
                            &self,
                            __formatter: &mut _serde::__private::Formatter,
                        ) -> _serde::__private::fmt::Result {
                            _serde::__private::Formatter::write_str(
                                __formatter,
                                "field identifier",
                            )
                        }
                        fn visit_u64<__E>(
                            self,
                            __value: u64,
                        ) -> _serde::__private::Result<Self::Value, __E>
                        where
                            __E: _serde::de::Error,
                        {
                            match __value {
                                0u64 => _serde::__private::Ok(__Field::__field0),
                                1u64 => _serde::__private::Ok(__Field::__field1),
                                2u64 => _serde::__private::Ok(__Field::__field2),
                                3u64 => _serde::__private::Ok(__Field::__field3),
                                4u64 => _serde::__private::Ok(__Field::__field4),
                                5u64 => _serde::__private::Ok(__Field::__field5),
                                6u64 => _serde::__private::Ok(__Field::__field6),
                                7u64 => _serde::__private::Ok(__Field::__field7),
                                8u64 => _serde::__private::Ok(__Field::__field8),
                                9u64 => _serde::__private::Ok(__Field::__field9),
                                10u64 => _serde::__private::Ok(__Field::__field10),
                                11u64 => _serde::__private::Ok(__Field::__field11),
                                12u64 => _serde::__private::Ok(__Field::__field12),
                                13u64 => _serde::__private::Ok(__Field::__field13),
                                14u64 => _serde::__private::Ok(__Field::__field14),
                                15u64 => _serde::__private::Ok(__Field::__field15),
                                16u64 => _serde::__private::Ok(__Field::__field16),
                                17u64 => _serde::__private::Ok(__Field::__field17),
                                18u64 => _serde::__private::Ok(__Field::__field18),
                                19u64 => _serde::__private::Ok(__Field::__field19),
                                20u64 => _serde::__private::Ok(__Field::__field20),
                                21u64 => _serde::__private::Ok(__Field::__field21),
                                22u64 => _serde::__private::Ok(__Field::__field22),
                                23u64 => _serde::__private::Ok(__Field::__field23),
                                _ => _serde::__private::Ok(__Field::__ignore),
                            }
                        }
                        fn visit_str<__E>(
                            self,
                            __value: &str,
                        ) -> _serde::__private::Result<Self::Value, __E>
                        where
                            __E: _serde::de::Error,
                        {
                            match __value {
                                "Id" => _serde::__private::Ok(__Field::__field0),
                                "Created" => _serde::__private::Ok(__Field::__field1),
                                "Path" => _serde::__private::Ok(__Field::__field2),
                                "Args" => _serde::__private::Ok(__Field::__field3),
                                "State" => _serde::__private::Ok(__Field::__field4),
                                "Image" => _serde::__private::Ok(__Field::__field5),
                                "ResolvConfPath" => _serde::__private::Ok(__Field::__field6),
                                "HostnamePath" => _serde::__private::Ok(__Field::__field7),
                                "HostsPath" => _serde::__private::Ok(__Field::__field8),
                                "LogPath" => _serde::__private::Ok(__Field::__field9),
                                "Name" => _serde::__private::Ok(__Field::__field10),
                                "RestartCount" => _serde::__private::Ok(__Field::__field11),
                                "Driver" => _serde::__private::Ok(__Field::__field12),
                                "Platform" => _serde::__private::Ok(__Field::__field13),
                                "MountLabel" => _serde::__private::Ok(__Field::__field14),
                                "ProcessLabel" => _serde::__private::Ok(__Field::__field15),
                                "AppArmorProfile" => {
                                    _serde::__private::Ok(__Field::__field16)
                                }
                                "ExecIDs" => _serde::__private::Ok(__Field::__field17),
                                "HostConfig" => _serde::__private::Ok(__Field::__field18),
                                "GraphDriver" => _serde::__private::Ok(__Field::__field19),
                                "SizeRw" => _serde::__private::Ok(__Field::__field20),
                                "Mounts" => _serde::__private::Ok(__Field::__field21),
                                "Config" => _serde::__private::Ok(__Field::__field22),
                                "NetworkSettings" => {
                                    _serde::__private::Ok(__Field::__field23)
                                }
                                _ => _serde::__private::Ok(__Field::__ignore),
                            }
                        }
                        fn visit_bytes<__E>(
                            self,
                            __value: &[u8],
                        ) -> _serde::__private::Result<Self::Value, __E>
                        where
                            __E: _serde::de::Error,
                        {
                            match __value {
                                b"Id" => _serde::__private::Ok(__Field::__field0),
                                b"Created" => _serde::__private::Ok(__Field::__field1),
                                b"Path" => _serde::__private::Ok(__Field::__field2),
                                b"Args" => _serde::__private::Ok(__Field::__field3),
                                b"State" => _serde::__private::Ok(__Field::__field4),
                                b"Image" => _serde::__private::Ok(__Field::__field5),
                                b"ResolvConfPath" => {
                                    _serde::__private::Ok(__Field::__field6)
                                }
                                b"HostnamePath" => _serde::__private::Ok(__Field::__field7),
                                b"HostsPath" => _serde::__private::Ok(__Field::__field8),
                                b"LogPath" => _serde::__private::Ok(__Field::__field9),
                                b"Name" => _serde::__private::Ok(__Field::__field10),
                                b"RestartCount" => _serde::__private::Ok(__Field::__field11),
                                b"Driver" => _serde::__private::Ok(__Field::__field12),
                                b"Platform" => _serde::__private::Ok(__Field::__field13),
                                b"MountLabel" => _serde::__private::Ok(__Field::__field14),
                                b"ProcessLabel" => _serde::__private::Ok(__Field::__field15),
                                b"AppArmorProfile" => {
                                    _serde::__private::Ok(__Field::__field16)
                                }
                                b"ExecIDs" => _serde::__private::Ok(__Field::__field17),
                                b"HostConfig" => _serde::__private::Ok(__Field::__field18),
                                b"GraphDriver" => _serde::__private::Ok(__Field::__field19),
                                b"SizeRw" => _serde::__private::Ok(__Field::__field20),
                                b"Mounts" => _serde::__private::Ok(__Field::__field21),
                                b"Config" => _serde::__private::Ok(__Field::__field22),
                                b"NetworkSettings" => {
                                    _serde::__private::Ok(__Field::__field23)
                                }
                                _ => _serde::__private::Ok(__Field::__ignore),
                            }
                        }
                    }
                    impl<'de> _serde::Deserialize<'de> for __Field {
                        #[inline]
                        fn deserialize<__D>(
                            __deserializer: __D,
                        ) -> _serde::__private::Result<Self, __D::Error>
                        where
                            __D: _serde::Deserializer<'de>,
                        {
                            _serde::Deserializer::deserialize_identifier(
                                __deserializer,
                                __FieldVisitor,
                            )
                        }
                    }
                    #[doc(hidden)]
                    struct __Visitor<'de> {
                        marker: _serde::__private::PhantomData<ContainerDetails>,
                        lifetime: _serde::__private::PhantomData<&'de ()>,
                    }
                    impl<'de> _serde::de::Visitor<'de> for __Visitor<'de> {
                        type Value = ContainerDetails;
                        fn expecting(
                            &self,
                            __formatter: &mut _serde::__private::Formatter,
                        ) -> _serde::__private::fmt::Result {
                            _serde::__private::Formatter::write_str(
                                __formatter,
                                "struct ContainerDetails",
                            )
                        }
                        #[inline]
                        fn visit_seq<__A>(
                            self,
                            mut __seq: __A,
                        ) -> _serde::__private::Result<Self::Value, __A::Error>
                        where
                            __A: _serde::de::SeqAccess<'de>,
                        {
                            let __field0 = match _serde::de::SeqAccess::next_element::<
                                Option<String>,
                            >(&mut __seq)? {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            0usize,
                                            &"struct ContainerDetails with 24 elements",
                                        ),
                                    );
                                }
                            };
                            let __field1 = match _serde::de::SeqAccess::next_element::<
                                Option<DateTime<Utc>>,
                            >(&mut __seq)? {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            1usize,
                                            &"struct ContainerDetails with 24 elements",
                                        ),
                                    );
                                }
                            };
                            let __field2 = match _serde::de::SeqAccess::next_element::<
                                Option<String>,
                            >(&mut __seq)? {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            2usize,
                                            &"struct ContainerDetails with 24 elements",
                                        ),
                                    );
                                }
                            };
                            let __field3 = match _serde::de::SeqAccess::next_element::<
                                Option<Vec<String>>,
                            >(&mut __seq)? {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            3usize,
                                            &"struct ContainerDetails with 24 elements",
                                        ),
                                    );
                                }
                            };
                            let __field4 = match _serde::de::SeqAccess::next_element::<
                                Option<State>,
                            >(&mut __seq)? {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            4usize,
                                            &"struct ContainerDetails with 24 elements",
                                        ),
                                    );
                                }
                            };
                            let __field5 = match _serde::de::SeqAccess::next_element::<
                                Option<String>,
                            >(&mut __seq)? {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            5usize,
                                            &"struct ContainerDetails with 24 elements",
                                        ),
                                    );
                                }
                            };
                            let __field6 = match _serde::de::SeqAccess::next_element::<
                                Option<String>,
                            >(&mut __seq)? {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            6usize,
                                            &"struct ContainerDetails with 24 elements",
                                        ),
                                    );
                                }
                            };
                            let __field7 = match _serde::de::SeqAccess::next_element::<
                                Option<String>,
                            >(&mut __seq)? {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            7usize,
                                            &"struct ContainerDetails with 24 elements",
                                        ),
                                    );
                                }
                            };
                            let __field8 = match _serde::de::SeqAccess::next_element::<
                                Option<String>,
                            >(&mut __seq)? {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            8usize,
                                            &"struct ContainerDetails with 24 elements",
                                        ),
                                    );
                                }
                            };
                            let __field9 = match _serde::de::SeqAccess::next_element::<
                                Option<String>,
                            >(&mut __seq)? {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            9usize,
                                            &"struct ContainerDetails with 24 elements",
                                        ),
                                    );
                                }
                            };
                            let __field10 = match _serde::de::SeqAccess::next_element::<
                                Option<String>,
                            >(&mut __seq)? {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            10usize,
                                            &"struct ContainerDetails with 24 elements",
                                        ),
                                    );
                                }
                            };
                            let __field11 = match _serde::de::SeqAccess::next_element::<
                                Option<i64>,
                            >(&mut __seq)? {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            11usize,
                                            &"struct ContainerDetails with 24 elements",
                                        ),
                                    );
                                }
                            };
                            let __field12 = match _serde::de::SeqAccess::next_element::<
                                Option<String>,
                            >(&mut __seq)? {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            12usize,
                                            &"struct ContainerDetails with 24 elements",
                                        ),
                                    );
                                }
                            };
                            let __field13 = match _serde::de::SeqAccess::next_element::<
                                Option<String>,
                            >(&mut __seq)? {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            13usize,
                                            &"struct ContainerDetails with 24 elements",
                                        ),
                                    );
                                }
                            };
                            let __field14 = match _serde::de::SeqAccess::next_element::<
                                Option<String>,
                            >(&mut __seq)? {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            14usize,
                                            &"struct ContainerDetails with 24 elements",
                                        ),
                                    );
                                }
                            };
                            let __field15 = match _serde::de::SeqAccess::next_element::<
                                Option<String>,
                            >(&mut __seq)? {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            15usize,
                                            &"struct ContainerDetails with 24 elements",
                                        ),
                                    );
                                }
                            };
                            let __field16 = match _serde::de::SeqAccess::next_element::<
                                Option<String>,
                            >(&mut __seq)? {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            16usize,
                                            &"struct ContainerDetails with 24 elements",
                                        ),
                                    );
                                }
                            };
                            let __field17 = match _serde::de::SeqAccess::next_element::<
                                Option<Option<Vec<String>>>,
                            >(&mut __seq)? {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            17usize,
                                            &"struct ContainerDetails with 24 elements",
                                        ),
                                    );
                                }
                            };
                            let __field18 = match _serde::de::SeqAccess::next_element::<
                                Option<HostConfig>,
                            >(&mut __seq)? {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            18usize,
                                            &"struct ContainerDetails with 24 elements",
                                        ),
                                    );
                                }
                            };
                            let __field19 = match _serde::de::SeqAccess::next_element::<
                                Option<GraphDriverData>,
                            >(&mut __seq)? {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            19usize,
                                            &"struct ContainerDetails with 24 elements",
                                        ),
                                    );
                                }
                            };
                            let __field20 = match _serde::de::SeqAccess::next_element::<
                                Option<i64>,
                            >(&mut __seq)? {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            20usize,
                                            &"struct ContainerDetails with 24 elements",
                                        ),
                                    );
                                }
                            };
                            let __field21 = match _serde::de::SeqAccess::next_element::<
                                Option<Vec<MountPoint>>,
                            >(&mut __seq)? {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            21usize,
                                            &"struct ContainerDetails with 24 elements",
                                        ),
                                    );
                                }
                            };
                            let __field22 = match _serde::de::SeqAccess::next_element::<
                                Option<ContainerConfig>,
                            >(&mut __seq)? {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            22usize,
                                            &"struct ContainerDetails with 24 elements",
                                        ),
                                    );
                                }
                            };
                            let __field23 = match _serde::de::SeqAccess::next_element::<
                                Option<NetworkSettings>,
                            >(&mut __seq)? {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            23usize,
                                            &"struct ContainerDetails with 24 elements",
                                        ),
                                    );
                                }
                            };
                            _serde::__private::Ok(ContainerDetails {
                                id: __field0,
                                created: __field1,
                                path: __field2,
                                args: __field3,
                                state: __field4,
                                image: __field5,
                                resolv_conf_path: __field6,
                                hostname_path: __field7,
                                hosts_path: __field8,
                                log_path: __field9,
                                name: __field10,
                                restart_count: __field11,
                                driver: __field12,
                                platform: __field13,
                                mount_label: __field14,
                                process_label: __field15,
                                app_armor_profile: __field16,
                                exec_ids: __field17,
                                host_config: __field18,
                                graph_driver: __field19,
                                size_rw: __field20,
                                mounts: __field21,
                                config: __field22,
                                network_settings: __field23,
                            })
                        }
                        #[inline]
                        fn visit_map<__A>(
                            self,
                            mut __map: __A,
                        ) -> _serde::__private::Result<Self::Value, __A::Error>
                        where
                            __A: _serde::de::MapAccess<'de>,
                        {
                            let mut __field0: _serde::__private::Option<
                                Option<String>,
                            > = _serde::__private::None;
                            let mut __field1: _serde::__private::Option<
                                Option<DateTime<Utc>>,
                            > = _serde::__private::None;
                            let mut __field2: _serde::__private::Option<
                                Option<String>,
                            > = _serde::__private::None;
                            let mut __field3: _serde::__private::Option<
                                Option<Vec<String>>,
                            > = _serde::__private::None;
                            let mut __field4: _serde::__private::Option<Option<State>> = _serde::__private::None;
                            let mut __field5: _serde::__private::Option<
                                Option<String>,
                            > = _serde::__private::None;
                            let mut __field6: _serde::__private::Option<
                                Option<String>,
                            > = _serde::__private::None;
                            let mut __field7: _serde::__private::Option<
                                Option<String>,
                            > = _serde::__private::None;
                            let mut __field8: _serde::__private::Option<
                                Option<String>,
                            > = _serde::__private::None;
                            let mut __field9: _serde::__private::Option<
                                Option<String>,
                            > = _serde::__private::None;
                            let mut __field10: _serde::__private::Option<
                                Option<String>,
                            > = _serde::__private::None;
                            let mut __field11: _serde::__private::Option<Option<i64>> = _serde::__private::None;
                            let mut __field12: _serde::__private::Option<
                                Option<String>,
                            > = _serde::__private::None;
                            let mut __field13: _serde::__private::Option<
                                Option<String>,
                            > = _serde::__private::None;
                            let mut __field14: _serde::__private::Option<
                                Option<String>,
                            > = _serde::__private::None;
                            let mut __field15: _serde::__private::Option<
                                Option<String>,
                            > = _serde::__private::None;
                            let mut __field16: _serde::__private::Option<
                                Option<String>,
                            > = _serde::__private::None;
                            let mut __field17: _serde::__private::Option<
                                Option<Option<Vec<String>>>,
                            > = _serde::__private::None;
                            let mut __field18: _serde::__private::Option<
                                Option<HostConfig>,
                            > = _serde::__private::None;
                            let mut __field19: _serde::__private::Option<
                                Option<GraphDriverData>,
                            > = _serde::__private::None;
                            let mut __field20: _serde::__private::Option<Option<i64>> = _serde::__private::None;
                            let mut __field21: _serde::__private::Option<
                                Option<Vec<MountPoint>>,
                            > = _serde::__private::None;
                            let mut __field22: _serde::__private::Option<
                                Option<ContainerConfig>,
                            > = _serde::__private::None;
                            let mut __field23: _serde::__private::Option<
                                Option<NetworkSettings>,
                            > = _serde::__private::None;
                            while let _serde::__private::Some(__key) = _serde::de::MapAccess::next_key::<
                                __Field,
                            >(&mut __map)? {
                                match __key {
                                    __Field::__field0 => {
                                        if _serde::__private::Option::is_some(&__field0) {
                                            return _serde::__private::Err(
                                                <__A::Error as _serde::de::Error>::duplicate_field("Id"),
                                            );
                                        }
                                        __field0 = _serde::__private::Some(
                                            _serde::de::MapAccess::next_value::<
                                                Option<String>,
                                            >(&mut __map)?,
                                        );
                                    }
                                    __Field::__field1 => {
                                        if _serde::__private::Option::is_some(&__field1) {
                                            return _serde::__private::Err(
                                                <__A::Error as _serde::de::Error>::duplicate_field(
                                                    "Created",
                                                ),
                                            );
                                        }
                                        __field1 = _serde::__private::Some(
                                            _serde::de::MapAccess::next_value::<
                                                Option<DateTime<Utc>>,
                                            >(&mut __map)?,
                                        );
                                    }
                                    __Field::__field2 => {
                                        if _serde::__private::Option::is_some(&__field2) {
                                            return _serde::__private::Err(
                                                <__A::Error as _serde::de::Error>::duplicate_field("Path"),
                                            );
                                        }
                                        __field2 = _serde::__private::Some(
                                            _serde::de::MapAccess::next_value::<
                                                Option<String>,
                                            >(&mut __map)?,
                                        );
                                    }
                                    __Field::__field3 => {
                                        if _serde::__private::Option::is_some(&__field3) {
                                            return _serde::__private::Err(
                                                <__A::Error as _serde::de::Error>::duplicate_field("Args"),
                                            );
                                        }
                                        __field3 = _serde::__private::Some(
                                            _serde::de::MapAccess::next_value::<
                                                Option<Vec<String>>,
                                            >(&mut __map)?,
                                        );
                                    }
                                    __Field::__field4 => {
                                        if _serde::__private::Option::is_some(&__field4) {
                                            return _serde::__private::Err(
                                                <__A::Error as _serde::de::Error>::duplicate_field("State"),
                                            );
                                        }
                                        __field4 = _serde::__private::Some(
                                            _serde::de::MapAccess::next_value::<
                                                Option<State>,
                                            >(&mut __map)?,
                                        );
                                    }
                                    __Field::__field5 => {
                                        if _serde::__private::Option::is_some(&__field5) {
                                            return _serde::__private::Err(
                                                <__A::Error as _serde::de::Error>::duplicate_field("Image"),
                                            );
                                        }
                                        __field5 = _serde::__private::Some(
                                            _serde::de::MapAccess::next_value::<
                                                Option<String>,
                                            >(&mut __map)?,
                                        );
                                    }
                                    __Field::__field6 => {
                                        if _serde::__private::Option::is_some(&__field6) {
                                            return _serde::__private::Err(
                                                <__A::Error as _serde::de::Error>::duplicate_field(
                                                    "ResolvConfPath",
                                                ),
                                            );
                                        }
                                        __field6 = _serde::__private::Some(
                                            _serde::de::MapAccess::next_value::<
                                                Option<String>,
                                            >(&mut __map)?,
                                        );
                                    }
                                    __Field::__field7 => {
                                        if _serde::__private::Option::is_some(&__field7) {
                                            return _serde::__private::Err(
                                                <__A::Error as _serde::de::Error>::duplicate_field(
                                                    "HostnamePath",
                                                ),
                                            );
                                        }
                                        __field7 = _serde::__private::Some(
                                            _serde::de::MapAccess::next_value::<
                                                Option<String>,
                                            >(&mut __map)?,
                                        );
                                    }
                                    __Field::__field8 => {
                                        if _serde::__private::Option::is_some(&__field8) {
                                            return _serde::__private::Err(
                                                <__A::Error as _serde::de::Error>::duplicate_field(
                                                    "HostsPath",
                                                ),
                                            );
                                        }
                                        __field8 = _serde::__private::Some(
                                            _serde::de::MapAccess::next_value::<
                                                Option<String>,
                                            >(&mut __map)?,
                                        );
                                    }
                                    __Field::__field9 => {
                                        if _serde::__private::Option::is_some(&__field9) {
                                            return _serde::__private::Err(
                                                <__A::Error as _serde::de::Error>::duplicate_field(
                                                    "LogPath",
                                                ),
                                            );
                                        }
                                        __field9 = _serde::__private::Some(
                                            _serde::de::MapAccess::next_value::<
                                                Option<String>,
                                            >(&mut __map)?,
                                        );
                                    }
                                    __Field::__field10 => {
                                        if _serde::__private::Option::is_some(&__field10) {
                                            return _serde::__private::Err(
                                                <__A::Error as _serde::de::Error>::duplicate_field("Name"),
                                            );
                                        }
                                        __field10 = _serde::__private::Some(
                                            _serde::de::MapAccess::next_value::<
                                                Option<String>,
                                            >(&mut __map)?,
                                        );
                                    }
                                    __Field::__field11 => {
                                        if _serde::__private::Option::is_some(&__field11) {
                                            return _serde::__private::Err(
                                                <__A::Error as _serde::de::Error>::duplicate_field(
                                                    "RestartCount",
                                                ),
                                            );
                                        }
                                        __field11 = _serde::__private::Some(
                                            _serde::de::MapAccess::next_value::<
                                                Option<i64>,
                                            >(&mut __map)?,
                                        );
                                    }
                                    __Field::__field12 => {
                                        if _serde::__private::Option::is_some(&__field12) {
                                            return _serde::__private::Err(
                                                <__A::Error as _serde::de::Error>::duplicate_field("Driver"),
                                            );
                                        }
                                        __field12 = _serde::__private::Some(
                                            _serde::de::MapAccess::next_value::<
                                                Option<String>,
                                            >(&mut __map)?,
                                        );
                                    }
                                    __Field::__field13 => {
                                        if _serde::__private::Option::is_some(&__field13) {
                                            return _serde::__private::Err(
                                                <__A::Error as _serde::de::Error>::duplicate_field(
                                                    "Platform",
                                                ),
                                            );
                                        }
                                        __field13 = _serde::__private::Some(
                                            _serde::de::MapAccess::next_value::<
                                                Option<String>,
                                            >(&mut __map)?,
                                        );
                                    }
                                    __Field::__field14 => {
                                        if _serde::__private::Option::is_some(&__field14) {
                                            return _serde::__private::Err(
                                                <__A::Error as _serde::de::Error>::duplicate_field(
                                                    "MountLabel",
                                                ),
                                            );
                                        }
                                        __field14 = _serde::__private::Some(
                                            _serde::de::MapAccess::next_value::<
                                                Option<String>,
                                            >(&mut __map)?,
                                        );
                                    }
                                    __Field::__field15 => {
                                        if _serde::__private::Option::is_some(&__field15) {
                                            return _serde::__private::Err(
                                                <__A::Error as _serde::de::Error>::duplicate_field(
                                                    "ProcessLabel",
                                                ),
                                            );
                                        }
                                        __field15 = _serde::__private::Some(
                                            _serde::de::MapAccess::next_value::<
                                                Option<String>,
                                            >(&mut __map)?,
                                        );
                                    }
                                    __Field::__field16 => {
                                        if _serde::__private::Option::is_some(&__field16) {
                                            return _serde::__private::Err(
                                                <__A::Error as _serde::de::Error>::duplicate_field(
                                                    "AppArmorProfile",
                                                ),
                                            );
                                        }
                                        __field16 = _serde::__private::Some(
                                            _serde::de::MapAccess::next_value::<
                                                Option<String>,
                                            >(&mut __map)?,
                                        );
                                    }
                                    __Field::__field17 => {
                                        if _serde::__private::Option::is_some(&__field17) {
                                            return _serde::__private::Err(
                                                <__A::Error as _serde::de::Error>::duplicate_field(
                                                    "ExecIDs",
                                                ),
                                            );
                                        }
                                        __field17 = _serde::__private::Some(
                                            _serde::de::MapAccess::next_value::<
                                                Option<Option<Vec<String>>>,
                                            >(&mut __map)?,
                                        );
                                    }
                                    __Field::__field18 => {
                                        if _serde::__private::Option::is_some(&__field18) {
                                            return _serde::__private::Err(
                                                <__A::Error as _serde::de::Error>::duplicate_field(
                                                    "HostConfig",
                                                ),
                                            );
                                        }
                                        __field18 = _serde::__private::Some(
                                            _serde::de::MapAccess::next_value::<
                                                Option<HostConfig>,
                                            >(&mut __map)?,
                                        );
                                    }
                                    __Field::__field19 => {
                                        if _serde::__private::Option::is_some(&__field19) {
                                            return _serde::__private::Err(
                                                <__A::Error as _serde::de::Error>::duplicate_field(
                                                    "GraphDriver",
                                                ),
                                            );
                                        }
                                        __field19 = _serde::__private::Some(
                                            _serde::de::MapAccess::next_value::<
                                                Option<GraphDriverData>,
                                            >(&mut __map)?,
                                        );
                                    }
                                    __Field::__field20 => {
                                        if _serde::__private::Option::is_some(&__field20) {
                                            return _serde::__private::Err(
                                                <__A::Error as _serde::de::Error>::duplicate_field("SizeRw"),
                                            );
                                        }
                                        __field20 = _serde::__private::Some(
                                            _serde::de::MapAccess::next_value::<
                                                Option<i64>,
                                            >(&mut __map)?,
                                        );
                                    }
                                    __Field::__field21 => {
                                        if _serde::__private::Option::is_some(&__field21) {
                                            return _serde::__private::Err(
                                                <__A::Error as _serde::de::Error>::duplicate_field("Mounts"),
                                            );
                                        }
                                        __field21 = _serde::__private::Some(
                                            _serde::de::MapAccess::next_value::<
                                                Option<Vec<MountPoint>>,
                                            >(&mut __map)?,
                                        );
                                    }
                                    __Field::__field22 => {
                                        if _serde::__private::Option::is_some(&__field22) {
                                            return _serde::__private::Err(
                                                <__A::Error as _serde::de::Error>::duplicate_field("Config"),
                                            );
                                        }
                                        __field22 = _serde::__private::Some(
                                            _serde::de::MapAccess::next_value::<
                                                Option<ContainerConfig>,
                                            >(&mut __map)?,
                                        );
                                    }
                                    __Field::__field23 => {
                                        if _serde::__private::Option::is_some(&__field23) {
                                            return _serde::__private::Err(
                                                <__A::Error as _serde::de::Error>::duplicate_field(
                                                    "NetworkSettings",
                                                ),
                                            );
                                        }
                                        __field23 = _serde::__private::Some(
                                            _serde::de::MapAccess::next_value::<
                                                Option<NetworkSettings>,
                                            >(&mut __map)?,
                                        );
                                    }
                                    _ => {
                                        let _ = _serde::de::MapAccess::next_value::<
                                            _serde::de::IgnoredAny,
                                        >(&mut __map)?;
                                    }
                                }
                            }
                            let __field0 = match __field0 {
                                _serde::__private::Some(__field0) => __field0,
                                _serde::__private::None => {
                                    _serde::__private::de::missing_field("Id")?
                                }
                            };
                            let __field1 = match __field1 {
                                _serde::__private::Some(__field1) => __field1,
                                _serde::__private::None => {
                                    _serde::__private::de::missing_field("Created")?
                                }
                            };
                            let __field2 = match __field2 {
                                _serde::__private::Some(__field2) => __field2,
                                _serde::__private::None => {
                                    _serde::__private::de::missing_field("Path")?
                                }
                            };
                            let __field3 = match __field3 {
                                _serde::__private::Some(__field3) => __field3,
                                _serde::__private::None => {
                                    _serde::__private::de::missing_field("Args")?
                                }
                            };
                            let __field4 = match __field4 {
                                _serde::__private::Some(__field4) => __field4,
                                _serde::__private::None => {
                                    _serde::__private::de::missing_field("State")?
                                }
                            };
                            let __field5 = match __field5 {
                                _serde::__private::Some(__field5) => __field5,
                                _serde::__private::None => {
                                    _serde::__private::de::missing_field("Image")?
                                }
                            };
                            let __field6 = match __field6 {
                                _serde::__private::Some(__field6) => __field6,
                                _serde::__private::None => {
                                    _serde::__private::de::missing_field("ResolvConfPath")?
                                }
                            };
                            let __field7 = match __field7 {
                                _serde::__private::Some(__field7) => __field7,
                                _serde::__private::None => {
                                    _serde::__private::de::missing_field("HostnamePath")?
                                }
                            };
                            let __field8 = match __field8 {
                                _serde::__private::Some(__field8) => __field8,
                                _serde::__private::None => {
                                    _serde::__private::de::missing_field("HostsPath")?
                                }
                            };
                            let __field9 = match __field9 {
                                _serde::__private::Some(__field9) => __field9,
                                _serde::__private::None => {
                                    _serde::__private::de::missing_field("LogPath")?
                                }
                            };
                            let __field10 = match __field10 {
                                _serde::__private::Some(__field10) => __field10,
                                _serde::__private::None => {
                                    _serde::__private::de::missing_field("Name")?
                                }
                            };
                            let __field11 = match __field11 {
                                _serde::__private::Some(__field11) => __field11,
                                _serde::__private::None => {
                                    _serde::__private::de::missing_field("RestartCount")?
                                }
                            };
                            let __field12 = match __field12 {
                                _serde::__private::Some(__field12) => __field12,
                                _serde::__private::None => {
                                    _serde::__private::de::missing_field("Driver")?
                                }
                            };
                            let __field13 = match __field13 {
                                _serde::__private::Some(__field13) => __field13,
                                _serde::__private::None => {
                                    _serde::__private::de::missing_field("Platform")?
                                }
                            };
                            let __field14 = match __field14 {
                                _serde::__private::Some(__field14) => __field14,
                                _serde::__private::None => {
                                    _serde::__private::de::missing_field("MountLabel")?
                                }
                            };
                            let __field15 = match __field15 {
                                _serde::__private::Some(__field15) => __field15,
                                _serde::__private::None => {
                                    _serde::__private::de::missing_field("ProcessLabel")?
                                }
                            };
                            let __field16 = match __field16 {
                                _serde::__private::Some(__field16) => __field16,
                                _serde::__private::None => {
                                    _serde::__private::de::missing_field("AppArmorProfile")?
                                }
                            };
                            let __field17 = match __field17 {
                                _serde::__private::Some(__field17) => __field17,
                                _serde::__private::None => {
                                    _serde::__private::de::missing_field("ExecIDs")?
                                }
                            };
                            let __field18 = match __field18 {
                                _serde::__private::Some(__field18) => __field18,
                                _serde::__private::None => {
                                    _serde::__private::de::missing_field("HostConfig")?
                                }
                            };
                            let __field19 = match __field19 {
                                _serde::__private::Some(__field19) => __field19,
                                _serde::__private::None => {
                                    _serde::__private::de::missing_field("GraphDriver")?
                                }
                            };
                            let __field20 = match __field20 {
                                _serde::__private::Some(__field20) => __field20,
                                _serde::__private::None => {
                                    _serde::__private::de::missing_field("SizeRw")?
                                }
                            };
                            let __field21 = match __field21 {
                                _serde::__private::Some(__field21) => __field21,
                                _serde::__private::None => {
                                    _serde::__private::de::missing_field("Mounts")?
                                }
                            };
                            let __field22 = match __field22 {
                                _serde::__private::Some(__field22) => __field22,
                                _serde::__private::None => {
                                    _serde::__private::de::missing_field("Config")?
                                }
                            };
                            let __field23 = match __field23 {
                                _serde::__private::Some(__field23) => __field23,
                                _serde::__private::None => {
                                    _serde::__private::de::missing_field("NetworkSettings")?
                                }
                            };
                            _serde::__private::Ok(ContainerDetails {
                                id: __field0,
                                created: __field1,
                                path: __field2,
                                args: __field3,
                                state: __field4,
                                image: __field5,
                                resolv_conf_path: __field6,
                                hostname_path: __field7,
                                hosts_path: __field8,
                                log_path: __field9,
                                name: __field10,
                                restart_count: __field11,
                                driver: __field12,
                                platform: __field13,
                                mount_label: __field14,
                                process_label: __field15,
                                app_armor_profile: __field16,
                                exec_ids: __field17,
                                host_config: __field18,
                                graph_driver: __field19,
                                size_rw: __field20,
                                mounts: __field21,
                                config: __field22,
                                network_settings: __field23,
                            })
                        }
                    }
                    #[doc(hidden)]
                    const FIELDS: &'static [&'static str] = &[
                        "Id",
                        "Created",
                        "Path",
                        "Args",
                        "State",
                        "Image",
                        "ResolvConfPath",
                        "HostnamePath",
                        "HostsPath",
                        "LogPath",
                        "Name",
                        "RestartCount",
                        "Driver",
                        "Platform",
                        "MountLabel",
                        "ProcessLabel",
                        "AppArmorProfile",
                        "ExecIDs",
                        "HostConfig",
                        "GraphDriver",
                        "SizeRw",
                        "Mounts",
                        "Config",
                        "NetworkSettings",
                    ];
                    _serde::Deserializer::deserialize_struct(
                        __deserializer,
                        "ContainerDetails",
                        FIELDS,
                        __Visitor {
                            marker: _serde::__private::PhantomData::<ContainerDetails>,
                            lifetime: _serde::__private::PhantomData,
                        },
                    )
                }
            }
        };
        #[serde(rename_all = "PascalCase")]
        pub struct GraphDriverData {
            #[serde(skip_serializing_if = "Option::is_none")]
            pub name: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none")]
            pub data: Option<HashMap<String, String>>,
        }
        #[automatically_derived]
        impl ::core::clone::Clone for GraphDriverData {
            #[inline]
            fn clone(&self) -> GraphDriverData {
                GraphDriverData {
                    name: ::core::clone::Clone::clone(&self.name),
                    data: ::core::clone::Clone::clone(&self.data),
                }
            }
        }
        #[automatically_derived]
        impl ::core::fmt::Debug for GraphDriverData {
            #[inline]
            fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                ::core::fmt::Formatter::debug_struct_field2_finish(
                    f,
                    "GraphDriverData",
                    "name",
                    &self.name,
                    "data",
                    &&self.data,
                )
            }
        }
        #[doc(hidden)]
        #[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
        const _: () = {
            #[allow(unused_extern_crates, clippy::useless_attribute)]
            extern crate serde as _serde;
            #[automatically_derived]
            impl _serde::Serialize for GraphDriverData {
                fn serialize<__S>(
                    &self,
                    __serializer: __S,
                ) -> _serde::__private::Result<__S::Ok, __S::Error>
                where
                    __S: _serde::Serializer,
                {
                    let mut __serde_state = _serde::Serializer::serialize_struct(
                        __serializer,
                        "GraphDriverData",
                        false as usize + if Option::is_none(&self.name) { 0 } else { 1 }
                            + if Option::is_none(&self.data) { 0 } else { 1 },
                    )?;
                    if !Option::is_none(&self.name) {
                        _serde::ser::SerializeStruct::serialize_field(
                            &mut __serde_state,
                            "Name",
                            &self.name,
                        )?;
                    } else {
                        _serde::ser::SerializeStruct::skip_field(
                            &mut __serde_state,
                            "Name",
                        )?;
                    }
                    if !Option::is_none(&self.data) {
                        _serde::ser::SerializeStruct::serialize_field(
                            &mut __serde_state,
                            "Data",
                            &self.data,
                        )?;
                    } else {
                        _serde::ser::SerializeStruct::skip_field(
                            &mut __serde_state,
                            "Data",
                        )?;
                    }
                    _serde::ser::SerializeStruct::end(__serde_state)
                }
            }
        };
        #[doc(hidden)]
        #[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
        const _: () = {
            #[allow(unused_extern_crates, clippy::useless_attribute)]
            extern crate serde as _serde;
            #[automatically_derived]
            impl<'de> _serde::Deserialize<'de> for GraphDriverData {
                fn deserialize<__D>(
                    __deserializer: __D,
                ) -> _serde::__private::Result<Self, __D::Error>
                where
                    __D: _serde::Deserializer<'de>,
                {
                    #[allow(non_camel_case_types)]
                    #[doc(hidden)]
                    enum __Field {
                        __field0,
                        __field1,
                        __ignore,
                    }
                    #[doc(hidden)]
                    struct __FieldVisitor;
                    impl<'de> _serde::de::Visitor<'de> for __FieldVisitor {
                        type Value = __Field;
                        fn expecting(
                            &self,
                            __formatter: &mut _serde::__private::Formatter,
                        ) -> _serde::__private::fmt::Result {
                            _serde::__private::Formatter::write_str(
                                __formatter,
                                "field identifier",
                            )
                        }
                        fn visit_u64<__E>(
                            self,
                            __value: u64,
                        ) -> _serde::__private::Result<Self::Value, __E>
                        where
                            __E: _serde::de::Error,
                        {
                            match __value {
                                0u64 => _serde::__private::Ok(__Field::__field0),
                                1u64 => _serde::__private::Ok(__Field::__field1),
                                _ => _serde::__private::Ok(__Field::__ignore),
                            }
                        }
                        fn visit_str<__E>(
                            self,
                            __value: &str,
                        ) -> _serde::__private::Result<Self::Value, __E>
                        where
                            __E: _serde::de::Error,
                        {
                            match __value {
                                "Name" => _serde::__private::Ok(__Field::__field0),
                                "Data" => _serde::__private::Ok(__Field::__field1),
                                _ => _serde::__private::Ok(__Field::__ignore),
                            }
                        }
                        fn visit_bytes<__E>(
                            self,
                            __value: &[u8],
                        ) -> _serde::__private::Result<Self::Value, __E>
                        where
                            __E: _serde::de::Error,
                        {
                            match __value {
                                b"Name" => _serde::__private::Ok(__Field::__field0),
                                b"Data" => _serde::__private::Ok(__Field::__field1),
                                _ => _serde::__private::Ok(__Field::__ignore),
                            }
                        }
                    }
                    impl<'de> _serde::Deserialize<'de> for __Field {
                        #[inline]
                        fn deserialize<__D>(
                            __deserializer: __D,
                        ) -> _serde::__private::Result<Self, __D::Error>
                        where
                            __D: _serde::Deserializer<'de>,
                        {
                            _serde::Deserializer::deserialize_identifier(
                                __deserializer,
                                __FieldVisitor,
                            )
                        }
                    }
                    #[doc(hidden)]
                    struct __Visitor<'de> {
                        marker: _serde::__private::PhantomData<GraphDriverData>,
                        lifetime: _serde::__private::PhantomData<&'de ()>,
                    }
                    impl<'de> _serde::de::Visitor<'de> for __Visitor<'de> {
                        type Value = GraphDriverData;
                        fn expecting(
                            &self,
                            __formatter: &mut _serde::__private::Formatter,
                        ) -> _serde::__private::fmt::Result {
                            _serde::__private::Formatter::write_str(
                                __formatter,
                                "struct GraphDriverData",
                            )
                        }
                        #[inline]
                        fn visit_seq<__A>(
                            self,
                            mut __seq: __A,
                        ) -> _serde::__private::Result<Self::Value, __A::Error>
                        where
                            __A: _serde::de::SeqAccess<'de>,
                        {
                            let __field0 = match _serde::de::SeqAccess::next_element::<
                                Option<String>,
                            >(&mut __seq)? {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            0usize,
                                            &"struct GraphDriverData with 2 elements",
                                        ),
                                    );
                                }
                            };
                            let __field1 = match _serde::de::SeqAccess::next_element::<
                                Option<HashMap<String, String>>,
                            >(&mut __seq)? {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            1usize,
                                            &"struct GraphDriverData with 2 elements",
                                        ),
                                    );
                                }
                            };
                            _serde::__private::Ok(GraphDriverData {
                                name: __field0,
                                data: __field1,
                            })
                        }
                        #[inline]
                        fn visit_map<__A>(
                            self,
                            mut __map: __A,
                        ) -> _serde::__private::Result<Self::Value, __A::Error>
                        where
                            __A: _serde::de::MapAccess<'de>,
                        {
                            let mut __field0: _serde::__private::Option<
                                Option<String>,
                            > = _serde::__private::None;
                            let mut __field1: _serde::__private::Option<
                                Option<HashMap<String, String>>,
                            > = _serde::__private::None;
                            while let _serde::__private::Some(__key) = _serde::de::MapAccess::next_key::<
                                __Field,
                            >(&mut __map)? {
                                match __key {
                                    __Field::__field0 => {
                                        if _serde::__private::Option::is_some(&__field0) {
                                            return _serde::__private::Err(
                                                <__A::Error as _serde::de::Error>::duplicate_field("Name"),
                                            );
                                        }
                                        __field0 = _serde::__private::Some(
                                            _serde::de::MapAccess::next_value::<
                                                Option<String>,
                                            >(&mut __map)?,
                                        );
                                    }
                                    __Field::__field1 => {
                                        if _serde::__private::Option::is_some(&__field1) {
                                            return _serde::__private::Err(
                                                <__A::Error as _serde::de::Error>::duplicate_field("Data"),
                                            );
                                        }
                                        __field1 = _serde::__private::Some(
                                            _serde::de::MapAccess::next_value::<
                                                Option<HashMap<String, String>>,
                                            >(&mut __map)?,
                                        );
                                    }
                                    _ => {
                                        let _ = _serde::de::MapAccess::next_value::<
                                            _serde::de::IgnoredAny,
                                        >(&mut __map)?;
                                    }
                                }
                            }
                            let __field0 = match __field0 {
                                _serde::__private::Some(__field0) => __field0,
                                _serde::__private::None => {
                                    _serde::__private::de::missing_field("Name")?
                                }
                            };
                            let __field1 = match __field1 {
                                _serde::__private::Some(__field1) => __field1,
                                _serde::__private::None => {
                                    _serde::__private::de::missing_field("Data")?
                                }
                            };
                            _serde::__private::Ok(GraphDriverData {
                                name: __field0,
                                data: __field1,
                            })
                        }
                    }
                    #[doc(hidden)]
                    const FIELDS: &'static [&'static str] = &["Name", "Data"];
                    _serde::Deserializer::deserialize_struct(
                        __deserializer,
                        "GraphDriverData",
                        FIELDS,
                        __Visitor {
                            marker: _serde::__private::PhantomData::<GraphDriverData>,
                            lifetime: _serde::__private::PhantomData,
                        },
                    )
                }
            }
        };
        #[serde(rename_all = "PascalCase")]
        pub struct Mount {
            #[serde(skip_serializing_if = "Option::is_none")]
            pub target: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none")]
            pub source: Option<String>,
            #[serde(rename = "Type")]
            #[serde(skip_serializing_if = "Option::is_none")]
            pub mode: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none")]
            pub read_only: Option<bool>,
            #[serde(skip_serializing_if = "Option::is_none")]
            pub consistency: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none")]
            pub bind_options: Option<BindOptions>,
            #[serde(skip_serializing_if = "Option::is_none")]
            pub volume_options: Option<VolumeOptions>,
            #[serde(skip_serializing_if = "Option::is_none")]
            pub tmpfs_options: Option<TmpfsOptions>,
        }
        #[automatically_derived]
        impl ::core::clone::Clone for Mount {
            #[inline]
            fn clone(&self) -> Mount {
                Mount {
                    target: ::core::clone::Clone::clone(&self.target),
                    source: ::core::clone::Clone::clone(&self.source),
                    mode: ::core::clone::Clone::clone(&self.mode),
                    read_only: ::core::clone::Clone::clone(&self.read_only),
                    consistency: ::core::clone::Clone::clone(&self.consistency),
                    bind_options: ::core::clone::Clone::clone(&self.bind_options),
                    volume_options: ::core::clone::Clone::clone(&self.volume_options),
                    tmpfs_options: ::core::clone::Clone::clone(&self.tmpfs_options),
                }
            }
        }
        #[automatically_derived]
        impl ::core::fmt::Debug for Mount {
            #[inline]
            fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                let names: &'static _ = &[
                    "target",
                    "source",
                    "mode",
                    "read_only",
                    "consistency",
                    "bind_options",
                    "volume_options",
                    "tmpfs_options",
                ];
                let values: &[&dyn ::core::fmt::Debug] = &[
                    &self.target,
                    &self.source,
                    &self.mode,
                    &self.read_only,
                    &self.consistency,
                    &self.bind_options,
                    &self.volume_options,
                    &&self.tmpfs_options,
                ];
                ::core::fmt::Formatter::debug_struct_fields_finish(
                    f,
                    "Mount",
                    names,
                    values,
                )
            }
        }
        #[doc(hidden)]
        #[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
        const _: () = {
            #[allow(unused_extern_crates, clippy::useless_attribute)]
            extern crate serde as _serde;
            #[automatically_derived]
            impl _serde::Serialize for Mount {
                fn serialize<__S>(
                    &self,
                    __serializer: __S,
                ) -> _serde::__private::Result<__S::Ok, __S::Error>
                where
                    __S: _serde::Serializer,
                {
                    let mut __serde_state = _serde::Serializer::serialize_struct(
                        __serializer,
                        "Mount",
                        false as usize
                            + if Option::is_none(&self.target) { 0 } else { 1 }
                            + if Option::is_none(&self.source) { 0 } else { 1 }
                            + if Option::is_none(&self.mode) { 0 } else { 1 }
                            + if Option::is_none(&self.read_only) { 0 } else { 1 }
                            + if Option::is_none(&self.consistency) { 0 } else { 1 }
                            + if Option::is_none(&self.bind_options) { 0 } else { 1 }
                            + if Option::is_none(&self.volume_options) { 0 } else { 1 }
                            + if Option::is_none(&self.tmpfs_options) { 0 } else { 1 },
                    )?;
                    if !Option::is_none(&self.target) {
                        _serde::ser::SerializeStruct::serialize_field(
                            &mut __serde_state,
                            "Target",
                            &self.target,
                        )?;
                    } else {
                        _serde::ser::SerializeStruct::skip_field(
                            &mut __serde_state,
                            "Target",
                        )?;
                    }
                    if !Option::is_none(&self.source) {
                        _serde::ser::SerializeStruct::serialize_field(
                            &mut __serde_state,
                            "Source",
                            &self.source,
                        )?;
                    } else {
                        _serde::ser::SerializeStruct::skip_field(
                            &mut __serde_state,
                            "Source",
                        )?;
                    }
                    if !Option::is_none(&self.mode) {
                        _serde::ser::SerializeStruct::serialize_field(
                            &mut __serde_state,
                            "Type",
                            &self.mode,
                        )?;
                    } else {
                        _serde::ser::SerializeStruct::skip_field(
                            &mut __serde_state,
                            "Type",
                        )?;
                    }
                    if !Option::is_none(&self.read_only) {
                        _serde::ser::SerializeStruct::serialize_field(
                            &mut __serde_state,
                            "ReadOnly",
                            &self.read_only,
                        )?;
                    } else {
                        _serde::ser::SerializeStruct::skip_field(
                            &mut __serde_state,
                            "ReadOnly",
                        )?;
                    }
                    if !Option::is_none(&self.consistency) {
                        _serde::ser::SerializeStruct::serialize_field(
                            &mut __serde_state,
                            "Consistency",
                            &self.consistency,
                        )?;
                    } else {
                        _serde::ser::SerializeStruct::skip_field(
                            &mut __serde_state,
                            "Consistency",
                        )?;
                    }
                    if !Option::is_none(&self.bind_options) {
                        _serde::ser::SerializeStruct::serialize_field(
                            &mut __serde_state,
                            "BindOptions",
                            &self.bind_options,
                        )?;
                    } else {
                        _serde::ser::SerializeStruct::skip_field(
                            &mut __serde_state,
                            "BindOptions",
                        )?;
                    }
                    if !Option::is_none(&self.volume_options) {
                        _serde::ser::SerializeStruct::serialize_field(
                            &mut __serde_state,
                            "VolumeOptions",
                            &self.volume_options,
                        )?;
                    } else {
                        _serde::ser::SerializeStruct::skip_field(
                            &mut __serde_state,
                            "VolumeOptions",
                        )?;
                    }
                    if !Option::is_none(&self.tmpfs_options) {
                        _serde::ser::SerializeStruct::serialize_field(
                            &mut __serde_state,
                            "TmpfsOptions",
                            &self.tmpfs_options,
                        )?;
                    } else {
                        _serde::ser::SerializeStruct::skip_field(
                            &mut __serde_state,
                            "TmpfsOptions",
                        )?;
                    }
                    _serde::ser::SerializeStruct::end(__serde_state)
                }
            }
        };
        #[doc(hidden)]
        #[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
        const _: () = {
            #[allow(unused_extern_crates, clippy::useless_attribute)]
            extern crate serde as _serde;
            #[automatically_derived]
            impl<'de> _serde::Deserialize<'de> for Mount {
                fn deserialize<__D>(
                    __deserializer: __D,
                ) -> _serde::__private::Result<Self, __D::Error>
                where
                    __D: _serde::Deserializer<'de>,
                {
                    #[allow(non_camel_case_types)]
                    #[doc(hidden)]
                    enum __Field {
                        __field0,
                        __field1,
                        __field2,
                        __field3,
                        __field4,
                        __field5,
                        __field6,
                        __field7,
                        __ignore,
                    }
                    #[doc(hidden)]
                    struct __FieldVisitor;
                    impl<'de> _serde::de::Visitor<'de> for __FieldVisitor {
                        type Value = __Field;
                        fn expecting(
                            &self,
                            __formatter: &mut _serde::__private::Formatter,
                        ) -> _serde::__private::fmt::Result {
                            _serde::__private::Formatter::write_str(
                                __formatter,
                                "field identifier",
                            )
                        }
                        fn visit_u64<__E>(
                            self,
                            __value: u64,
                        ) -> _serde::__private::Result<Self::Value, __E>
                        where
                            __E: _serde::de::Error,
                        {
                            match __value {
                                0u64 => _serde::__private::Ok(__Field::__field0),
                                1u64 => _serde::__private::Ok(__Field::__field1),
                                2u64 => _serde::__private::Ok(__Field::__field2),
                                3u64 => _serde::__private::Ok(__Field::__field3),
                                4u64 => _serde::__private::Ok(__Field::__field4),
                                5u64 => _serde::__private::Ok(__Field::__field5),
                                6u64 => _serde::__private::Ok(__Field::__field6),
                                7u64 => _serde::__private::Ok(__Field::__field7),
                                _ => _serde::__private::Ok(__Field::__ignore),
                            }
                        }
                        fn visit_str<__E>(
                            self,
                            __value: &str,
                        ) -> _serde::__private::Result<Self::Value, __E>
                        where
                            __E: _serde::de::Error,
                        {
                            match __value {
                                "Target" => _serde::__private::Ok(__Field::__field0),
                                "Source" => _serde::__private::Ok(__Field::__field1),
                                "Type" => _serde::__private::Ok(__Field::__field2),
                                "ReadOnly" => _serde::__private::Ok(__Field::__field3),
                                "Consistency" => _serde::__private::Ok(__Field::__field4),
                                "BindOptions" => _serde::__private::Ok(__Field::__field5),
                                "VolumeOptions" => _serde::__private::Ok(__Field::__field6),
                                "TmpfsOptions" => _serde::__private::Ok(__Field::__field7),
                                _ => _serde::__private::Ok(__Field::__ignore),
                            }
                        }
                        fn visit_bytes<__E>(
                            self,
                            __value: &[u8],
                        ) -> _serde::__private::Result<Self::Value, __E>
                        where
                            __E: _serde::de::Error,
                        {
                            match __value {
                                b"Target" => _serde::__private::Ok(__Field::__field0),
                                b"Source" => _serde::__private::Ok(__Field::__field1),
                                b"Type" => _serde::__private::Ok(__Field::__field2),
                                b"ReadOnly" => _serde::__private::Ok(__Field::__field3),
                                b"Consistency" => _serde::__private::Ok(__Field::__field4),
                                b"BindOptions" => _serde::__private::Ok(__Field::__field5),
                                b"VolumeOptions" => _serde::__private::Ok(__Field::__field6),
                                b"TmpfsOptions" => _serde::__private::Ok(__Field::__field7),
                                _ => _serde::__private::Ok(__Field::__ignore),
                            }
                        }
                    }
                    impl<'de> _serde::Deserialize<'de> for __Field {
                        #[inline]
                        fn deserialize<__D>(
                            __deserializer: __D,
                        ) -> _serde::__private::Result<Self, __D::Error>
                        where
                            __D: _serde::Deserializer<'de>,
                        {
                            _serde::Deserializer::deserialize_identifier(
                                __deserializer,
                                __FieldVisitor,
                            )
                        }
                    }
                    #[doc(hidden)]
                    struct __Visitor<'de> {
                        marker: _serde::__private::PhantomData<Mount>,
                        lifetime: _serde::__private::PhantomData<&'de ()>,
                    }
                    impl<'de> _serde::de::Visitor<'de> for __Visitor<'de> {
                        type Value = Mount;
                        fn expecting(
                            &self,
                            __formatter: &mut _serde::__private::Formatter,
                        ) -> _serde::__private::fmt::Result {
                            _serde::__private::Formatter::write_str(
                                __formatter,
                                "struct Mount",
                            )
                        }
                        #[inline]
                        fn visit_seq<__A>(
                            self,
                            mut __seq: __A,
                        ) -> _serde::__private::Result<Self::Value, __A::Error>
                        where
                            __A: _serde::de::SeqAccess<'de>,
                        {
                            let __field0 = match _serde::de::SeqAccess::next_element::<
                                Option<String>,
                            >(&mut __seq)? {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            0usize,
                                            &"struct Mount with 8 elements",
                                        ),
                                    );
                                }
                            };
                            let __field1 = match _serde::de::SeqAccess::next_element::<
                                Option<String>,
                            >(&mut __seq)? {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            1usize,
                                            &"struct Mount with 8 elements",
                                        ),
                                    );
                                }
                            };
                            let __field2 = match _serde::de::SeqAccess::next_element::<
                                Option<String>,
                            >(&mut __seq)? {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            2usize,
                                            &"struct Mount with 8 elements",
                                        ),
                                    );
                                }
                            };
                            let __field3 = match _serde::de::SeqAccess::next_element::<
                                Option<bool>,
                            >(&mut __seq)? {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            3usize,
                                            &"struct Mount with 8 elements",
                                        ),
                                    );
                                }
                            };
                            let __field4 = match _serde::de::SeqAccess::next_element::<
                                Option<String>,
                            >(&mut __seq)? {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            4usize,
                                            &"struct Mount with 8 elements",
                                        ),
                                    );
                                }
                            };
                            let __field5 = match _serde::de::SeqAccess::next_element::<
                                Option<BindOptions>,
                            >(&mut __seq)? {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            5usize,
                                            &"struct Mount with 8 elements",
                                        ),
                                    );
                                }
                            };
                            let __field6 = match _serde::de::SeqAccess::next_element::<
                                Option<VolumeOptions>,
                            >(&mut __seq)? {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            6usize,
                                            &"struct Mount with 8 elements",
                                        ),
                                    );
                                }
                            };
                            let __field7 = match _serde::de::SeqAccess::next_element::<
                                Option<TmpfsOptions>,
                            >(&mut __seq)? {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            7usize,
                                            &"struct Mount with 8 elements",
                                        ),
                                    );
                                }
                            };
                            _serde::__private::Ok(Mount {
                                target: __field0,
                                source: __field1,
                                mode: __field2,
                                read_only: __field3,
                                consistency: __field4,
                                bind_options: __field5,
                                volume_options: __field6,
                                tmpfs_options: __field7,
                            })
                        }
                        #[inline]
                        fn visit_map<__A>(
                            self,
                            mut __map: __A,
                        ) -> _serde::__private::Result<Self::Value, __A::Error>
                        where
                            __A: _serde::de::MapAccess<'de>,
                        {
                            let mut __field0: _serde::__private::Option<
                                Option<String>,
                            > = _serde::__private::None;
                            let mut __field1: _serde::__private::Option<
                                Option<String>,
                            > = _serde::__private::None;
                            let mut __field2: _serde::__private::Option<
                                Option<String>,
                            > = _serde::__private::None;
                            let mut __field3: _serde::__private::Option<Option<bool>> = _serde::__private::None;
                            let mut __field4: _serde::__private::Option<
                                Option<String>,
                            > = _serde::__private::None;
                            let mut __field5: _serde::__private::Option<
                                Option<BindOptions>,
                            > = _serde::__private::None;
                            let mut __field6: _serde::__private::Option<
                                Option<VolumeOptions>,
                            > = _serde::__private::None;
                            let mut __field7: _serde::__private::Option<
                                Option<TmpfsOptions>,
                            > = _serde::__private::None;
                            while let _serde::__private::Some(__key) = _serde::de::MapAccess::next_key::<
                                __Field,
                            >(&mut __map)? {
                                match __key {
                                    __Field::__field0 => {
                                        if _serde::__private::Option::is_some(&__field0) {
                                            return _serde::__private::Err(
                                                <__A::Error as _serde::de::Error>::duplicate_field("Target"),
                                            );
                                        }
                                        __field0 = _serde::__private::Some(
                                            _serde::de::MapAccess::next_value::<
                                                Option<String>,
                                            >(&mut __map)?,
                                        );
                                    }
                                    __Field::__field1 => {
                                        if _serde::__private::Option::is_some(&__field1) {
                                            return _serde::__private::Err(
                                                <__A::Error as _serde::de::Error>::duplicate_field("Source"),
                                            );
                                        }
                                        __field1 = _serde::__private::Some(
                                            _serde::de::MapAccess::next_value::<
                                                Option<String>,
                                            >(&mut __map)?,
                                        );
                                    }
                                    __Field::__field2 => {
                                        if _serde::__private::Option::is_some(&__field2) {
                                            return _serde::__private::Err(
                                                <__A::Error as _serde::de::Error>::duplicate_field("Type"),
                                            );
                                        }
                                        __field2 = _serde::__private::Some(
                                            _serde::de::MapAccess::next_value::<
                                                Option<String>,
                                            >(&mut __map)?,
                                        );
                                    }
                                    __Field::__field3 => {
                                        if _serde::__private::Option::is_some(&__field3) {
                                            return _serde::__private::Err(
                                                <__A::Error as _serde::de::Error>::duplicate_field(
                                                    "ReadOnly",
                                                ),
                                            );
                                        }
                                        __field3 = _serde::__private::Some(
                                            _serde::de::MapAccess::next_value::<
                                                Option<bool>,
                                            >(&mut __map)?,
                                        );
                                    }
                                    __Field::__field4 => {
                                        if _serde::__private::Option::is_some(&__field4) {
                                            return _serde::__private::Err(
                                                <__A::Error as _serde::de::Error>::duplicate_field(
                                                    "Consistency",
                                                ),
                                            );
                                        }
                                        __field4 = _serde::__private::Some(
                                            _serde::de::MapAccess::next_value::<
                                                Option<String>,
                                            >(&mut __map)?,
                                        );
                                    }
                                    __Field::__field5 => {
                                        if _serde::__private::Option::is_some(&__field5) {
                                            return _serde::__private::Err(
                                                <__A::Error as _serde::de::Error>::duplicate_field(
                                                    "BindOptions",
                                                ),
                                            );
                                        }
                                        __field5 = _serde::__private::Some(
                                            _serde::de::MapAccess::next_value::<
                                                Option<BindOptions>,
                                            >(&mut __map)?,
                                        );
                                    }
                                    __Field::__field6 => {
                                        if _serde::__private::Option::is_some(&__field6) {
                                            return _serde::__private::Err(
                                                <__A::Error as _serde::de::Error>::duplicate_field(
                                                    "VolumeOptions",
                                                ),
                                            );
                                        }
                                        __field6 = _serde::__private::Some(
                                            _serde::de::MapAccess::next_value::<
                                                Option<VolumeOptions>,
                                            >(&mut __map)?,
                                        );
                                    }
                                    __Field::__field7 => {
                                        if _serde::__private::Option::is_some(&__field7) {
                                            return _serde::__private::Err(
                                                <__A::Error as _serde::de::Error>::duplicate_field(
                                                    "TmpfsOptions",
                                                ),
                                            );
                                        }
                                        __field7 = _serde::__private::Some(
                                            _serde::de::MapAccess::next_value::<
                                                Option<TmpfsOptions>,
                                            >(&mut __map)?,
                                        );
                                    }
                                    _ => {
                                        let _ = _serde::de::MapAccess::next_value::<
                                            _serde::de::IgnoredAny,
                                        >(&mut __map)?;
                                    }
                                }
                            }
                            let __field0 = match __field0 {
                                _serde::__private::Some(__field0) => __field0,
                                _serde::__private::None => {
                                    _serde::__private::de::missing_field("Target")?
                                }
                            };
                            let __field1 = match __field1 {
                                _serde::__private::Some(__field1) => __field1,
                                _serde::__private::None => {
                                    _serde::__private::de::missing_field("Source")?
                                }
                            };
                            let __field2 = match __field2 {
                                _serde::__private::Some(__field2) => __field2,
                                _serde::__private::None => {
                                    _serde::__private::de::missing_field("Type")?
                                }
                            };
                            let __field3 = match __field3 {
                                _serde::__private::Some(__field3) => __field3,
                                _serde::__private::None => {
                                    _serde::__private::de::missing_field("ReadOnly")?
                                }
                            };
                            let __field4 = match __field4 {
                                _serde::__private::Some(__field4) => __field4,
                                _serde::__private::None => {
                                    _serde::__private::de::missing_field("Consistency")?
                                }
                            };
                            let __field5 = match __field5 {
                                _serde::__private::Some(__field5) => __field5,
                                _serde::__private::None => {
                                    _serde::__private::de::missing_field("BindOptions")?
                                }
                            };
                            let __field6 = match __field6 {
                                _serde::__private::Some(__field6) => __field6,
                                _serde::__private::None => {
                                    _serde::__private::de::missing_field("VolumeOptions")?
                                }
                            };
                            let __field7 = match __field7 {
                                _serde::__private::Some(__field7) => __field7,
                                _serde::__private::None => {
                                    _serde::__private::de::missing_field("TmpfsOptions")?
                                }
                            };
                            _serde::__private::Ok(Mount {
                                target: __field0,
                                source: __field1,
                                mode: __field2,
                                read_only: __field3,
                                consistency: __field4,
                                bind_options: __field5,
                                volume_options: __field6,
                                tmpfs_options: __field7,
                            })
                        }
                    }
                    #[doc(hidden)]
                    const FIELDS: &'static [&'static str] = &[
                        "Target",
                        "Source",
                        "Type",
                        "ReadOnly",
                        "Consistency",
                        "BindOptions",
                        "VolumeOptions",
                        "TmpfsOptions",
                    ];
                    _serde::Deserializer::deserialize_struct(
                        __deserializer,
                        "Mount",
                        FIELDS,
                        __Visitor {
                            marker: _serde::__private::PhantomData::<Mount>,
                            lifetime: _serde::__private::PhantomData,
                        },
                    )
                }
            }
        };
        #[serde(rename_all = "PascalCase")]
        pub struct MountPoint {
            #[serde(rename = "Type")]
            #[serde(skip_serializing_if = "Option::is_none")]
            pub ty: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none")]
            pub name: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none")]
            pub source: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none")]
            pub destination: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none")]
            pub driver: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none")]
            pub mode: Option<String>,
            #[serde(rename = "RW")]
            #[serde(skip_serializing_if = "Option::is_none")]
            pub rw: Option<bool>,
            #[serde(skip_serializing_if = "Option::is_none")]
            pub propagation: Option<String>,
        }
        #[automatically_derived]
        impl ::core::clone::Clone for MountPoint {
            #[inline]
            fn clone(&self) -> MountPoint {
                MountPoint {
                    ty: ::core::clone::Clone::clone(&self.ty),
                    name: ::core::clone::Clone::clone(&self.name),
                    source: ::core::clone::Clone::clone(&self.source),
                    destination: ::core::clone::Clone::clone(&self.destination),
                    driver: ::core::clone::Clone::clone(&self.driver),
                    mode: ::core::clone::Clone::clone(&self.mode),
                    rw: ::core::clone::Clone::clone(&self.rw),
                    propagation: ::core::clone::Clone::clone(&self.propagation),
                }
            }
        }
        #[automatically_derived]
        impl ::core::fmt::Debug for MountPoint {
            #[inline]
            fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                let names: &'static _ = &[
                    "ty",
                    "name",
                    "source",
                    "destination",
                    "driver",
                    "mode",
                    "rw",
                    "propagation",
                ];
                let values: &[&dyn ::core::fmt::Debug] = &[
                    &self.ty,
                    &self.name,
                    &self.source,
                    &self.destination,
                    &self.driver,
                    &self.mode,
                    &self.rw,
                    &&self.propagation,
                ];
                ::core::fmt::Formatter::debug_struct_fields_finish(
                    f,
                    "MountPoint",
                    names,
                    values,
                )
            }
        }
        #[doc(hidden)]
        #[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
        const _: () = {
            #[allow(unused_extern_crates, clippy::useless_attribute)]
            extern crate serde as _serde;
            #[automatically_derived]
            impl _serde::Serialize for MountPoint {
                fn serialize<__S>(
                    &self,
                    __serializer: __S,
                ) -> _serde::__private::Result<__S::Ok, __S::Error>
                where
                    __S: _serde::Serializer,
                {
                    let mut __serde_state = _serde::Serializer::serialize_struct(
                        __serializer,
                        "MountPoint",
                        false as usize + if Option::is_none(&self.ty) { 0 } else { 1 }
                            + if Option::is_none(&self.name) { 0 } else { 1 }
                            + if Option::is_none(&self.source) { 0 } else { 1 }
                            + if Option::is_none(&self.destination) { 0 } else { 1 }
                            + if Option::is_none(&self.driver) { 0 } else { 1 }
                            + if Option::is_none(&self.mode) { 0 } else { 1 }
                            + if Option::is_none(&self.rw) { 0 } else { 1 }
                            + if Option::is_none(&self.propagation) { 0 } else { 1 },
                    )?;
                    if !Option::is_none(&self.ty) {
                        _serde::ser::SerializeStruct::serialize_field(
                            &mut __serde_state,
                            "Type",
                            &self.ty,
                        )?;
                    } else {
                        _serde::ser::SerializeStruct::skip_field(
                            &mut __serde_state,
                            "Type",
                        )?;
                    }
                    if !Option::is_none(&self.name) {
                        _serde::ser::SerializeStruct::serialize_field(
                            &mut __serde_state,
                            "Name",
                            &self.name,
                        )?;
                    } else {
                        _serde::ser::SerializeStruct::skip_field(
                            &mut __serde_state,
                            "Name",
                        )?;
                    }
                    if !Option::is_none(&self.source) {
                        _serde::ser::SerializeStruct::serialize_field(
                            &mut __serde_state,
                            "Source",
                            &self.source,
                        )?;
                    } else {
                        _serde::ser::SerializeStruct::skip_field(
                            &mut __serde_state,
                            "Source",
                        )?;
                    }
                    if !Option::is_none(&self.destination) {
                        _serde::ser::SerializeStruct::serialize_field(
                            &mut __serde_state,
                            "Destination",
                            &self.destination,
                        )?;
                    } else {
                        _serde::ser::SerializeStruct::skip_field(
                            &mut __serde_state,
                            "Destination",
                        )?;
                    }
                    if !Option::is_none(&self.driver) {
                        _serde::ser::SerializeStruct::serialize_field(
                            &mut __serde_state,
                            "Driver",
                            &self.driver,
                        )?;
                    } else {
                        _serde::ser::SerializeStruct::skip_field(
                            &mut __serde_state,
                            "Driver",
                        )?;
                    }
                    if !Option::is_none(&self.mode) {
                        _serde::ser::SerializeStruct::serialize_field(
                            &mut __serde_state,
                            "Mode",
                            &self.mode,
                        )?;
                    } else {
                        _serde::ser::SerializeStruct::skip_field(
                            &mut __serde_state,
                            "Mode",
                        )?;
                    }
                    if !Option::is_none(&self.rw) {
                        _serde::ser::SerializeStruct::serialize_field(
                            &mut __serde_state,
                            "RW",
                            &self.rw,
                        )?;
                    } else {
                        _serde::ser::SerializeStruct::skip_field(
                            &mut __serde_state,
                            "RW",
                        )?;
                    }
                    if !Option::is_none(&self.propagation) {
                        _serde::ser::SerializeStruct::serialize_field(
                            &mut __serde_state,
                            "Propagation",
                            &self.propagation,
                        )?;
                    } else {
                        _serde::ser::SerializeStruct::skip_field(
                            &mut __serde_state,
                            "Propagation",
                        )?;
                    }
                    _serde::ser::SerializeStruct::end(__serde_state)
                }
            }
        };
        #[doc(hidden)]
        #[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
        const _: () = {
            #[allow(unused_extern_crates, clippy::useless_attribute)]
            extern crate serde as _serde;
            #[automatically_derived]
            impl<'de> _serde::Deserialize<'de> for MountPoint {
                fn deserialize<__D>(
                    __deserializer: __D,
                ) -> _serde::__private::Result<Self, __D::Error>
                where
                    __D: _serde::Deserializer<'de>,
                {
                    #[allow(non_camel_case_types)]
                    #[doc(hidden)]
                    enum __Field {
                        __field0,
                        __field1,
                        __field2,
                        __field3,
                        __field4,
                        __field5,
                        __field6,
                        __field7,
                        __ignore,
                    }
                    #[doc(hidden)]
                    struct __FieldVisitor;
                    impl<'de> _serde::de::Visitor<'de> for __FieldVisitor {
                        type Value = __Field;
                        fn expecting(
                            &self,
                            __formatter: &mut _serde::__private::Formatter,
                        ) -> _serde::__private::fmt::Result {
                            _serde::__private::Formatter::write_str(
                                __formatter,
                                "field identifier",
                            )
                        }
                        fn visit_u64<__E>(
                            self,
                            __value: u64,
                        ) -> _serde::__private::Result<Self::Value, __E>
                        where
                            __E: _serde::de::Error,
                        {
                            match __value {
                                0u64 => _serde::__private::Ok(__Field::__field0),
                                1u64 => _serde::__private::Ok(__Field::__field1),
                                2u64 => _serde::__private::Ok(__Field::__field2),
                                3u64 => _serde::__private::Ok(__Field::__field3),
                                4u64 => _serde::__private::Ok(__Field::__field4),
                                5u64 => _serde::__private::Ok(__Field::__field5),
                                6u64 => _serde::__private::Ok(__Field::__field6),
                                7u64 => _serde::__private::Ok(__Field::__field7),
                                _ => _serde::__private::Ok(__Field::__ignore),
                            }
                        }
                        fn visit_str<__E>(
                            self,
                            __value: &str,
                        ) -> _serde::__private::Result<Self::Value, __E>
                        where
                            __E: _serde::de::Error,
                        {
                            match __value {
                                "Type" => _serde::__private::Ok(__Field::__field0),
                                "Name" => _serde::__private::Ok(__Field::__field1),
                                "Source" => _serde::__private::Ok(__Field::__field2),
                                "Destination" => _serde::__private::Ok(__Field::__field3),
                                "Driver" => _serde::__private::Ok(__Field::__field4),
                                "Mode" => _serde::__private::Ok(__Field::__field5),
                                "RW" => _serde::__private::Ok(__Field::__field6),
                                "Propagation" => _serde::__private::Ok(__Field::__field7),
                                _ => _serde::__private::Ok(__Field::__ignore),
                            }
                        }
                        fn visit_bytes<__E>(
                            self,
                            __value: &[u8],
                        ) -> _serde::__private::Result<Self::Value, __E>
                        where
                            __E: _serde::de::Error,
                        {
                            match __value {
                                b"Type" => _serde::__private::Ok(__Field::__field0),
                                b"Name" => _serde::__private::Ok(__Field::__field1),
                                b"Source" => _serde::__private::Ok(__Field::__field2),
                                b"Destination" => _serde::__private::Ok(__Field::__field3),
                                b"Driver" => _serde::__private::Ok(__Field::__field4),
                                b"Mode" => _serde::__private::Ok(__Field::__field5),
                                b"RW" => _serde::__private::Ok(__Field::__field6),
                                b"Propagation" => _serde::__private::Ok(__Field::__field7),
                                _ => _serde::__private::Ok(__Field::__ignore),
                            }
                        }
                    }
                    impl<'de> _serde::Deserialize<'de> for __Field {
                        #[inline]
                        fn deserialize<__D>(
                            __deserializer: __D,
                        ) -> _serde::__private::Result<Self, __D::Error>
                        where
                            __D: _serde::Deserializer<'de>,
                        {
                            _serde::Deserializer::deserialize_identifier(
                                __deserializer,
                                __FieldVisitor,
                            )
                        }
                    }
                    #[doc(hidden)]
                    struct __Visitor<'de> {
                        marker: _serde::__private::PhantomData<MountPoint>,
                        lifetime: _serde::__private::PhantomData<&'de ()>,
                    }
                    impl<'de> _serde::de::Visitor<'de> for __Visitor<'de> {
                        type Value = MountPoint;
                        fn expecting(
                            &self,
                            __formatter: &mut _serde::__private::Formatter,
                        ) -> _serde::__private::fmt::Result {
                            _serde::__private::Formatter::write_str(
                                __formatter,
                                "struct MountPoint",
                            )
                        }
                        #[inline]
                        fn visit_seq<__A>(
                            self,
                            mut __seq: __A,
                        ) -> _serde::__private::Result<Self::Value, __A::Error>
                        where
                            __A: _serde::de::SeqAccess<'de>,
                        {
                            let __field0 = match _serde::de::SeqAccess::next_element::<
                                Option<String>,
                            >(&mut __seq)? {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            0usize,
                                            &"struct MountPoint with 8 elements",
                                        ),
                                    );
                                }
                            };
                            let __field1 = match _serde::de::SeqAccess::next_element::<
                                Option<String>,
                            >(&mut __seq)? {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            1usize,
                                            &"struct MountPoint with 8 elements",
                                        ),
                                    );
                                }
                            };
                            let __field2 = match _serde::de::SeqAccess::next_element::<
                                Option<String>,
                            >(&mut __seq)? {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            2usize,
                                            &"struct MountPoint with 8 elements",
                                        ),
                                    );
                                }
                            };
                            let __field3 = match _serde::de::SeqAccess::next_element::<
                                Option<String>,
                            >(&mut __seq)? {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            3usize,
                                            &"struct MountPoint with 8 elements",
                                        ),
                                    );
                                }
                            };
                            let __field4 = match _serde::de::SeqAccess::next_element::<
                                Option<String>,
                            >(&mut __seq)? {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            4usize,
                                            &"struct MountPoint with 8 elements",
                                        ),
                                    );
                                }
                            };
                            let __field5 = match _serde::de::SeqAccess::next_element::<
                                Option<String>,
                            >(&mut __seq)? {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            5usize,
                                            &"struct MountPoint with 8 elements",
                                        ),
                                    );
                                }
                            };
                            let __field6 = match _serde::de::SeqAccess::next_element::<
                                Option<bool>,
                            >(&mut __seq)? {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            6usize,
                                            &"struct MountPoint with 8 elements",
                                        ),
                                    );
                                }
                            };
                            let __field7 = match _serde::de::SeqAccess::next_element::<
                                Option<String>,
                            >(&mut __seq)? {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            7usize,
                                            &"struct MountPoint with 8 elements",
                                        ),
                                    );
                                }
                            };
                            _serde::__private::Ok(MountPoint {
                                ty: __field0,
                                name: __field1,
                                source: __field2,
                                destination: __field3,
                                driver: __field4,
                                mode: __field5,
                                rw: __field6,
                                propagation: __field7,
                            })
                        }
                        #[inline]
                        fn visit_map<__A>(
                            self,
                            mut __map: __A,
                        ) -> _serde::__private::Result<Self::Value, __A::Error>
                        where
                            __A: _serde::de::MapAccess<'de>,
                        {
                            let mut __field0: _serde::__private::Option<
                                Option<String>,
                            > = _serde::__private::None;
                            let mut __field1: _serde::__private::Option<
                                Option<String>,
                            > = _serde::__private::None;
                            let mut __field2: _serde::__private::Option<
                                Option<String>,
                            > = _serde::__private::None;
                            let mut __field3: _serde::__private::Option<
                                Option<String>,
                            > = _serde::__private::None;
                            let mut __field4: _serde::__private::Option<
                                Option<String>,
                            > = _serde::__private::None;
                            let mut __field5: _serde::__private::Option<
                                Option<String>,
                            > = _serde::__private::None;
                            let mut __field6: _serde::__private::Option<Option<bool>> = _serde::__private::None;
                            let mut __field7: _serde::__private::Option<
                                Option<String>,
                            > = _serde::__private::None;
                            while let _serde::__private::Some(__key) = _serde::de::MapAccess::next_key::<
                                __Field,
                            >(&mut __map)? {
                                match __key {
                                    __Field::__field0 => {
                                        if _serde::__private::Option::is_some(&__field0) {
                                            return _serde::__private::Err(
                                                <__A::Error as _serde::de::Error>::duplicate_field("Type"),
                                            );
                                        }
                                        __field0 = _serde::__private::Some(
                                            _serde::de::MapAccess::next_value::<
                                                Option<String>,
                                            >(&mut __map)?,
                                        );
                                    }
                                    __Field::__field1 => {
                                        if _serde::__private::Option::is_some(&__field1) {
                                            return _serde::__private::Err(
                                                <__A::Error as _serde::de::Error>::duplicate_field("Name"),
                                            );
                                        }
                                        __field1 = _serde::__private::Some(
                                            _serde::de::MapAccess::next_value::<
                                                Option<String>,
                                            >(&mut __map)?,
                                        );
                                    }
                                    __Field::__field2 => {
                                        if _serde::__private::Option::is_some(&__field2) {
                                            return _serde::__private::Err(
                                                <__A::Error as _serde::de::Error>::duplicate_field("Source"),
                                            );
                                        }
                                        __field2 = _serde::__private::Some(
                                            _serde::de::MapAccess::next_value::<
                                                Option<String>,
                                            >(&mut __map)?,
                                        );
                                    }
                                    __Field::__field3 => {
                                        if _serde::__private::Option::is_some(&__field3) {
                                            return _serde::__private::Err(
                                                <__A::Error as _serde::de::Error>::duplicate_field(
                                                    "Destination",
                                                ),
                                            );
                                        }
                                        __field3 = _serde::__private::Some(
                                            _serde::de::MapAccess::next_value::<
                                                Option<String>,
                                            >(&mut __map)?,
                                        );
                                    }
                                    __Field::__field4 => {
                                        if _serde::__private::Option::is_some(&__field4) {
                                            return _serde::__private::Err(
                                                <__A::Error as _serde::de::Error>::duplicate_field("Driver"),
                                            );
                                        }
                                        __field4 = _serde::__private::Some(
                                            _serde::de::MapAccess::next_value::<
                                                Option<String>,
                                            >(&mut __map)?,
                                        );
                                    }
                                    __Field::__field5 => {
                                        if _serde::__private::Option::is_some(&__field5) {
                                            return _serde::__private::Err(
                                                <__A::Error as _serde::de::Error>::duplicate_field("Mode"),
                                            );
                                        }
                                        __field5 = _serde::__private::Some(
                                            _serde::de::MapAccess::next_value::<
                                                Option<String>,
                                            >(&mut __map)?,
                                        );
                                    }
                                    __Field::__field6 => {
                                        if _serde::__private::Option::is_some(&__field6) {
                                            return _serde::__private::Err(
                                                <__A::Error as _serde::de::Error>::duplicate_field("RW"),
                                            );
                                        }
                                        __field6 = _serde::__private::Some(
                                            _serde::de::MapAccess::next_value::<
                                                Option<bool>,
                                            >(&mut __map)?,
                                        );
                                    }
                                    __Field::__field7 => {
                                        if _serde::__private::Option::is_some(&__field7) {
                                            return _serde::__private::Err(
                                                <__A::Error as _serde::de::Error>::duplicate_field(
                                                    "Propagation",
                                                ),
                                            );
                                        }
                                        __field7 = _serde::__private::Some(
                                            _serde::de::MapAccess::next_value::<
                                                Option<String>,
                                            >(&mut __map)?,
                                        );
                                    }
                                    _ => {
                                        let _ = _serde::de::MapAccess::next_value::<
                                            _serde::de::IgnoredAny,
                                        >(&mut __map)?;
                                    }
                                }
                            }
                            let __field0 = match __field0 {
                                _serde::__private::Some(__field0) => __field0,
                                _serde::__private::None => {
                                    _serde::__private::de::missing_field("Type")?
                                }
                            };
                            let __field1 = match __field1 {
                                _serde::__private::Some(__field1) => __field1,
                                _serde::__private::None => {
                                    _serde::__private::de::missing_field("Name")?
                                }
                            };
                            let __field2 = match __field2 {
                                _serde::__private::Some(__field2) => __field2,
                                _serde::__private::None => {
                                    _serde::__private::de::missing_field("Source")?
                                }
                            };
                            let __field3 = match __field3 {
                                _serde::__private::Some(__field3) => __field3,
                                _serde::__private::None => {
                                    _serde::__private::de::missing_field("Destination")?
                                }
                            };
                            let __field4 = match __field4 {
                                _serde::__private::Some(__field4) => __field4,
                                _serde::__private::None => {
                                    _serde::__private::de::missing_field("Driver")?
                                }
                            };
                            let __field5 = match __field5 {
                                _serde::__private::Some(__field5) => __field5,
                                _serde::__private::None => {
                                    _serde::__private::de::missing_field("Mode")?
                                }
                            };
                            let __field6 = match __field6 {
                                _serde::__private::Some(__field6) => __field6,
                                _serde::__private::None => {
                                    _serde::__private::de::missing_field("RW")?
                                }
                            };
                            let __field7 = match __field7 {
                                _serde::__private::Some(__field7) => __field7,
                                _serde::__private::None => {
                                    _serde::__private::de::missing_field("Propagation")?
                                }
                            };
                            _serde::__private::Ok(MountPoint {
                                ty: __field0,
                                name: __field1,
                                source: __field2,
                                destination: __field3,
                                driver: __field4,
                                mode: __field5,
                                rw: __field6,
                                propagation: __field7,
                            })
                        }
                    }
                    #[doc(hidden)]
                    const FIELDS: &'static [&'static str] = &[
                        "Type",
                        "Name",
                        "Source",
                        "Destination",
                        "Driver",
                        "Mode",
                        "RW",
                        "Propagation",
                    ];
                    _serde::Deserializer::deserialize_struct(
                        __deserializer,
                        "MountPoint",
                        FIELDS,
                        __Visitor {
                            marker: _serde::__private::PhantomData::<MountPoint>,
                            lifetime: _serde::__private::PhantomData,
                        },
                    )
                }
            }
        };
        #[serde(rename_all = "PascalCase")]
        pub struct BindOptions {
            #[serde(skip_serializing_if = "Option::is_none")]
            pub propagation: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none")]
            pub non_recursive: Option<bool>,
            #[serde(skip_serializing_if = "Option::is_none")]
            pub create_mountpoint: Option<bool>,
            #[serde(skip_serializing_if = "Option::is_none")]
            pub read_only_non_recursive: Option<bool>,
            #[serde(skip_serializing_if = "Option::is_none")]
            pub read_only_force_recursive: Option<bool>,
        }
        #[automatically_derived]
        impl ::core::clone::Clone for BindOptions {
            #[inline]
            fn clone(&self) -> BindOptions {
                BindOptions {
                    propagation: ::core::clone::Clone::clone(&self.propagation),
                    non_recursive: ::core::clone::Clone::clone(&self.non_recursive),
                    create_mountpoint: ::core::clone::Clone::clone(
                        &self.create_mountpoint,
                    ),
                    read_only_non_recursive: ::core::clone::Clone::clone(
                        &self.read_only_non_recursive,
                    ),
                    read_only_force_recursive: ::core::clone::Clone::clone(
                        &self.read_only_force_recursive,
                    ),
                }
            }
        }
        #[automatically_derived]
        impl ::core::fmt::Debug for BindOptions {
            #[inline]
            fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                ::core::fmt::Formatter::debug_struct_field5_finish(
                    f,
                    "BindOptions",
                    "propagation",
                    &self.propagation,
                    "non_recursive",
                    &self.non_recursive,
                    "create_mountpoint",
                    &self.create_mountpoint,
                    "read_only_non_recursive",
                    &self.read_only_non_recursive,
                    "read_only_force_recursive",
                    &&self.read_only_force_recursive,
                )
            }
        }
        #[doc(hidden)]
        #[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
        const _: () = {
            #[allow(unused_extern_crates, clippy::useless_attribute)]
            extern crate serde as _serde;
            #[automatically_derived]
            impl _serde::Serialize for BindOptions {
                fn serialize<__S>(
                    &self,
                    __serializer: __S,
                ) -> _serde::__private::Result<__S::Ok, __S::Error>
                where
                    __S: _serde::Serializer,
                {
                    let mut __serde_state = _serde::Serializer::serialize_struct(
                        __serializer,
                        "BindOptions",
                        false as usize
                            + if Option::is_none(&self.propagation) { 0 } else { 1 }
                            + if Option::is_none(&self.non_recursive) { 0 } else { 1 }
                            + if Option::is_none(&self.create_mountpoint) {
                                0
                            } else {
                                1
                            }
                            + if Option::is_none(&self.read_only_non_recursive) {
                                0
                            } else {
                                1
                            }
                            + if Option::is_none(&self.read_only_force_recursive) {
                                0
                            } else {
                                1
                            },
                    )?;
                    if !Option::is_none(&self.propagation) {
                        _serde::ser::SerializeStruct::serialize_field(
                            &mut __serde_state,
                            "Propagation",
                            &self.propagation,
                        )?;
                    } else {
                        _serde::ser::SerializeStruct::skip_field(
                            &mut __serde_state,
                            "Propagation",
                        )?;
                    }
                    if !Option::is_none(&self.non_recursive) {
                        _serde::ser::SerializeStruct::serialize_field(
                            &mut __serde_state,
                            "NonRecursive",
                            &self.non_recursive,
                        )?;
                    } else {
                        _serde::ser::SerializeStruct::skip_field(
                            &mut __serde_state,
                            "NonRecursive",
                        )?;
                    }
                    if !Option::is_none(&self.create_mountpoint) {
                        _serde::ser::SerializeStruct::serialize_field(
                            &mut __serde_state,
                            "CreateMountpoint",
                            &self.create_mountpoint,
                        )?;
                    } else {
                        _serde::ser::SerializeStruct::skip_field(
                            &mut __serde_state,
                            "CreateMountpoint",
                        )?;
                    }
                    if !Option::is_none(&self.read_only_non_recursive) {
                        _serde::ser::SerializeStruct::serialize_field(
                            &mut __serde_state,
                            "ReadOnlyNonRecursive",
                            &self.read_only_non_recursive,
                        )?;
                    } else {
                        _serde::ser::SerializeStruct::skip_field(
                            &mut __serde_state,
                            "ReadOnlyNonRecursive",
                        )?;
                    }
                    if !Option::is_none(&self.read_only_force_recursive) {
                        _serde::ser::SerializeStruct::serialize_field(
                            &mut __serde_state,
                            "ReadOnlyForceRecursive",
                            &self.read_only_force_recursive,
                        )?;
                    } else {
                        _serde::ser::SerializeStruct::skip_field(
                            &mut __serde_state,
                            "ReadOnlyForceRecursive",
                        )?;
                    }
                    _serde::ser::SerializeStruct::end(__serde_state)
                }
            }
        };
        #[doc(hidden)]
        #[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
        const _: () = {
            #[allow(unused_extern_crates, clippy::useless_attribute)]
            extern crate serde as _serde;
            #[automatically_derived]
            impl<'de> _serde::Deserialize<'de> for BindOptions {
                fn deserialize<__D>(
                    __deserializer: __D,
                ) -> _serde::__private::Result<Self, __D::Error>
                where
                    __D: _serde::Deserializer<'de>,
                {
                    #[allow(non_camel_case_types)]
                    #[doc(hidden)]
                    enum __Field {
                        __field0,
                        __field1,
                        __field2,
                        __field3,
                        __field4,
                        __ignore,
                    }
                    #[doc(hidden)]
                    struct __FieldVisitor;
                    impl<'de> _serde::de::Visitor<'de> for __FieldVisitor {
                        type Value = __Field;
                        fn expecting(
                            &self,
                            __formatter: &mut _serde::__private::Formatter,
                        ) -> _serde::__private::fmt::Result {
                            _serde::__private::Formatter::write_str(
                                __formatter,
                                "field identifier",
                            )
                        }
                        fn visit_u64<__E>(
                            self,
                            __value: u64,
                        ) -> _serde::__private::Result<Self::Value, __E>
                        where
                            __E: _serde::de::Error,
                        {
                            match __value {
                                0u64 => _serde::__private::Ok(__Field::__field0),
                                1u64 => _serde::__private::Ok(__Field::__field1),
                                2u64 => _serde::__private::Ok(__Field::__field2),
                                3u64 => _serde::__private::Ok(__Field::__field3),
                                4u64 => _serde::__private::Ok(__Field::__field4),
                                _ => _serde::__private::Ok(__Field::__ignore),
                            }
                        }
                        fn visit_str<__E>(
                            self,
                            __value: &str,
                        ) -> _serde::__private::Result<Self::Value, __E>
                        where
                            __E: _serde::de::Error,
                        {
                            match __value {
                                "Propagation" => _serde::__private::Ok(__Field::__field0),
                                "NonRecursive" => _serde::__private::Ok(__Field::__field1),
                                "CreateMountpoint" => {
                                    _serde::__private::Ok(__Field::__field2)
                                }
                                "ReadOnlyNonRecursive" => {
                                    _serde::__private::Ok(__Field::__field3)
                                }
                                "ReadOnlyForceRecursive" => {
                                    _serde::__private::Ok(__Field::__field4)
                                }
                                _ => _serde::__private::Ok(__Field::__ignore),
                            }
                        }
                        fn visit_bytes<__E>(
                            self,
                            __value: &[u8],
                        ) -> _serde::__private::Result<Self::Value, __E>
                        where
                            __E: _serde::de::Error,
                        {
                            match __value {
                                b"Propagation" => _serde::__private::Ok(__Field::__field0),
                                b"NonRecursive" => _serde::__private::Ok(__Field::__field1),
                                b"CreateMountpoint" => {
                                    _serde::__private::Ok(__Field::__field2)
                                }
                                b"ReadOnlyNonRecursive" => {
                                    _serde::__private::Ok(__Field::__field3)
                                }
                                b"ReadOnlyForceRecursive" => {
                                    _serde::__private::Ok(__Field::__field4)
                                }
                                _ => _serde::__private::Ok(__Field::__ignore),
                            }
                        }
                    }
                    impl<'de> _serde::Deserialize<'de> for __Field {
                        #[inline]
                        fn deserialize<__D>(
                            __deserializer: __D,
                        ) -> _serde::__private::Result<Self, __D::Error>
                        where
                            __D: _serde::Deserializer<'de>,
                        {
                            _serde::Deserializer::deserialize_identifier(
                                __deserializer,
                                __FieldVisitor,
                            )
                        }
                    }
                    #[doc(hidden)]
                    struct __Visitor<'de> {
                        marker: _serde::__private::PhantomData<BindOptions>,
                        lifetime: _serde::__private::PhantomData<&'de ()>,
                    }
                    impl<'de> _serde::de::Visitor<'de> for __Visitor<'de> {
                        type Value = BindOptions;
                        fn expecting(
                            &self,
                            __formatter: &mut _serde::__private::Formatter,
                        ) -> _serde::__private::fmt::Result {
                            _serde::__private::Formatter::write_str(
                                __formatter,
                                "struct BindOptions",
                            )
                        }
                        #[inline]
                        fn visit_seq<__A>(
                            self,
                            mut __seq: __A,
                        ) -> _serde::__private::Result<Self::Value, __A::Error>
                        where
                            __A: _serde::de::SeqAccess<'de>,
                        {
                            let __field0 = match _serde::de::SeqAccess::next_element::<
                                Option<String>,
                            >(&mut __seq)? {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            0usize,
                                            &"struct BindOptions with 5 elements",
                                        ),
                                    );
                                }
                            };
                            let __field1 = match _serde::de::SeqAccess::next_element::<
                                Option<bool>,
                            >(&mut __seq)? {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            1usize,
                                            &"struct BindOptions with 5 elements",
                                        ),
                                    );
                                }
                            };
                            let __field2 = match _serde::de::SeqAccess::next_element::<
                                Option<bool>,
                            >(&mut __seq)? {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            2usize,
                                            &"struct BindOptions with 5 elements",
                                        ),
                                    );
                                }
                            };
                            let __field3 = match _serde::de::SeqAccess::next_element::<
                                Option<bool>,
                            >(&mut __seq)? {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            3usize,
                                            &"struct BindOptions with 5 elements",
                                        ),
                                    );
                                }
                            };
                            let __field4 = match _serde::de::SeqAccess::next_element::<
                                Option<bool>,
                            >(&mut __seq)? {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            4usize,
                                            &"struct BindOptions with 5 elements",
                                        ),
                                    );
                                }
                            };
                            _serde::__private::Ok(BindOptions {
                                propagation: __field0,
                                non_recursive: __field1,
                                create_mountpoint: __field2,
                                read_only_non_recursive: __field3,
                                read_only_force_recursive: __field4,
                            })
                        }
                        #[inline]
                        fn visit_map<__A>(
                            self,
                            mut __map: __A,
                        ) -> _serde::__private::Result<Self::Value, __A::Error>
                        where
                            __A: _serde::de::MapAccess<'de>,
                        {
                            let mut __field0: _serde::__private::Option<
                                Option<String>,
                            > = _serde::__private::None;
                            let mut __field1: _serde::__private::Option<Option<bool>> = _serde::__private::None;
                            let mut __field2: _serde::__private::Option<Option<bool>> = _serde::__private::None;
                            let mut __field3: _serde::__private::Option<Option<bool>> = _serde::__private::None;
                            let mut __field4: _serde::__private::Option<Option<bool>> = _serde::__private::None;
                            while let _serde::__private::Some(__key) = _serde::de::MapAccess::next_key::<
                                __Field,
                            >(&mut __map)? {
                                match __key {
                                    __Field::__field0 => {
                                        if _serde::__private::Option::is_some(&__field0) {
                                            return _serde::__private::Err(
                                                <__A::Error as _serde::de::Error>::duplicate_field(
                                                    "Propagation",
                                                ),
                                            );
                                        }
                                        __field0 = _serde::__private::Some(
                                            _serde::de::MapAccess::next_value::<
                                                Option<String>,
                                            >(&mut __map)?,
                                        );
                                    }
                                    __Field::__field1 => {
                                        if _serde::__private::Option::is_some(&__field1) {
                                            return _serde::__private::Err(
                                                <__A::Error as _serde::de::Error>::duplicate_field(
                                                    "NonRecursive",
                                                ),
                                            );
                                        }
                                        __field1 = _serde::__private::Some(
                                            _serde::de::MapAccess::next_value::<
                                                Option<bool>,
                                            >(&mut __map)?,
                                        );
                                    }
                                    __Field::__field2 => {
                                        if _serde::__private::Option::is_some(&__field2) {
                                            return _serde::__private::Err(
                                                <__A::Error as _serde::de::Error>::duplicate_field(
                                                    "CreateMountpoint",
                                                ),
                                            );
                                        }
                                        __field2 = _serde::__private::Some(
                                            _serde::de::MapAccess::next_value::<
                                                Option<bool>,
                                            >(&mut __map)?,
                                        );
                                    }
                                    __Field::__field3 => {
                                        if _serde::__private::Option::is_some(&__field3) {
                                            return _serde::__private::Err(
                                                <__A::Error as _serde::de::Error>::duplicate_field(
                                                    "ReadOnlyNonRecursive",
                                                ),
                                            );
                                        }
                                        __field3 = _serde::__private::Some(
                                            _serde::de::MapAccess::next_value::<
                                                Option<bool>,
                                            >(&mut __map)?,
                                        );
                                    }
                                    __Field::__field4 => {
                                        if _serde::__private::Option::is_some(&__field4) {
                                            return _serde::__private::Err(
                                                <__A::Error as _serde::de::Error>::duplicate_field(
                                                    "ReadOnlyForceRecursive",
                                                ),
                                            );
                                        }
                                        __field4 = _serde::__private::Some(
                                            _serde::de::MapAccess::next_value::<
                                                Option<bool>,
                                            >(&mut __map)?,
                                        );
                                    }
                                    _ => {
                                        let _ = _serde::de::MapAccess::next_value::<
                                            _serde::de::IgnoredAny,
                                        >(&mut __map)?;
                                    }
                                }
                            }
                            let __field0 = match __field0 {
                                _serde::__private::Some(__field0) => __field0,
                                _serde::__private::None => {
                                    _serde::__private::de::missing_field("Propagation")?
                                }
                            };
                            let __field1 = match __field1 {
                                _serde::__private::Some(__field1) => __field1,
                                _serde::__private::None => {
                                    _serde::__private::de::missing_field("NonRecursive")?
                                }
                            };
                            let __field2 = match __field2 {
                                _serde::__private::Some(__field2) => __field2,
                                _serde::__private::None => {
                                    _serde::__private::de::missing_field("CreateMountpoint")?
                                }
                            };
                            let __field3 = match __field3 {
                                _serde::__private::Some(__field3) => __field3,
                                _serde::__private::None => {
                                    _serde::__private::de::missing_field(
                                        "ReadOnlyNonRecursive",
                                    )?
                                }
                            };
                            let __field4 = match __field4 {
                                _serde::__private::Some(__field4) => __field4,
                                _serde::__private::None => {
                                    _serde::__private::de::missing_field(
                                        "ReadOnlyForceRecursive",
                                    )?
                                }
                            };
                            _serde::__private::Ok(BindOptions {
                                propagation: __field0,
                                non_recursive: __field1,
                                create_mountpoint: __field2,
                                read_only_non_recursive: __field3,
                                read_only_force_recursive: __field4,
                            })
                        }
                    }
                    #[doc(hidden)]
                    const FIELDS: &'static [&'static str] = &[
                        "Propagation",
                        "NonRecursive",
                        "CreateMountpoint",
                        "ReadOnlyNonRecursive",
                        "ReadOnlyForceRecursive",
                    ];
                    _serde::Deserializer::deserialize_struct(
                        __deserializer,
                        "BindOptions",
                        FIELDS,
                        __Visitor {
                            marker: _serde::__private::PhantomData::<BindOptions>,
                            lifetime: _serde::__private::PhantomData,
                        },
                    )
                }
            }
        };
        #[serde(rename_all = "PascalCase")]
        pub struct VolumeOptions {
            #[serde(skip_serializing_if = "Option::is_none")]
            pub no_copy: Option<bool>,
            #[serde(skip_serializing_if = "Option::is_none")]
            pub labels: Option<Option<HashMap<String, String>>>,
            #[serde(skip_serializing_if = "Option::is_none")]
            pub driver_config: Option<DriverConfig>,
        }
        #[automatically_derived]
        impl ::core::clone::Clone for VolumeOptions {
            #[inline]
            fn clone(&self) -> VolumeOptions {
                VolumeOptions {
                    no_copy: ::core::clone::Clone::clone(&self.no_copy),
                    labels: ::core::clone::Clone::clone(&self.labels),
                    driver_config: ::core::clone::Clone::clone(&self.driver_config),
                }
            }
        }
        #[automatically_derived]
        impl ::core::fmt::Debug for VolumeOptions {
            #[inline]
            fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                ::core::fmt::Formatter::debug_struct_field3_finish(
                    f,
                    "VolumeOptions",
                    "no_copy",
                    &self.no_copy,
                    "labels",
                    &self.labels,
                    "driver_config",
                    &&self.driver_config,
                )
            }
        }
        #[doc(hidden)]
        #[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
        const _: () = {
            #[allow(unused_extern_crates, clippy::useless_attribute)]
            extern crate serde as _serde;
            #[automatically_derived]
            impl _serde::Serialize for VolumeOptions {
                fn serialize<__S>(
                    &self,
                    __serializer: __S,
                ) -> _serde::__private::Result<__S::Ok, __S::Error>
                where
                    __S: _serde::Serializer,
                {
                    let mut __serde_state = _serde::Serializer::serialize_struct(
                        __serializer,
                        "VolumeOptions",
                        false as usize
                            + if Option::is_none(&self.no_copy) { 0 } else { 1 }
                            + if Option::is_none(&self.labels) { 0 } else { 1 }
                            + if Option::is_none(&self.driver_config) { 0 } else { 1 },
                    )?;
                    if !Option::is_none(&self.no_copy) {
                        _serde::ser::SerializeStruct::serialize_field(
                            &mut __serde_state,
                            "NoCopy",
                            &self.no_copy,
                        )?;
                    } else {
                        _serde::ser::SerializeStruct::skip_field(
                            &mut __serde_state,
                            "NoCopy",
                        )?;
                    }
                    if !Option::is_none(&self.labels) {
                        _serde::ser::SerializeStruct::serialize_field(
                            &mut __serde_state,
                            "Labels",
                            &self.labels,
                        )?;
                    } else {
                        _serde::ser::SerializeStruct::skip_field(
                            &mut __serde_state,
                            "Labels",
                        )?;
                    }
                    if !Option::is_none(&self.driver_config) {
                        _serde::ser::SerializeStruct::serialize_field(
                            &mut __serde_state,
                            "DriverConfig",
                            &self.driver_config,
                        )?;
                    } else {
                        _serde::ser::SerializeStruct::skip_field(
                            &mut __serde_state,
                            "DriverConfig",
                        )?;
                    }
                    _serde::ser::SerializeStruct::end(__serde_state)
                }
            }
        };
        #[doc(hidden)]
        #[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
        const _: () = {
            #[allow(unused_extern_crates, clippy::useless_attribute)]
            extern crate serde as _serde;
            #[automatically_derived]
            impl<'de> _serde::Deserialize<'de> for VolumeOptions {
                fn deserialize<__D>(
                    __deserializer: __D,
                ) -> _serde::__private::Result<Self, __D::Error>
                where
                    __D: _serde::Deserializer<'de>,
                {
                    #[allow(non_camel_case_types)]
                    #[doc(hidden)]
                    enum __Field {
                        __field0,
                        __field1,
                        __field2,
                        __ignore,
                    }
                    #[doc(hidden)]
                    struct __FieldVisitor;
                    impl<'de> _serde::de::Visitor<'de> for __FieldVisitor {
                        type Value = __Field;
                        fn expecting(
                            &self,
                            __formatter: &mut _serde::__private::Formatter,
                        ) -> _serde::__private::fmt::Result {
                            _serde::__private::Formatter::write_str(
                                __formatter,
                                "field identifier",
                            )
                        }
                        fn visit_u64<__E>(
                            self,
                            __value: u64,
                        ) -> _serde::__private::Result<Self::Value, __E>
                        where
                            __E: _serde::de::Error,
                        {
                            match __value {
                                0u64 => _serde::__private::Ok(__Field::__field0),
                                1u64 => _serde::__private::Ok(__Field::__field1),
                                2u64 => _serde::__private::Ok(__Field::__field2),
                                _ => _serde::__private::Ok(__Field::__ignore),
                            }
                        }
                        fn visit_str<__E>(
                            self,
                            __value: &str,
                        ) -> _serde::__private::Result<Self::Value, __E>
                        where
                            __E: _serde::de::Error,
                        {
                            match __value {
                                "NoCopy" => _serde::__private::Ok(__Field::__field0),
                                "Labels" => _serde::__private::Ok(__Field::__field1),
                                "DriverConfig" => _serde::__private::Ok(__Field::__field2),
                                _ => _serde::__private::Ok(__Field::__ignore),
                            }
                        }
                        fn visit_bytes<__E>(
                            self,
                            __value: &[u8],
                        ) -> _serde::__private::Result<Self::Value, __E>
                        where
                            __E: _serde::de::Error,
                        {
                            match __value {
                                b"NoCopy" => _serde::__private::Ok(__Field::__field0),
                                b"Labels" => _serde::__private::Ok(__Field::__field1),
                                b"DriverConfig" => _serde::__private::Ok(__Field::__field2),
                                _ => _serde::__private::Ok(__Field::__ignore),
                            }
                        }
                    }
                    impl<'de> _serde::Deserialize<'de> for __Field {
                        #[inline]
                        fn deserialize<__D>(
                            __deserializer: __D,
                        ) -> _serde::__private::Result<Self, __D::Error>
                        where
                            __D: _serde::Deserializer<'de>,
                        {
                            _serde::Deserializer::deserialize_identifier(
                                __deserializer,
                                __FieldVisitor,
                            )
                        }
                    }
                    #[doc(hidden)]
                    struct __Visitor<'de> {
                        marker: _serde::__private::PhantomData<VolumeOptions>,
                        lifetime: _serde::__private::PhantomData<&'de ()>,
                    }
                    impl<'de> _serde::de::Visitor<'de> for __Visitor<'de> {
                        type Value = VolumeOptions;
                        fn expecting(
                            &self,
                            __formatter: &mut _serde::__private::Formatter,
                        ) -> _serde::__private::fmt::Result {
                            _serde::__private::Formatter::write_str(
                                __formatter,
                                "struct VolumeOptions",
                            )
                        }
                        #[inline]
                        fn visit_seq<__A>(
                            self,
                            mut __seq: __A,
                        ) -> _serde::__private::Result<Self::Value, __A::Error>
                        where
                            __A: _serde::de::SeqAccess<'de>,
                        {
                            let __field0 = match _serde::de::SeqAccess::next_element::<
                                Option<bool>,
                            >(&mut __seq)? {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            0usize,
                                            &"struct VolumeOptions with 3 elements",
                                        ),
                                    );
                                }
                            };
                            let __field1 = match _serde::de::SeqAccess::next_element::<
                                Option<Option<HashMap<String, String>>>,
                            >(&mut __seq)? {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            1usize,
                                            &"struct VolumeOptions with 3 elements",
                                        ),
                                    );
                                }
                            };
                            let __field2 = match _serde::de::SeqAccess::next_element::<
                                Option<DriverConfig>,
                            >(&mut __seq)? {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            2usize,
                                            &"struct VolumeOptions with 3 elements",
                                        ),
                                    );
                                }
                            };
                            _serde::__private::Ok(VolumeOptions {
                                no_copy: __field0,
                                labels: __field1,
                                driver_config: __field2,
                            })
                        }
                        #[inline]
                        fn visit_map<__A>(
                            self,
                            mut __map: __A,
                        ) -> _serde::__private::Result<Self::Value, __A::Error>
                        where
                            __A: _serde::de::MapAccess<'de>,
                        {
                            let mut __field0: _serde::__private::Option<Option<bool>> = _serde::__private::None;
                            let mut __field1: _serde::__private::Option<
                                Option<Option<HashMap<String, String>>>,
                            > = _serde::__private::None;
                            let mut __field2: _serde::__private::Option<
                                Option<DriverConfig>,
                            > = _serde::__private::None;
                            while let _serde::__private::Some(__key) = _serde::de::MapAccess::next_key::<
                                __Field,
                            >(&mut __map)? {
                                match __key {
                                    __Field::__field0 => {
                                        if _serde::__private::Option::is_some(&__field0) {
                                            return _serde::__private::Err(
                                                <__A::Error as _serde::de::Error>::duplicate_field("NoCopy"),
                                            );
                                        }
                                        __field0 = _serde::__private::Some(
                                            _serde::de::MapAccess::next_value::<
                                                Option<bool>,
                                            >(&mut __map)?,
                                        );
                                    }
                                    __Field::__field1 => {
                                        if _serde::__private::Option::is_some(&__field1) {
                                            return _serde::__private::Err(
                                                <__A::Error as _serde::de::Error>::duplicate_field("Labels"),
                                            );
                                        }
                                        __field1 = _serde::__private::Some(
                                            _serde::de::MapAccess::next_value::<
                                                Option<Option<HashMap<String, String>>>,
                                            >(&mut __map)?,
                                        );
                                    }
                                    __Field::__field2 => {
                                        if _serde::__private::Option::is_some(&__field2) {
                                            return _serde::__private::Err(
                                                <__A::Error as _serde::de::Error>::duplicate_field(
                                                    "DriverConfig",
                                                ),
                                            );
                                        }
                                        __field2 = _serde::__private::Some(
                                            _serde::de::MapAccess::next_value::<
                                                Option<DriverConfig>,
                                            >(&mut __map)?,
                                        );
                                    }
                                    _ => {
                                        let _ = _serde::de::MapAccess::next_value::<
                                            _serde::de::IgnoredAny,
                                        >(&mut __map)?;
                                    }
                                }
                            }
                            let __field0 = match __field0 {
                                _serde::__private::Some(__field0) => __field0,
                                _serde::__private::None => {
                                    _serde::__private::de::missing_field("NoCopy")?
                                }
                            };
                            let __field1 = match __field1 {
                                _serde::__private::Some(__field1) => __field1,
                                _serde::__private::None => {
                                    _serde::__private::de::missing_field("Labels")?
                                }
                            };
                            let __field2 = match __field2 {
                                _serde::__private::Some(__field2) => __field2,
                                _serde::__private::None => {
                                    _serde::__private::de::missing_field("DriverConfig")?
                                }
                            };
                            _serde::__private::Ok(VolumeOptions {
                                no_copy: __field0,
                                labels: __field1,
                                driver_config: __field2,
                            })
                        }
                    }
                    #[doc(hidden)]
                    const FIELDS: &'static [&'static str] = &[
                        "NoCopy",
                        "Labels",
                        "DriverConfig",
                    ];
                    _serde::Deserializer::deserialize_struct(
                        __deserializer,
                        "VolumeOptions",
                        FIELDS,
                        __Visitor {
                            marker: _serde::__private::PhantomData::<VolumeOptions>,
                            lifetime: _serde::__private::PhantomData,
                        },
                    )
                }
            }
        };
        #[serde(rename_all = "PascalCase")]
        pub struct DriverConfig {
            #[serde(skip_serializing_if = "Option::is_none")]
            pub name: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none")]
            pub options: Option<HashMap<String, String>>,
        }
        #[automatically_derived]
        impl ::core::clone::Clone for DriverConfig {
            #[inline]
            fn clone(&self) -> DriverConfig {
                DriverConfig {
                    name: ::core::clone::Clone::clone(&self.name),
                    options: ::core::clone::Clone::clone(&self.options),
                }
            }
        }
        #[automatically_derived]
        impl ::core::fmt::Debug for DriverConfig {
            #[inline]
            fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                ::core::fmt::Formatter::debug_struct_field2_finish(
                    f,
                    "DriverConfig",
                    "name",
                    &self.name,
                    "options",
                    &&self.options,
                )
            }
        }
        #[doc(hidden)]
        #[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
        const _: () = {
            #[allow(unused_extern_crates, clippy::useless_attribute)]
            extern crate serde as _serde;
            #[automatically_derived]
            impl _serde::Serialize for DriverConfig {
                fn serialize<__S>(
                    &self,
                    __serializer: __S,
                ) -> _serde::__private::Result<__S::Ok, __S::Error>
                where
                    __S: _serde::Serializer,
                {
                    let mut __serde_state = _serde::Serializer::serialize_struct(
                        __serializer,
                        "DriverConfig",
                        false as usize + if Option::is_none(&self.name) { 0 } else { 1 }
                            + if Option::is_none(&self.options) { 0 } else { 1 },
                    )?;
                    if !Option::is_none(&self.name) {
                        _serde::ser::SerializeStruct::serialize_field(
                            &mut __serde_state,
                            "Name",
                            &self.name,
                        )?;
                    } else {
                        _serde::ser::SerializeStruct::skip_field(
                            &mut __serde_state,
                            "Name",
                        )?;
                    }
                    if !Option::is_none(&self.options) {
                        _serde::ser::SerializeStruct::serialize_field(
                            &mut __serde_state,
                            "Options",
                            &self.options,
                        )?;
                    } else {
                        _serde::ser::SerializeStruct::skip_field(
                            &mut __serde_state,
                            "Options",
                        )?;
                    }
                    _serde::ser::SerializeStruct::end(__serde_state)
                }
            }
        };
        #[doc(hidden)]
        #[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
        const _: () = {
            #[allow(unused_extern_crates, clippy::useless_attribute)]
            extern crate serde as _serde;
            #[automatically_derived]
            impl<'de> _serde::Deserialize<'de> for DriverConfig {
                fn deserialize<__D>(
                    __deserializer: __D,
                ) -> _serde::__private::Result<Self, __D::Error>
                where
                    __D: _serde::Deserializer<'de>,
                {
                    #[allow(non_camel_case_types)]
                    #[doc(hidden)]
                    enum __Field {
                        __field0,
                        __field1,
                        __ignore,
                    }
                    #[doc(hidden)]
                    struct __FieldVisitor;
                    impl<'de> _serde::de::Visitor<'de> for __FieldVisitor {
                        type Value = __Field;
                        fn expecting(
                            &self,
                            __formatter: &mut _serde::__private::Formatter,
                        ) -> _serde::__private::fmt::Result {
                            _serde::__private::Formatter::write_str(
                                __formatter,
                                "field identifier",
                            )
                        }
                        fn visit_u64<__E>(
                            self,
                            __value: u64,
                        ) -> _serde::__private::Result<Self::Value, __E>
                        where
                            __E: _serde::de::Error,
                        {
                            match __value {
                                0u64 => _serde::__private::Ok(__Field::__field0),
                                1u64 => _serde::__private::Ok(__Field::__field1),
                                _ => _serde::__private::Ok(__Field::__ignore),
                            }
                        }
                        fn visit_str<__E>(
                            self,
                            __value: &str,
                        ) -> _serde::__private::Result<Self::Value, __E>
                        where
                            __E: _serde::de::Error,
                        {
                            match __value {
                                "Name" => _serde::__private::Ok(__Field::__field0),
                                "Options" => _serde::__private::Ok(__Field::__field1),
                                _ => _serde::__private::Ok(__Field::__ignore),
                            }
                        }
                        fn visit_bytes<__E>(
                            self,
                            __value: &[u8],
                        ) -> _serde::__private::Result<Self::Value, __E>
                        where
                            __E: _serde::de::Error,
                        {
                            match __value {
                                b"Name" => _serde::__private::Ok(__Field::__field0),
                                b"Options" => _serde::__private::Ok(__Field::__field1),
                                _ => _serde::__private::Ok(__Field::__ignore),
                            }
                        }
                    }
                    impl<'de> _serde::Deserialize<'de> for __Field {
                        #[inline]
                        fn deserialize<__D>(
                            __deserializer: __D,
                        ) -> _serde::__private::Result<Self, __D::Error>
                        where
                            __D: _serde::Deserializer<'de>,
                        {
                            _serde::Deserializer::deserialize_identifier(
                                __deserializer,
                                __FieldVisitor,
                            )
                        }
                    }
                    #[doc(hidden)]
                    struct __Visitor<'de> {
                        marker: _serde::__private::PhantomData<DriverConfig>,
                        lifetime: _serde::__private::PhantomData<&'de ()>,
                    }
                    impl<'de> _serde::de::Visitor<'de> for __Visitor<'de> {
                        type Value = DriverConfig;
                        fn expecting(
                            &self,
                            __formatter: &mut _serde::__private::Formatter,
                        ) -> _serde::__private::fmt::Result {
                            _serde::__private::Formatter::write_str(
                                __formatter,
                                "struct DriverConfig",
                            )
                        }
                        #[inline]
                        fn visit_seq<__A>(
                            self,
                            mut __seq: __A,
                        ) -> _serde::__private::Result<Self::Value, __A::Error>
                        where
                            __A: _serde::de::SeqAccess<'de>,
                        {
                            let __field0 = match _serde::de::SeqAccess::next_element::<
                                Option<String>,
                            >(&mut __seq)? {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            0usize,
                                            &"struct DriverConfig with 2 elements",
                                        ),
                                    );
                                }
                            };
                            let __field1 = match _serde::de::SeqAccess::next_element::<
                                Option<HashMap<String, String>>,
                            >(&mut __seq)? {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            1usize,
                                            &"struct DriverConfig with 2 elements",
                                        ),
                                    );
                                }
                            };
                            _serde::__private::Ok(DriverConfig {
                                name: __field0,
                                options: __field1,
                            })
                        }
                        #[inline]
                        fn visit_map<__A>(
                            self,
                            mut __map: __A,
                        ) -> _serde::__private::Result<Self::Value, __A::Error>
                        where
                            __A: _serde::de::MapAccess<'de>,
                        {
                            let mut __field0: _serde::__private::Option<
                                Option<String>,
                            > = _serde::__private::None;
                            let mut __field1: _serde::__private::Option<
                                Option<HashMap<String, String>>,
                            > = _serde::__private::None;
                            while let _serde::__private::Some(__key) = _serde::de::MapAccess::next_key::<
                                __Field,
                            >(&mut __map)? {
                                match __key {
                                    __Field::__field0 => {
                                        if _serde::__private::Option::is_some(&__field0) {
                                            return _serde::__private::Err(
                                                <__A::Error as _serde::de::Error>::duplicate_field("Name"),
                                            );
                                        }
                                        __field0 = _serde::__private::Some(
                                            _serde::de::MapAccess::next_value::<
                                                Option<String>,
                                            >(&mut __map)?,
                                        );
                                    }
                                    __Field::__field1 => {
                                        if _serde::__private::Option::is_some(&__field1) {
                                            return _serde::__private::Err(
                                                <__A::Error as _serde::de::Error>::duplicate_field(
                                                    "Options",
                                                ),
                                            );
                                        }
                                        __field1 = _serde::__private::Some(
                                            _serde::de::MapAccess::next_value::<
                                                Option<HashMap<String, String>>,
                                            >(&mut __map)?,
                                        );
                                    }
                                    _ => {
                                        let _ = _serde::de::MapAccess::next_value::<
                                            _serde::de::IgnoredAny,
                                        >(&mut __map)?;
                                    }
                                }
                            }
                            let __field0 = match __field0 {
                                _serde::__private::Some(__field0) => __field0,
                                _serde::__private::None => {
                                    _serde::__private::de::missing_field("Name")?
                                }
                            };
                            let __field1 = match __field1 {
                                _serde::__private::Some(__field1) => __field1,
                                _serde::__private::None => {
                                    _serde::__private::de::missing_field("Options")?
                                }
                            };
                            _serde::__private::Ok(DriverConfig {
                                name: __field0,
                                options: __field1,
                            })
                        }
                    }
                    #[doc(hidden)]
                    const FIELDS: &'static [&'static str] = &["Name", "Options"];
                    _serde::Deserializer::deserialize_struct(
                        __deserializer,
                        "DriverConfig",
                        FIELDS,
                        __Visitor {
                            marker: _serde::__private::PhantomData::<DriverConfig>,
                            lifetime: _serde::__private::PhantomData,
                        },
                    )
                }
            }
        };
        #[serde(rename_all = "PascalCase")]
        pub struct TmpfsOptions {
            #[serde(skip_serializing_if = "Option::is_none")]
            pub size_bytes: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none")]
            pub mode: Option<i64>,
        }
        #[automatically_derived]
        impl ::core::clone::Clone for TmpfsOptions {
            #[inline]
            fn clone(&self) -> TmpfsOptions {
                TmpfsOptions {
                    size_bytes: ::core::clone::Clone::clone(&self.size_bytes),
                    mode: ::core::clone::Clone::clone(&self.mode),
                }
            }
        }
        #[automatically_derived]
        impl ::core::fmt::Debug for TmpfsOptions {
            #[inline]
            fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                ::core::fmt::Formatter::debug_struct_field2_finish(
                    f,
                    "TmpfsOptions",
                    "size_bytes",
                    &self.size_bytes,
                    "mode",
                    &&self.mode,
                )
            }
        }
        #[doc(hidden)]
        #[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
        const _: () = {
            #[allow(unused_extern_crates, clippy::useless_attribute)]
            extern crate serde as _serde;
            #[automatically_derived]
            impl _serde::Serialize for TmpfsOptions {
                fn serialize<__S>(
                    &self,
                    __serializer: __S,
                ) -> _serde::__private::Result<__S::Ok, __S::Error>
                where
                    __S: _serde::Serializer,
                {
                    let mut __serde_state = _serde::Serializer::serialize_struct(
                        __serializer,
                        "TmpfsOptions",
                        false as usize
                            + if Option::is_none(&self.size_bytes) { 0 } else { 1 }
                            + if Option::is_none(&self.mode) { 0 } else { 1 },
                    )?;
                    if !Option::is_none(&self.size_bytes) {
                        _serde::ser::SerializeStruct::serialize_field(
                            &mut __serde_state,
                            "SizeBytes",
                            &self.size_bytes,
                        )?;
                    } else {
                        _serde::ser::SerializeStruct::skip_field(
                            &mut __serde_state,
                            "SizeBytes",
                        )?;
                    }
                    if !Option::is_none(&self.mode) {
                        _serde::ser::SerializeStruct::serialize_field(
                            &mut __serde_state,
                            "Mode",
                            &self.mode,
                        )?;
                    } else {
                        _serde::ser::SerializeStruct::skip_field(
                            &mut __serde_state,
                            "Mode",
                        )?;
                    }
                    _serde::ser::SerializeStruct::end(__serde_state)
                }
            }
        };
        #[doc(hidden)]
        #[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
        const _: () = {
            #[allow(unused_extern_crates, clippy::useless_attribute)]
            extern crate serde as _serde;
            #[automatically_derived]
            impl<'de> _serde::Deserialize<'de> for TmpfsOptions {
                fn deserialize<__D>(
                    __deserializer: __D,
                ) -> _serde::__private::Result<Self, __D::Error>
                where
                    __D: _serde::Deserializer<'de>,
                {
                    #[allow(non_camel_case_types)]
                    #[doc(hidden)]
                    enum __Field {
                        __field0,
                        __field1,
                        __ignore,
                    }
                    #[doc(hidden)]
                    struct __FieldVisitor;
                    impl<'de> _serde::de::Visitor<'de> for __FieldVisitor {
                        type Value = __Field;
                        fn expecting(
                            &self,
                            __formatter: &mut _serde::__private::Formatter,
                        ) -> _serde::__private::fmt::Result {
                            _serde::__private::Formatter::write_str(
                                __formatter,
                                "field identifier",
                            )
                        }
                        fn visit_u64<__E>(
                            self,
                            __value: u64,
                        ) -> _serde::__private::Result<Self::Value, __E>
                        where
                            __E: _serde::de::Error,
                        {
                            match __value {
                                0u64 => _serde::__private::Ok(__Field::__field0),
                                1u64 => _serde::__private::Ok(__Field::__field1),
                                _ => _serde::__private::Ok(__Field::__ignore),
                            }
                        }
                        fn visit_str<__E>(
                            self,
                            __value: &str,
                        ) -> _serde::__private::Result<Self::Value, __E>
                        where
                            __E: _serde::de::Error,
                        {
                            match __value {
                                "SizeBytes" => _serde::__private::Ok(__Field::__field0),
                                "Mode" => _serde::__private::Ok(__Field::__field1),
                                _ => _serde::__private::Ok(__Field::__ignore),
                            }
                        }
                        fn visit_bytes<__E>(
                            self,
                            __value: &[u8],
                        ) -> _serde::__private::Result<Self::Value, __E>
                        where
                            __E: _serde::de::Error,
                        {
                            match __value {
                                b"SizeBytes" => _serde::__private::Ok(__Field::__field0),
                                b"Mode" => _serde::__private::Ok(__Field::__field1),
                                _ => _serde::__private::Ok(__Field::__ignore),
                            }
                        }
                    }
                    impl<'de> _serde::Deserialize<'de> for __Field {
                        #[inline]
                        fn deserialize<__D>(
                            __deserializer: __D,
                        ) -> _serde::__private::Result<Self, __D::Error>
                        where
                            __D: _serde::Deserializer<'de>,
                        {
                            _serde::Deserializer::deserialize_identifier(
                                __deserializer,
                                __FieldVisitor,
                            )
                        }
                    }
                    #[doc(hidden)]
                    struct __Visitor<'de> {
                        marker: _serde::__private::PhantomData<TmpfsOptions>,
                        lifetime: _serde::__private::PhantomData<&'de ()>,
                    }
                    impl<'de> _serde::de::Visitor<'de> for __Visitor<'de> {
                        type Value = TmpfsOptions;
                        fn expecting(
                            &self,
                            __formatter: &mut _serde::__private::Formatter,
                        ) -> _serde::__private::fmt::Result {
                            _serde::__private::Formatter::write_str(
                                __formatter,
                                "struct TmpfsOptions",
                            )
                        }
                        #[inline]
                        fn visit_seq<__A>(
                            self,
                            mut __seq: __A,
                        ) -> _serde::__private::Result<Self::Value, __A::Error>
                        where
                            __A: _serde::de::SeqAccess<'de>,
                        {
                            let __field0 = match _serde::de::SeqAccess::next_element::<
                                Option<i64>,
                            >(&mut __seq)? {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            0usize,
                                            &"struct TmpfsOptions with 2 elements",
                                        ),
                                    );
                                }
                            };
                            let __field1 = match _serde::de::SeqAccess::next_element::<
                                Option<i64>,
                            >(&mut __seq)? {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            1usize,
                                            &"struct TmpfsOptions with 2 elements",
                                        ),
                                    );
                                }
                            };
                            _serde::__private::Ok(TmpfsOptions {
                                size_bytes: __field0,
                                mode: __field1,
                            })
                        }
                        #[inline]
                        fn visit_map<__A>(
                            self,
                            mut __map: __A,
                        ) -> _serde::__private::Result<Self::Value, __A::Error>
                        where
                            __A: _serde::de::MapAccess<'de>,
                        {
                            let mut __field0: _serde::__private::Option<Option<i64>> = _serde::__private::None;
                            let mut __field1: _serde::__private::Option<Option<i64>> = _serde::__private::None;
                            while let _serde::__private::Some(__key) = _serde::de::MapAccess::next_key::<
                                __Field,
                            >(&mut __map)? {
                                match __key {
                                    __Field::__field0 => {
                                        if _serde::__private::Option::is_some(&__field0) {
                                            return _serde::__private::Err(
                                                <__A::Error as _serde::de::Error>::duplicate_field(
                                                    "SizeBytes",
                                                ),
                                            );
                                        }
                                        __field0 = _serde::__private::Some(
                                            _serde::de::MapAccess::next_value::<
                                                Option<i64>,
                                            >(&mut __map)?,
                                        );
                                    }
                                    __Field::__field1 => {
                                        if _serde::__private::Option::is_some(&__field1) {
                                            return _serde::__private::Err(
                                                <__A::Error as _serde::de::Error>::duplicate_field("Mode"),
                                            );
                                        }
                                        __field1 = _serde::__private::Some(
                                            _serde::de::MapAccess::next_value::<
                                                Option<i64>,
                                            >(&mut __map)?,
                                        );
                                    }
                                    _ => {
                                        let _ = _serde::de::MapAccess::next_value::<
                                            _serde::de::IgnoredAny,
                                        >(&mut __map)?;
                                    }
                                }
                            }
                            let __field0 = match __field0 {
                                _serde::__private::Some(__field0) => __field0,
                                _serde::__private::None => {
                                    _serde::__private::de::missing_field("SizeBytes")?
                                }
                            };
                            let __field1 = match __field1 {
                                _serde::__private::Some(__field1) => __field1,
                                _serde::__private::None => {
                                    _serde::__private::de::missing_field("Mode")?
                                }
                            };
                            _serde::__private::Ok(TmpfsOptions {
                                size_bytes: __field0,
                                mode: __field1,
                            })
                        }
                    }
                    #[doc(hidden)]
                    const FIELDS: &'static [&'static str] = &["SizeBytes", "Mode"];
                    _serde::Deserializer::deserialize_struct(
                        __deserializer,
                        "TmpfsOptions",
                        FIELDS,
                        __Visitor {
                            marker: _serde::__private::PhantomData::<TmpfsOptions>,
                            lifetime: _serde::__private::PhantomData,
                        },
                    )
                }
            }
        };
        #[serde(rename_all = "PascalCase")]
        pub struct State {
            #[serde(skip_serializing_if = "Option::is_none")]
            pub status: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none")]
            pub running: Option<bool>,
            #[serde(skip_serializing_if = "Option::is_none")]
            pub paused: Option<bool>,
            #[serde(skip_serializing_if = "Option::is_none")]
            pub restarting: Option<bool>,
            #[serde(rename = "OOMKilled")]
            #[serde(skip_serializing_if = "Option::is_none")]
            pub oom_killed: Option<bool>,
            #[serde(skip_serializing_if = "Option::is_none")]
            pub dead: Option<bool>,
            #[serde(skip_serializing_if = "Option::is_none")]
            pub pid: Option<u64>,
            #[serde(skip_serializing_if = "Option::is_none")]
            pub exit_code: Option<u64>,
            #[serde(skip_serializing_if = "Option::is_none")]
            pub error: Option<String>,
            #[cfg(feature = "chrono")]
            #[serde(skip_serializing_if = "Option::is_none")]
            pub started_at: Option<DateTime<Utc>>,
            #[cfg(feature = "chrono")]
            #[serde(skip_serializing_if = "Option::is_none")]
            pub finished_at: Option<DateTime<Utc>>,
            #[serde(skip_serializing_if = "Option::is_none")]
            pub health: Option<Health>,
        }
        #[automatically_derived]
        impl ::core::clone::Clone for State {
            #[inline]
            fn clone(&self) -> State {
                State {
                    status: ::core::clone::Clone::clone(&self.status),
                    running: ::core::clone::Clone::clone(&self.running),
                    paused: ::core::clone::Clone::clone(&self.paused),
                    restarting: ::core::clone::Clone::clone(&self.restarting),
                    oom_killed: ::core::clone::Clone::clone(&self.oom_killed),
                    dead: ::core::clone::Clone::clone(&self.dead),
                    pid: ::core::clone::Clone::clone(&self.pid),
                    exit_code: ::core::clone::Clone::clone(&self.exit_code),
                    error: ::core::clone::Clone::clone(&self.error),
                    started_at: ::core::clone::Clone::clone(&self.started_at),
                    finished_at: ::core::clone::Clone::clone(&self.finished_at),
                    health: ::core::clone::Clone::clone(&self.health),
                }
            }
        }
        #[automatically_derived]
        impl ::core::fmt::Debug for State {
            #[inline]
            fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                let names: &'static _ = &[
                    "status",
                    "running",
                    "paused",
                    "restarting",
                    "oom_killed",
                    "dead",
                    "pid",
                    "exit_code",
                    "error",
                    "started_at",
                    "finished_at",
                    "health",
                ];
                let values: &[&dyn ::core::fmt::Debug] = &[
                    &self.status,
                    &self.running,
                    &self.paused,
                    &self.restarting,
                    &self.oom_killed,
                    &self.dead,
                    &self.pid,
                    &self.exit_code,
                    &self.error,
                    &self.started_at,
                    &self.finished_at,
                    &&self.health,
                ];
                ::core::fmt::Formatter::debug_struct_fields_finish(
                    f,
                    "State",
                    names,
                    values,
                )
            }
        }
        #[doc(hidden)]
        #[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
        const _: () = {
            #[allow(unused_extern_crates, clippy::useless_attribute)]
            extern crate serde as _serde;
            #[automatically_derived]
            impl _serde::Serialize for State {
                fn serialize<__S>(
                    &self,
                    __serializer: __S,
                ) -> _serde::__private::Result<__S::Ok, __S::Error>
                where
                    __S: _serde::Serializer,
                {
                    let mut __serde_state = _serde::Serializer::serialize_struct(
                        __serializer,
                        "State",
                        false as usize
                            + if Option::is_none(&self.status) { 0 } else { 1 }
                            + if Option::is_none(&self.running) { 0 } else { 1 }
                            + if Option::is_none(&self.paused) { 0 } else { 1 }
                            + if Option::is_none(&self.restarting) { 0 } else { 1 }
                            + if Option::is_none(&self.oom_killed) { 0 } else { 1 }
                            + if Option::is_none(&self.dead) { 0 } else { 1 }
                            + if Option::is_none(&self.pid) { 0 } else { 1 }
                            + if Option::is_none(&self.exit_code) { 0 } else { 1 }
                            + if Option::is_none(&self.error) { 0 } else { 1 }
                            + if Option::is_none(&self.started_at) { 0 } else { 1 }
                            + if Option::is_none(&self.finished_at) { 0 } else { 1 }
                            + if Option::is_none(&self.health) { 0 } else { 1 },
                    )?;
                    if !Option::is_none(&self.status) {
                        _serde::ser::SerializeStruct::serialize_field(
                            &mut __serde_state,
                            "Status",
                            &self.status,
                        )?;
                    } else {
                        _serde::ser::SerializeStruct::skip_field(
                            &mut __serde_state,
                            "Status",
                        )?;
                    }
                    if !Option::is_none(&self.running) {
                        _serde::ser::SerializeStruct::serialize_field(
                            &mut __serde_state,
                            "Running",
                            &self.running,
                        )?;
                    } else {
                        _serde::ser::SerializeStruct::skip_field(
                            &mut __serde_state,
                            "Running",
                        )?;
                    }
                    if !Option::is_none(&self.paused) {
                        _serde::ser::SerializeStruct::serialize_field(
                            &mut __serde_state,
                            "Paused",
                            &self.paused,
                        )?;
                    } else {
                        _serde::ser::SerializeStruct::skip_field(
                            &mut __serde_state,
                            "Paused",
                        )?;
                    }
                    if !Option::is_none(&self.restarting) {
                        _serde::ser::SerializeStruct::serialize_field(
                            &mut __serde_state,
                            "Restarting",
                            &self.restarting,
                        )?;
                    } else {
                        _serde::ser::SerializeStruct::skip_field(
                            &mut __serde_state,
                            "Restarting",
                        )?;
                    }
                    if !Option::is_none(&self.oom_killed) {
                        _serde::ser::SerializeStruct::serialize_field(
                            &mut __serde_state,
                            "OOMKilled",
                            &self.oom_killed,
                        )?;
                    } else {
                        _serde::ser::SerializeStruct::skip_field(
                            &mut __serde_state,
                            "OOMKilled",
                        )?;
                    }
                    if !Option::is_none(&self.dead) {
                        _serde::ser::SerializeStruct::serialize_field(
                            &mut __serde_state,
                            "Dead",
                            &self.dead,
                        )?;
                    } else {
                        _serde::ser::SerializeStruct::skip_field(
                            &mut __serde_state,
                            "Dead",
                        )?;
                    }
                    if !Option::is_none(&self.pid) {
                        _serde::ser::SerializeStruct::serialize_field(
                            &mut __serde_state,
                            "Pid",
                            &self.pid,
                        )?;
                    } else {
                        _serde::ser::SerializeStruct::skip_field(
                            &mut __serde_state,
                            "Pid",
                        )?;
                    }
                    if !Option::is_none(&self.exit_code) {
                        _serde::ser::SerializeStruct::serialize_field(
                            &mut __serde_state,
                            "ExitCode",
                            &self.exit_code,
                        )?;
                    } else {
                        _serde::ser::SerializeStruct::skip_field(
                            &mut __serde_state,
                            "ExitCode",
                        )?;
                    }
                    if !Option::is_none(&self.error) {
                        _serde::ser::SerializeStruct::serialize_field(
                            &mut __serde_state,
                            "Error",
                            &self.error,
                        )?;
                    } else {
                        _serde::ser::SerializeStruct::skip_field(
                            &mut __serde_state,
                            "Error",
                        )?;
                    }
                    if !Option::is_none(&self.started_at) {
                        _serde::ser::SerializeStruct::serialize_field(
                            &mut __serde_state,
                            "StartedAt",
                            &self.started_at,
                        )?;
                    } else {
                        _serde::ser::SerializeStruct::skip_field(
                            &mut __serde_state,
                            "StartedAt",
                        )?;
                    }
                    if !Option::is_none(&self.finished_at) {
                        _serde::ser::SerializeStruct::serialize_field(
                            &mut __serde_state,
                            "FinishedAt",
                            &self.finished_at,
                        )?;
                    } else {
                        _serde::ser::SerializeStruct::skip_field(
                            &mut __serde_state,
                            "FinishedAt",
                        )?;
                    }
                    if !Option::is_none(&self.health) {
                        _serde::ser::SerializeStruct::serialize_field(
                            &mut __serde_state,
                            "Health",
                            &self.health,
                        )?;
                    } else {
                        _serde::ser::SerializeStruct::skip_field(
                            &mut __serde_state,
                            "Health",
                        )?;
                    }
                    _serde::ser::SerializeStruct::end(__serde_state)
                }
            }
        };
        #[doc(hidden)]
        #[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
        const _: () = {
            #[allow(unused_extern_crates, clippy::useless_attribute)]
            extern crate serde as _serde;
            #[automatically_derived]
            impl<'de> _serde::Deserialize<'de> for State {
                fn deserialize<__D>(
                    __deserializer: __D,
                ) -> _serde::__private::Result<Self, __D::Error>
                where
                    __D: _serde::Deserializer<'de>,
                {
                    #[allow(non_camel_case_types)]
                    #[doc(hidden)]
                    enum __Field {
                        __field0,
                        __field1,
                        __field2,
                        __field3,
                        __field4,
                        __field5,
                        __field6,
                        __field7,
                        __field8,
                        __field9,
                        __field10,
                        __field11,
                        __ignore,
                    }
                    #[doc(hidden)]
                    struct __FieldVisitor;
                    impl<'de> _serde::de::Visitor<'de> for __FieldVisitor {
                        type Value = __Field;
                        fn expecting(
                            &self,
                            __formatter: &mut _serde::__private::Formatter,
                        ) -> _serde::__private::fmt::Result {
                            _serde::__private::Formatter::write_str(
                                __formatter,
                                "field identifier",
                            )
                        }
                        fn visit_u64<__E>(
                            self,
                            __value: u64,
                        ) -> _serde::__private::Result<Self::Value, __E>
                        where
                            __E: _serde::de::Error,
                        {
                            match __value {
                                0u64 => _serde::__private::Ok(__Field::__field0),
                                1u64 => _serde::__private::Ok(__Field::__field1),
                                2u64 => _serde::__private::Ok(__Field::__field2),
                                3u64 => _serde::__private::Ok(__Field::__field3),
                                4u64 => _serde::__private::Ok(__Field::__field4),
                                5u64 => _serde::__private::Ok(__Field::__field5),
                                6u64 => _serde::__private::Ok(__Field::__field6),
                                7u64 => _serde::__private::Ok(__Field::__field7),
                                8u64 => _serde::__private::Ok(__Field::__field8),
                                9u64 => _serde::__private::Ok(__Field::__field9),
                                10u64 => _serde::__private::Ok(__Field::__field10),
                                11u64 => _serde::__private::Ok(__Field::__field11),
                                _ => _serde::__private::Ok(__Field::__ignore),
                            }
                        }
                        fn visit_str<__E>(
                            self,
                            __value: &str,
                        ) -> _serde::__private::Result<Self::Value, __E>
                        where
                            __E: _serde::de::Error,
                        {
                            match __value {
                                "Status" => _serde::__private::Ok(__Field::__field0),
                                "Running" => _serde::__private::Ok(__Field::__field1),
                                "Paused" => _serde::__private::Ok(__Field::__field2),
                                "Restarting" => _serde::__private::Ok(__Field::__field3),
                                "OOMKilled" => _serde::__private::Ok(__Field::__field4),
                                "Dead" => _serde::__private::Ok(__Field::__field5),
                                "Pid" => _serde::__private::Ok(__Field::__field6),
                                "ExitCode" => _serde::__private::Ok(__Field::__field7),
                                "Error" => _serde::__private::Ok(__Field::__field8),
                                "StartedAt" => _serde::__private::Ok(__Field::__field9),
                                "FinishedAt" => _serde::__private::Ok(__Field::__field10),
                                "Health" => _serde::__private::Ok(__Field::__field11),
                                _ => _serde::__private::Ok(__Field::__ignore),
                            }
                        }
                        fn visit_bytes<__E>(
                            self,
                            __value: &[u8],
                        ) -> _serde::__private::Result<Self::Value, __E>
                        where
                            __E: _serde::de::Error,
                        {
                            match __value {
                                b"Status" => _serde::__private::Ok(__Field::__field0),
                                b"Running" => _serde::__private::Ok(__Field::__field1),
                                b"Paused" => _serde::__private::Ok(__Field::__field2),
                                b"Restarting" => _serde::__private::Ok(__Field::__field3),
                                b"OOMKilled" => _serde::__private::Ok(__Field::__field4),
                                b"Dead" => _serde::__private::Ok(__Field::__field5),
                                b"Pid" => _serde::__private::Ok(__Field::__field6),
                                b"ExitCode" => _serde::__private::Ok(__Field::__field7),
                                b"Error" => _serde::__private::Ok(__Field::__field8),
                                b"StartedAt" => _serde::__private::Ok(__Field::__field9),
                                b"FinishedAt" => _serde::__private::Ok(__Field::__field10),
                                b"Health" => _serde::__private::Ok(__Field::__field11),
                                _ => _serde::__private::Ok(__Field::__ignore),
                            }
                        }
                    }
                    impl<'de> _serde::Deserialize<'de> for __Field {
                        #[inline]
                        fn deserialize<__D>(
                            __deserializer: __D,
                        ) -> _serde::__private::Result<Self, __D::Error>
                        where
                            __D: _serde::Deserializer<'de>,
                        {
                            _serde::Deserializer::deserialize_identifier(
                                __deserializer,
                                __FieldVisitor,
                            )
                        }
                    }
                    #[doc(hidden)]
                    struct __Visitor<'de> {
                        marker: _serde::__private::PhantomData<State>,
                        lifetime: _serde::__private::PhantomData<&'de ()>,
                    }
                    impl<'de> _serde::de::Visitor<'de> for __Visitor<'de> {
                        type Value = State;
                        fn expecting(
                            &self,
                            __formatter: &mut _serde::__private::Formatter,
                        ) -> _serde::__private::fmt::Result {
                            _serde::__private::Formatter::write_str(
                                __formatter,
                                "struct State",
                            )
                        }
                        #[inline]
                        fn visit_seq<__A>(
                            self,
                            mut __seq: __A,
                        ) -> _serde::__private::Result<Self::Value, __A::Error>
                        where
                            __A: _serde::de::SeqAccess<'de>,
                        {
                            let __field0 = match _serde::de::SeqAccess::next_element::<
                                Option<String>,
                            >(&mut __seq)? {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            0usize,
                                            &"struct State with 12 elements",
                                        ),
                                    );
                                }
                            };
                            let __field1 = match _serde::de::SeqAccess::next_element::<
                                Option<bool>,
                            >(&mut __seq)? {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            1usize,
                                            &"struct State with 12 elements",
                                        ),
                                    );
                                }
                            };
                            let __field2 = match _serde::de::SeqAccess::next_element::<
                                Option<bool>,
                            >(&mut __seq)? {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            2usize,
                                            &"struct State with 12 elements",
                                        ),
                                    );
                                }
                            };
                            let __field3 = match _serde::de::SeqAccess::next_element::<
                                Option<bool>,
                            >(&mut __seq)? {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            3usize,
                                            &"struct State with 12 elements",
                                        ),
                                    );
                                }
                            };
                            let __field4 = match _serde::de::SeqAccess::next_element::<
                                Option<bool>,
                            >(&mut __seq)? {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            4usize,
                                            &"struct State with 12 elements",
                                        ),
                                    );
                                }
                            };
                            let __field5 = match _serde::de::SeqAccess::next_element::<
                                Option<bool>,
                            >(&mut __seq)? {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            5usize,
                                            &"struct State with 12 elements",
                                        ),
                                    );
                                }
                            };
                            let __field6 = match _serde::de::SeqAccess::next_element::<
                                Option<u64>,
                            >(&mut __seq)? {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            6usize,
                                            &"struct State with 12 elements",
                                        ),
                                    );
                                }
                            };
                            let __field7 = match _serde::de::SeqAccess::next_element::<
                                Option<u64>,
                            >(&mut __seq)? {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            7usize,
                                            &"struct State with 12 elements",
                                        ),
                                    );
                                }
                            };
                            let __field8 = match _serde::de::SeqAccess::next_element::<
                                Option<String>,
                            >(&mut __seq)? {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            8usize,
                                            &"struct State with 12 elements",
                                        ),
                                    );
                                }
                            };
                            let __field9 = match _serde::de::SeqAccess::next_element::<
                                Option<DateTime<Utc>>,
                            >(&mut __seq)? {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            9usize,
                                            &"struct State with 12 elements",
                                        ),
                                    );
                                }
                            };
                            let __field10 = match _serde::de::SeqAccess::next_element::<
                                Option<DateTime<Utc>>,
                            >(&mut __seq)? {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            10usize,
                                            &"struct State with 12 elements",
                                        ),
                                    );
                                }
                            };
                            let __field11 = match _serde::de::SeqAccess::next_element::<
                                Option<Health>,
                            >(&mut __seq)? {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            11usize,
                                            &"struct State with 12 elements",
                                        ),
                                    );
                                }
                            };
                            _serde::__private::Ok(State {
                                status: __field0,
                                running: __field1,
                                paused: __field2,
                                restarting: __field3,
                                oom_killed: __field4,
                                dead: __field5,
                                pid: __field6,
                                exit_code: __field7,
                                error: __field8,
                                started_at: __field9,
                                finished_at: __field10,
                                health: __field11,
                            })
                        }
                        #[inline]
                        fn visit_map<__A>(
                            self,
                            mut __map: __A,
                        ) -> _serde::__private::Result<Self::Value, __A::Error>
                        where
                            __A: _serde::de::MapAccess<'de>,
                        {
                            let mut __field0: _serde::__private::Option<
                                Option<String>,
                            > = _serde::__private::None;
                            let mut __field1: _serde::__private::Option<Option<bool>> = _serde::__private::None;
                            let mut __field2: _serde::__private::Option<Option<bool>> = _serde::__private::None;
                            let mut __field3: _serde::__private::Option<Option<bool>> = _serde::__private::None;
                            let mut __field4: _serde::__private::Option<Option<bool>> = _serde::__private::None;
                            let mut __field5: _serde::__private::Option<Option<bool>> = _serde::__private::None;
                            let mut __field6: _serde::__private::Option<Option<u64>> = _serde::__private::None;
                            let mut __field7: _serde::__private::Option<Option<u64>> = _serde::__private::None;
                            let mut __field8: _serde::__private::Option<
                                Option<String>,
                            > = _serde::__private::None;
                            let mut __field9: _serde::__private::Option<
                                Option<DateTime<Utc>>,
                            > = _serde::__private::None;
                            let mut __field10: _serde::__private::Option<
                                Option<DateTime<Utc>>,
                            > = _serde::__private::None;
                            let mut __field11: _serde::__private::Option<
                                Option<Health>,
                            > = _serde::__private::None;
                            while let _serde::__private::Some(__key) = _serde::de::MapAccess::next_key::<
                                __Field,
                            >(&mut __map)? {
                                match __key {
                                    __Field::__field0 => {
                                        if _serde::__private::Option::is_some(&__field0) {
                                            return _serde::__private::Err(
                                                <__A::Error as _serde::de::Error>::duplicate_field("Status"),
                                            );
                                        }
                                        __field0 = _serde::__private::Some(
                                            _serde::de::MapAccess::next_value::<
                                                Option<String>,
                                            >(&mut __map)?,
                                        );
                                    }
                                    __Field::__field1 => {
                                        if _serde::__private::Option::is_some(&__field1) {
                                            return _serde::__private::Err(
                                                <__A::Error as _serde::de::Error>::duplicate_field(
                                                    "Running",
                                                ),
                                            );
                                        }
                                        __field1 = _serde::__private::Some(
                                            _serde::de::MapAccess::next_value::<
                                                Option<bool>,
                                            >(&mut __map)?,
                                        );
                                    }
                                    __Field::__field2 => {
                                        if _serde::__private::Option::is_some(&__field2) {
                                            return _serde::__private::Err(
                                                <__A::Error as _serde::de::Error>::duplicate_field("Paused"),
                                            );
                                        }
                                        __field2 = _serde::__private::Some(
                                            _serde::de::MapAccess::next_value::<
                                                Option<bool>,
                                            >(&mut __map)?,
                                        );
                                    }
                                    __Field::__field3 => {
                                        if _serde::__private::Option::is_some(&__field3) {
                                            return _serde::__private::Err(
                                                <__A::Error as _serde::de::Error>::duplicate_field(
                                                    "Restarting",
                                                ),
                                            );
                                        }
                                        __field3 = _serde::__private::Some(
                                            _serde::de::MapAccess::next_value::<
                                                Option<bool>,
                                            >(&mut __map)?,
                                        );
                                    }
                                    __Field::__field4 => {
                                        if _serde::__private::Option::is_some(&__field4) {
                                            return _serde::__private::Err(
                                                <__A::Error as _serde::de::Error>::duplicate_field(
                                                    "OOMKilled",
                                                ),
                                            );
                                        }
                                        __field4 = _serde::__private::Some(
                                            _serde::de::MapAccess::next_value::<
                                                Option<bool>,
                                            >(&mut __map)?,
                                        );
                                    }
                                    __Field::__field5 => {
                                        if _serde::__private::Option::is_some(&__field5) {
                                            return _serde::__private::Err(
                                                <__A::Error as _serde::de::Error>::duplicate_field("Dead"),
                                            );
                                        }
                                        __field5 = _serde::__private::Some(
                                            _serde::de::MapAccess::next_value::<
                                                Option<bool>,
                                            >(&mut __map)?,
                                        );
                                    }
                                    __Field::__field6 => {
                                        if _serde::__private::Option::is_some(&__field6) {
                                            return _serde::__private::Err(
                                                <__A::Error as _serde::de::Error>::duplicate_field("Pid"),
                                            );
                                        }
                                        __field6 = _serde::__private::Some(
                                            _serde::de::MapAccess::next_value::<
                                                Option<u64>,
                                            >(&mut __map)?,
                                        );
                                    }
                                    __Field::__field7 => {
                                        if _serde::__private::Option::is_some(&__field7) {
                                            return _serde::__private::Err(
                                                <__A::Error as _serde::de::Error>::duplicate_field(
                                                    "ExitCode",
                                                ),
                                            );
                                        }
                                        __field7 = _serde::__private::Some(
                                            _serde::de::MapAccess::next_value::<
                                                Option<u64>,
                                            >(&mut __map)?,
                                        );
                                    }
                                    __Field::__field8 => {
                                        if _serde::__private::Option::is_some(&__field8) {
                                            return _serde::__private::Err(
                                                <__A::Error as _serde::de::Error>::duplicate_field("Error"),
                                            );
                                        }
                                        __field8 = _serde::__private::Some(
                                            _serde::de::MapAccess::next_value::<
                                                Option<String>,
                                            >(&mut __map)?,
                                        );
                                    }
                                    __Field::__field9 => {
                                        if _serde::__private::Option::is_some(&__field9) {
                                            return _serde::__private::Err(
                                                <__A::Error as _serde::de::Error>::duplicate_field(
                                                    "StartedAt",
                                                ),
                                            );
                                        }
                                        __field9 = _serde::__private::Some(
                                            _serde::de::MapAccess::next_value::<
                                                Option<DateTime<Utc>>,
                                            >(&mut __map)?,
                                        );
                                    }
                                    __Field::__field10 => {
                                        if _serde::__private::Option::is_some(&__field10) {
                                            return _serde::__private::Err(
                                                <__A::Error as _serde::de::Error>::duplicate_field(
                                                    "FinishedAt",
                                                ),
                                            );
                                        }
                                        __field10 = _serde::__private::Some(
                                            _serde::de::MapAccess::next_value::<
                                                Option<DateTime<Utc>>,
                                            >(&mut __map)?,
                                        );
                                    }
                                    __Field::__field11 => {
                                        if _serde::__private::Option::is_some(&__field11) {
                                            return _serde::__private::Err(
                                                <__A::Error as _serde::de::Error>::duplicate_field("Health"),
                                            );
                                        }
                                        __field11 = _serde::__private::Some(
                                            _serde::de::MapAccess::next_value::<
                                                Option<Health>,
                                            >(&mut __map)?,
                                        );
                                    }
                                    _ => {
                                        let _ = _serde::de::MapAccess::next_value::<
                                            _serde::de::IgnoredAny,
                                        >(&mut __map)?;
                                    }
                                }
                            }
                            let __field0 = match __field0 {
                                _serde::__private::Some(__field0) => __field0,
                                _serde::__private::None => {
                                    _serde::__private::de::missing_field("Status")?
                                }
                            };
                            let __field1 = match __field1 {
                                _serde::__private::Some(__field1) => __field1,
                                _serde::__private::None => {
                                    _serde::__private::de::missing_field("Running")?
                                }
                            };
                            let __field2 = match __field2 {
                                _serde::__private::Some(__field2) => __field2,
                                _serde::__private::None => {
                                    _serde::__private::de::missing_field("Paused")?
                                }
                            };
                            let __field3 = match __field3 {
                                _serde::__private::Some(__field3) => __field3,
                                _serde::__private::None => {
                                    _serde::__private::de::missing_field("Restarting")?
                                }
                            };
                            let __field4 = match __field4 {
                                _serde::__private::Some(__field4) => __field4,
                                _serde::__private::None => {
                                    _serde::__private::de::missing_field("OOMKilled")?
                                }
                            };
                            let __field5 = match __field5 {
                                _serde::__private::Some(__field5) => __field5,
                                _serde::__private::None => {
                                    _serde::__private::de::missing_field("Dead")?
                                }
                            };
                            let __field6 = match __field6 {
                                _serde::__private::Some(__field6) => __field6,
                                _serde::__private::None => {
                                    _serde::__private::de::missing_field("Pid")?
                                }
                            };
                            let __field7 = match __field7 {
                                _serde::__private::Some(__field7) => __field7,
                                _serde::__private::None => {
                                    _serde::__private::de::missing_field("ExitCode")?
                                }
                            };
                            let __field8 = match __field8 {
                                _serde::__private::Some(__field8) => __field8,
                                _serde::__private::None => {
                                    _serde::__private::de::missing_field("Error")?
                                }
                            };
                            let __field9 = match __field9 {
                                _serde::__private::Some(__field9) => __field9,
                                _serde::__private::None => {
                                    _serde::__private::de::missing_field("StartedAt")?
                                }
                            };
                            let __field10 = match __field10 {
                                _serde::__private::Some(__field10) => __field10,
                                _serde::__private::None => {
                                    _serde::__private::de::missing_field("FinishedAt")?
                                }
                            };
                            let __field11 = match __field11 {
                                _serde::__private::Some(__field11) => __field11,
                                _serde::__private::None => {
                                    _serde::__private::de::missing_field("Health")?
                                }
                            };
                            _serde::__private::Ok(State {
                                status: __field0,
                                running: __field1,
                                paused: __field2,
                                restarting: __field3,
                                oom_killed: __field4,
                                dead: __field5,
                                pid: __field6,
                                exit_code: __field7,
                                error: __field8,
                                started_at: __field9,
                                finished_at: __field10,
                                health: __field11,
                            })
                        }
                    }
                    #[doc(hidden)]
                    const FIELDS: &'static [&'static str] = &[
                        "Status",
                        "Running",
                        "Paused",
                        "Restarting",
                        "OOMKilled",
                        "Dead",
                        "Pid",
                        "ExitCode",
                        "Error",
                        "StartedAt",
                        "FinishedAt",
                        "Health",
                    ];
                    _serde::Deserializer::deserialize_struct(
                        __deserializer,
                        "State",
                        FIELDS,
                        __Visitor {
                            marker: _serde::__private::PhantomData::<State>,
                            lifetime: _serde::__private::PhantomData,
                        },
                    )
                }
            }
        };
        #[serde(rename_all = "PascalCase")]
        pub struct Health {
            #[serde(skip_serializing_if = "Option::is_none")]
            pub status: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none")]
            pub failing_streak: Option<u64>,
            #[serde(skip_serializing_if = "Option::is_none")]
            pub log: Option<Option<Vec<HealthcheckResult>>>,
        }
        #[automatically_derived]
        impl ::core::clone::Clone for Health {
            #[inline]
            fn clone(&self) -> Health {
                Health {
                    status: ::core::clone::Clone::clone(&self.status),
                    failing_streak: ::core::clone::Clone::clone(&self.failing_streak),
                    log: ::core::clone::Clone::clone(&self.log),
                }
            }
        }
        #[automatically_derived]
        impl ::core::fmt::Debug for Health {
            #[inline]
            fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                ::core::fmt::Formatter::debug_struct_field3_finish(
                    f,
                    "Health",
                    "status",
                    &self.status,
                    "failing_streak",
                    &self.failing_streak,
                    "log",
                    &&self.log,
                )
            }
        }
        #[doc(hidden)]
        #[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
        const _: () = {
            #[allow(unused_extern_crates, clippy::useless_attribute)]
            extern crate serde as _serde;
            #[automatically_derived]
            impl _serde::Serialize for Health {
                fn serialize<__S>(
                    &self,
                    __serializer: __S,
                ) -> _serde::__private::Result<__S::Ok, __S::Error>
                where
                    __S: _serde::Serializer,
                {
                    let mut __serde_state = _serde::Serializer::serialize_struct(
                        __serializer,
                        "Health",
                        false as usize
                            + if Option::is_none(&self.status) { 0 } else { 1 }
                            + if Option::is_none(&self.failing_streak) { 0 } else { 1 }
                            + if Option::is_none(&self.log) { 0 } else { 1 },
                    )?;
                    if !Option::is_none(&self.status) {
                        _serde::ser::SerializeStruct::serialize_field(
                            &mut __serde_state,
                            "Status",
                            &self.status,
                        )?;
                    } else {
                        _serde::ser::SerializeStruct::skip_field(
                            &mut __serde_state,
                            "Status",
                        )?;
                    }
                    if !Option::is_none(&self.failing_streak) {
                        _serde::ser::SerializeStruct::serialize_field(
                            &mut __serde_state,
                            "FailingStreak",
                            &self.failing_streak,
                        )?;
                    } else {
                        _serde::ser::SerializeStruct::skip_field(
                            &mut __serde_state,
                            "FailingStreak",
                        )?;
                    }
                    if !Option::is_none(&self.log) {
                        _serde::ser::SerializeStruct::serialize_field(
                            &mut __serde_state,
                            "Log",
                            &self.log,
                        )?;
                    } else {
                        _serde::ser::SerializeStruct::skip_field(
                            &mut __serde_state,
                            "Log",
                        )?;
                    }
                    _serde::ser::SerializeStruct::end(__serde_state)
                }
            }
        };
        #[doc(hidden)]
        #[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
        const _: () = {
            #[allow(unused_extern_crates, clippy::useless_attribute)]
            extern crate serde as _serde;
            #[automatically_derived]
            impl<'de> _serde::Deserialize<'de> for Health {
                fn deserialize<__D>(
                    __deserializer: __D,
                ) -> _serde::__private::Result<Self, __D::Error>
                where
                    __D: _serde::Deserializer<'de>,
                {
                    #[allow(non_camel_case_types)]
                    #[doc(hidden)]
                    enum __Field {
                        __field0,
                        __field1,
                        __field2,
                        __ignore,
                    }
                    #[doc(hidden)]
                    struct __FieldVisitor;
                    impl<'de> _serde::de::Visitor<'de> for __FieldVisitor {
                        type Value = __Field;
                        fn expecting(
                            &self,
                            __formatter: &mut _serde::__private::Formatter,
                        ) -> _serde::__private::fmt::Result {
                            _serde::__private::Formatter::write_str(
                                __formatter,
                                "field identifier",
                            )
                        }
                        fn visit_u64<__E>(
                            self,
                            __value: u64,
                        ) -> _serde::__private::Result<Self::Value, __E>
                        where
                            __E: _serde::de::Error,
                        {
                            match __value {
                                0u64 => _serde::__private::Ok(__Field::__field0),
                                1u64 => _serde::__private::Ok(__Field::__field1),
                                2u64 => _serde::__private::Ok(__Field::__field2),
                                _ => _serde::__private::Ok(__Field::__ignore),
                            }
                        }
                        fn visit_str<__E>(
                            self,
                            __value: &str,
                        ) -> _serde::__private::Result<Self::Value, __E>
                        where
                            __E: _serde::de::Error,
                        {
                            match __value {
                                "Status" => _serde::__private::Ok(__Field::__field0),
                                "FailingStreak" => _serde::__private::Ok(__Field::__field1),
                                "Log" => _serde::__private::Ok(__Field::__field2),
                                _ => _serde::__private::Ok(__Field::__ignore),
                            }
                        }
                        fn visit_bytes<__E>(
                            self,
                            __value: &[u8],
                        ) -> _serde::__private::Result<Self::Value, __E>
                        where
                            __E: _serde::de::Error,
                        {
                            match __value {
                                b"Status" => _serde::__private::Ok(__Field::__field0),
                                b"FailingStreak" => _serde::__private::Ok(__Field::__field1),
                                b"Log" => _serde::__private::Ok(__Field::__field2),
                                _ => _serde::__private::Ok(__Field::__ignore),
                            }
                        }
                    }
                    impl<'de> _serde::Deserialize<'de> for __Field {
                        #[inline]
                        fn deserialize<__D>(
                            __deserializer: __D,
                        ) -> _serde::__private::Result<Self, __D::Error>
                        where
                            __D: _serde::Deserializer<'de>,
                        {
                            _serde::Deserializer::deserialize_identifier(
                                __deserializer,
                                __FieldVisitor,
                            )
                        }
                    }
                    #[doc(hidden)]
                    struct __Visitor<'de> {
                        marker: _serde::__private::PhantomData<Health>,
                        lifetime: _serde::__private::PhantomData<&'de ()>,
                    }
                    impl<'de> _serde::de::Visitor<'de> for __Visitor<'de> {
                        type Value = Health;
                        fn expecting(
                            &self,
                            __formatter: &mut _serde::__private::Formatter,
                        ) -> _serde::__private::fmt::Result {
                            _serde::__private::Formatter::write_str(
                                __formatter,
                                "struct Health",
                            )
                        }
                        #[inline]
                        fn visit_seq<__A>(
                            self,
                            mut __seq: __A,
                        ) -> _serde::__private::Result<Self::Value, __A::Error>
                        where
                            __A: _serde::de::SeqAccess<'de>,
                        {
                            let __field0 = match _serde::de::SeqAccess::next_element::<
                                Option<String>,
                            >(&mut __seq)? {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            0usize,
                                            &"struct Health with 3 elements",
                                        ),
                                    );
                                }
                            };
                            let __field1 = match _serde::de::SeqAccess::next_element::<
                                Option<u64>,
                            >(&mut __seq)? {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            1usize,
                                            &"struct Health with 3 elements",
                                        ),
                                    );
                                }
                            };
                            let __field2 = match _serde::de::SeqAccess::next_element::<
                                Option<Option<Vec<HealthcheckResult>>>,
                            >(&mut __seq)? {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            2usize,
                                            &"struct Health with 3 elements",
                                        ),
                                    );
                                }
                            };
                            _serde::__private::Ok(Health {
                                status: __field0,
                                failing_streak: __field1,
                                log: __field2,
                            })
                        }
                        #[inline]
                        fn visit_map<__A>(
                            self,
                            mut __map: __A,
                        ) -> _serde::__private::Result<Self::Value, __A::Error>
                        where
                            __A: _serde::de::MapAccess<'de>,
                        {
                            let mut __field0: _serde::__private::Option<
                                Option<String>,
                            > = _serde::__private::None;
                            let mut __field1: _serde::__private::Option<Option<u64>> = _serde::__private::None;
                            let mut __field2: _serde::__private::Option<
                                Option<Option<Vec<HealthcheckResult>>>,
                            > = _serde::__private::None;
                            while let _serde::__private::Some(__key) = _serde::de::MapAccess::next_key::<
                                __Field,
                            >(&mut __map)? {
                                match __key {
                                    __Field::__field0 => {
                                        if _serde::__private::Option::is_some(&__field0) {
                                            return _serde::__private::Err(
                                                <__A::Error as _serde::de::Error>::duplicate_field("Status"),
                                            );
                                        }
                                        __field0 = _serde::__private::Some(
                                            _serde::de::MapAccess::next_value::<
                                                Option<String>,
                                            >(&mut __map)?,
                                        );
                                    }
                                    __Field::__field1 => {
                                        if _serde::__private::Option::is_some(&__field1) {
                                            return _serde::__private::Err(
                                                <__A::Error as _serde::de::Error>::duplicate_field(
                                                    "FailingStreak",
                                                ),
                                            );
                                        }
                                        __field1 = _serde::__private::Some(
                                            _serde::de::MapAccess::next_value::<
                                                Option<u64>,
                                            >(&mut __map)?,
                                        );
                                    }
                                    __Field::__field2 => {
                                        if _serde::__private::Option::is_some(&__field2) {
                                            return _serde::__private::Err(
                                                <__A::Error as _serde::de::Error>::duplicate_field("Log"),
                                            );
                                        }
                                        __field2 = _serde::__private::Some(
                                            _serde::de::MapAccess::next_value::<
                                                Option<Option<Vec<HealthcheckResult>>>,
                                            >(&mut __map)?,
                                        );
                                    }
                                    _ => {
                                        let _ = _serde::de::MapAccess::next_value::<
                                            _serde::de::IgnoredAny,
                                        >(&mut __map)?;
                                    }
                                }
                            }
                            let __field0 = match __field0 {
                                _serde::__private::Some(__field0) => __field0,
                                _serde::__private::None => {
                                    _serde::__private::de::missing_field("Status")?
                                }
                            };
                            let __field1 = match __field1 {
                                _serde::__private::Some(__field1) => __field1,
                                _serde::__private::None => {
                                    _serde::__private::de::missing_field("FailingStreak")?
                                }
                            };
                            let __field2 = match __field2 {
                                _serde::__private::Some(__field2) => __field2,
                                _serde::__private::None => {
                                    _serde::__private::de::missing_field("Log")?
                                }
                            };
                            _serde::__private::Ok(Health {
                                status: __field0,
                                failing_streak: __field1,
                                log: __field2,
                            })
                        }
                    }
                    #[doc(hidden)]
                    const FIELDS: &'static [&'static str] = &[
                        "Status",
                        "FailingStreak",
                        "Log",
                    ];
                    _serde::Deserializer::deserialize_struct(
                        __deserializer,
                        "Health",
                        FIELDS,
                        __Visitor {
                            marker: _serde::__private::PhantomData::<Health>,
                            lifetime: _serde::__private::PhantomData,
                        },
                    )
                }
            }
        };
        #[serde(rename_all = "PascalCase")]
        pub struct HealthcheckResult {
            #[serde(skip_serializing_if = "Option::is_none")]
            pub start: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none")]
            pub end: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none")]
            pub exit_code: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none")]
            pub output: Option<String>,
        }
        #[automatically_derived]
        impl ::core::clone::Clone for HealthcheckResult {
            #[inline]
            fn clone(&self) -> HealthcheckResult {
                HealthcheckResult {
                    start: ::core::clone::Clone::clone(&self.start),
                    end: ::core::clone::Clone::clone(&self.end),
                    exit_code: ::core::clone::Clone::clone(&self.exit_code),
                    output: ::core::clone::Clone::clone(&self.output),
                }
            }
        }
        #[automatically_derived]
        impl ::core::fmt::Debug for HealthcheckResult {
            #[inline]
            fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                ::core::fmt::Formatter::debug_struct_field4_finish(
                    f,
                    "HealthcheckResult",
                    "start",
                    &self.start,
                    "end",
                    &self.end,
                    "exit_code",
                    &self.exit_code,
                    "output",
                    &&self.output,
                )
            }
        }
        #[doc(hidden)]
        #[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
        const _: () = {
            #[allow(unused_extern_crates, clippy::useless_attribute)]
            extern crate serde as _serde;
            #[automatically_derived]
            impl _serde::Serialize for HealthcheckResult {
                fn serialize<__S>(
                    &self,
                    __serializer: __S,
                ) -> _serde::__private::Result<__S::Ok, __S::Error>
                where
                    __S: _serde::Serializer,
                {
                    let mut __serde_state = _serde::Serializer::serialize_struct(
                        __serializer,
                        "HealthcheckResult",
                        false as usize + if Option::is_none(&self.start) { 0 } else { 1 }
                            + if Option::is_none(&self.end) { 0 } else { 1 }
                            + if Option::is_none(&self.exit_code) { 0 } else { 1 }
                            + if Option::is_none(&self.output) { 0 } else { 1 },
                    )?;
                    if !Option::is_none(&self.start) {
                        _serde::ser::SerializeStruct::serialize_field(
                            &mut __serde_state,
                            "Start",
                            &self.start,
                        )?;
                    } else {
                        _serde::ser::SerializeStruct::skip_field(
                            &mut __serde_state,
                            "Start",
                        )?;
                    }
                    if !Option::is_none(&self.end) {
                        _serde::ser::SerializeStruct::serialize_field(
                            &mut __serde_state,
                            "End",
                            &self.end,
                        )?;
                    } else {
                        _serde::ser::SerializeStruct::skip_field(
                            &mut __serde_state,
                            "End",
                        )?;
                    }
                    if !Option::is_none(&self.exit_code) {
                        _serde::ser::SerializeStruct::serialize_field(
                            &mut __serde_state,
                            "ExitCode",
                            &self.exit_code,
                        )?;
                    } else {
                        _serde::ser::SerializeStruct::skip_field(
                            &mut __serde_state,
                            "ExitCode",
                        )?;
                    }
                    if !Option::is_none(&self.output) {
                        _serde::ser::SerializeStruct::serialize_field(
                            &mut __serde_state,
                            "Output",
                            &self.output,
                        )?;
                    } else {
                        _serde::ser::SerializeStruct::skip_field(
                            &mut __serde_state,
                            "Output",
                        )?;
                    }
                    _serde::ser::SerializeStruct::end(__serde_state)
                }
            }
        };
        #[doc(hidden)]
        #[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
        const _: () = {
            #[allow(unused_extern_crates, clippy::useless_attribute)]
            extern crate serde as _serde;
            #[automatically_derived]
            impl<'de> _serde::Deserialize<'de> for HealthcheckResult {
                fn deserialize<__D>(
                    __deserializer: __D,
                ) -> _serde::__private::Result<Self, __D::Error>
                where
                    __D: _serde::Deserializer<'de>,
                {
                    #[allow(non_camel_case_types)]
                    #[doc(hidden)]
                    enum __Field {
                        __field0,
                        __field1,
                        __field2,
                        __field3,
                        __ignore,
                    }
                    #[doc(hidden)]
                    struct __FieldVisitor;
                    impl<'de> _serde::de::Visitor<'de> for __FieldVisitor {
                        type Value = __Field;
                        fn expecting(
                            &self,
                            __formatter: &mut _serde::__private::Formatter,
                        ) -> _serde::__private::fmt::Result {
                            _serde::__private::Formatter::write_str(
                                __formatter,
                                "field identifier",
                            )
                        }
                        fn visit_u64<__E>(
                            self,
                            __value: u64,
                        ) -> _serde::__private::Result<Self::Value, __E>
                        where
                            __E: _serde::de::Error,
                        {
                            match __value {
                                0u64 => _serde::__private::Ok(__Field::__field0),
                                1u64 => _serde::__private::Ok(__Field::__field1),
                                2u64 => _serde::__private::Ok(__Field::__field2),
                                3u64 => _serde::__private::Ok(__Field::__field3),
                                _ => _serde::__private::Ok(__Field::__ignore),
                            }
                        }
                        fn visit_str<__E>(
                            self,
                            __value: &str,
                        ) -> _serde::__private::Result<Self::Value, __E>
                        where
                            __E: _serde::de::Error,
                        {
                            match __value {
                                "Start" => _serde::__private::Ok(__Field::__field0),
                                "End" => _serde::__private::Ok(__Field::__field1),
                                "ExitCode" => _serde::__private::Ok(__Field::__field2),
                                "Output" => _serde::__private::Ok(__Field::__field3),
                                _ => _serde::__private::Ok(__Field::__ignore),
                            }
                        }
                        fn visit_bytes<__E>(
                            self,
                            __value: &[u8],
                        ) -> _serde::__private::Result<Self::Value, __E>
                        where
                            __E: _serde::de::Error,
                        {
                            match __value {
                                b"Start" => _serde::__private::Ok(__Field::__field0),
                                b"End" => _serde::__private::Ok(__Field::__field1),
                                b"ExitCode" => _serde::__private::Ok(__Field::__field2),
                                b"Output" => _serde::__private::Ok(__Field::__field3),
                                _ => _serde::__private::Ok(__Field::__ignore),
                            }
                        }
                    }
                    impl<'de> _serde::Deserialize<'de> for __Field {
                        #[inline]
                        fn deserialize<__D>(
                            __deserializer: __D,
                        ) -> _serde::__private::Result<Self, __D::Error>
                        where
                            __D: _serde::Deserializer<'de>,
                        {
                            _serde::Deserializer::deserialize_identifier(
                                __deserializer,
                                __FieldVisitor,
                            )
                        }
                    }
                    #[doc(hidden)]
                    struct __Visitor<'de> {
                        marker: _serde::__private::PhantomData<HealthcheckResult>,
                        lifetime: _serde::__private::PhantomData<&'de ()>,
                    }
                    impl<'de> _serde::de::Visitor<'de> for __Visitor<'de> {
                        type Value = HealthcheckResult;
                        fn expecting(
                            &self,
                            __formatter: &mut _serde::__private::Formatter,
                        ) -> _serde::__private::fmt::Result {
                            _serde::__private::Formatter::write_str(
                                __formatter,
                                "struct HealthcheckResult",
                            )
                        }
                        #[inline]
                        fn visit_seq<__A>(
                            self,
                            mut __seq: __A,
                        ) -> _serde::__private::Result<Self::Value, __A::Error>
                        where
                            __A: _serde::de::SeqAccess<'de>,
                        {
                            let __field0 = match _serde::de::SeqAccess::next_element::<
                                Option<String>,
                            >(&mut __seq)? {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            0usize,
                                            &"struct HealthcheckResult with 4 elements",
                                        ),
                                    );
                                }
                            };
                            let __field1 = match _serde::de::SeqAccess::next_element::<
                                Option<String>,
                            >(&mut __seq)? {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            1usize,
                                            &"struct HealthcheckResult with 4 elements",
                                        ),
                                    );
                                }
                            };
                            let __field2 = match _serde::de::SeqAccess::next_element::<
                                Option<i64>,
                            >(&mut __seq)? {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            2usize,
                                            &"struct HealthcheckResult with 4 elements",
                                        ),
                                    );
                                }
                            };
                            let __field3 = match _serde::de::SeqAccess::next_element::<
                                Option<String>,
                            >(&mut __seq)? {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            3usize,
                                            &"struct HealthcheckResult with 4 elements",
                                        ),
                                    );
                                }
                            };
                            _serde::__private::Ok(HealthcheckResult {
                                start: __field0,
                                end: __field1,
                                exit_code: __field2,
                                output: __field3,
                            })
                        }
                        #[inline]
                        fn visit_map<__A>(
                            self,
                            mut __map: __A,
                        ) -> _serde::__private::Result<Self::Value, __A::Error>
                        where
                            __A: _serde::de::MapAccess<'de>,
                        {
                            let mut __field0: _serde::__private::Option<
                                Option<String>,
                            > = _serde::__private::None;
                            let mut __field1: _serde::__private::Option<
                                Option<String>,
                            > = _serde::__private::None;
                            let mut __field2: _serde::__private::Option<Option<i64>> = _serde::__private::None;
                            let mut __field3: _serde::__private::Option<
                                Option<String>,
                            > = _serde::__private::None;
                            while let _serde::__private::Some(__key) = _serde::de::MapAccess::next_key::<
                                __Field,
                            >(&mut __map)? {
                                match __key {
                                    __Field::__field0 => {
                                        if _serde::__private::Option::is_some(&__field0) {
                                            return _serde::__private::Err(
                                                <__A::Error as _serde::de::Error>::duplicate_field("Start"),
                                            );
                                        }
                                        __field0 = _serde::__private::Some(
                                            _serde::de::MapAccess::next_value::<
                                                Option<String>,
                                            >(&mut __map)?,
                                        );
                                    }
                                    __Field::__field1 => {
                                        if _serde::__private::Option::is_some(&__field1) {
                                            return _serde::__private::Err(
                                                <__A::Error as _serde::de::Error>::duplicate_field("End"),
                                            );
                                        }
                                        __field1 = _serde::__private::Some(
                                            _serde::de::MapAccess::next_value::<
                                                Option<String>,
                                            >(&mut __map)?,
                                        );
                                    }
                                    __Field::__field2 => {
                                        if _serde::__private::Option::is_some(&__field2) {
                                            return _serde::__private::Err(
                                                <__A::Error as _serde::de::Error>::duplicate_field(
                                                    "ExitCode",
                                                ),
                                            );
                                        }
                                        __field2 = _serde::__private::Some(
                                            _serde::de::MapAccess::next_value::<
                                                Option<i64>,
                                            >(&mut __map)?,
                                        );
                                    }
                                    __Field::__field3 => {
                                        if _serde::__private::Option::is_some(&__field3) {
                                            return _serde::__private::Err(
                                                <__A::Error as _serde::de::Error>::duplicate_field("Output"),
                                            );
                                        }
                                        __field3 = _serde::__private::Some(
                                            _serde::de::MapAccess::next_value::<
                                                Option<String>,
                                            >(&mut __map)?,
                                        );
                                    }
                                    _ => {
                                        let _ = _serde::de::MapAccess::next_value::<
                                            _serde::de::IgnoredAny,
                                        >(&mut __map)?;
                                    }
                                }
                            }
                            let __field0 = match __field0 {
                                _serde::__private::Some(__field0) => __field0,
                                _serde::__private::None => {
                                    _serde::__private::de::missing_field("Start")?
                                }
                            };
                            let __field1 = match __field1 {
                                _serde::__private::Some(__field1) => __field1,
                                _serde::__private::None => {
                                    _serde::__private::de::missing_field("End")?
                                }
                            };
                            let __field2 = match __field2 {
                                _serde::__private::Some(__field2) => __field2,
                                _serde::__private::None => {
                                    _serde::__private::de::missing_field("ExitCode")?
                                }
                            };
                            let __field3 = match __field3 {
                                _serde::__private::Some(__field3) => __field3,
                                _serde::__private::None => {
                                    _serde::__private::de::missing_field("Output")?
                                }
                            };
                            _serde::__private::Ok(HealthcheckResult {
                                start: __field0,
                                end: __field1,
                                exit_code: __field2,
                                output: __field3,
                            })
                        }
                    }
                    #[doc(hidden)]
                    const FIELDS: &'static [&'static str] = &[
                        "Start",
                        "End",
                        "ExitCode",
                        "Output",
                    ];
                    _serde::Deserializer::deserialize_struct(
                        __deserializer,
                        "HealthcheckResult",
                        FIELDS,
                        __Visitor {
                            marker: _serde::__private::PhantomData::<HealthcheckResult>,
                            lifetime: _serde::__private::PhantomData,
                        },
                    )
                }
            }
        };
        #[serde(rename_all = "PascalCase")]
        pub struct HostConfig {
            #[serde(skip_serializing_if = "Option::is_none")]
            pub cpu_shares: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none")]
            pub memory: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none")]
            pub cgroup_parent: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none")]
            pub blkio_weight: Option<u16>,
            #[serde(skip_serializing_if = "Option::is_none")]
            pub blkio_weight_device: Option<Vec<ThrottleDevice>>,
            #[serde(skip_serializing_if = "Option::is_none")]
            pub blkio_device_read_bps: Option<Vec<ThrottleDevice>>,
            #[serde(skip_serializing_if = "Option::is_none")]
            pub blkio_device_write_bps: Option<Vec<ThrottleDevice>>,
            #[serde(rename = "BlkioDeviceReadIOps")]
            #[serde(skip_serializing_if = "Option::is_none")]
            pub blkio_device_read_iops: Option<Vec<ThrottleDevice>>,
            #[serde(rename = "BlkioDeviceWriteIOps")]
            #[serde(skip_serializing_if = "Option::is_none")]
            pub blkio_device_write_iops: Option<Vec<ThrottleDevice>>,
            #[serde(skip_serializing_if = "Option::is_none")]
            pub cpu_period: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none")]
            pub cpu_quota: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none")]
            pub cpu_realtime_period: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none")]
            pub cpu_realtime_runtime: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none")]
            pub cpuset_cpus: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none")]
            pub cpuset_mems: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none")]
            pub devices: Option<Vec<DeviceMapping>>,
            #[serde(skip_serializing_if = "Option::is_none")]
            pub device_cgroup_rules: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none")]
            pub device_requests: Option<Vec<DeviceRequest>>,
            #[serde(rename = "KernelMemoryTCP")]
            #[serde(skip_serializing_if = "Option::is_none")]
            pub kernel_memory_tcp: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none")]
            pub memory_reservation: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none")]
            pub memory_swap: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none")]
            pub memory_swappiness: Option<i64>,
            #[serde(rename = "NanoCPUs")]
            #[serde(skip_serializing_if = "Option::is_none")]
            pub nano_cpus: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none")]
            pub oom_kill_disable: Option<bool>,
            #[serde(skip_serializing_if = "Option::is_none")]
            pub init: Option<bool>,
            #[serde(skip_serializing_if = "Option::is_none")]
            pub pids_limit: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none")]
            pub ulimits: Option<Vec<Ulimit>>,
            #[serde(skip_serializing_if = "Option::is_none")]
            pub cpu_count: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none")]
            pub cpu_percent: Option<i64>,
            #[serde(rename = "IOMaximumIOps")]
            #[serde(skip_serializing_if = "Option::is_none")]
            pub io_maximum_iops: Option<u64>,
            #[serde(rename = "IOMaximumBandwith")]
            #[serde(skip_serializing_if = "Option::is_none")]
            pub io_maximum_bandwith: Option<u64>,
            #[serde(skip_serializing_if = "Option::is_none")]
            pub binds: Option<Vec<String>>,
            #[serde(rename = "ContainerIDFile")]
            #[serde(skip_serializing_if = "Option::is_none")]
            pub container_id_file: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none")]
            pub log_config: Option<LogConfig>,
            #[serde(skip_serializing_if = "Option::is_none")]
            pub network_mode: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none")]
            pub port_bindings: Option<PortMap>,
            #[serde(skip_serializing_if = "Option::is_none")]
            pub restart_policy: Option<RestartPolicy>,
            #[serde(skip_serializing_if = "Option::is_none")]
            pub auto_remove: Option<bool>,
            #[serde(skip_serializing_if = "Option::is_none")]
            pub volume_driver: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none")]
            pub volumes_from: Option<Option<Vec<String>>>,
            #[serde(skip_serializing_if = "Option::is_none")]
            pub mounts: Option<Vec<Mount>>,
            #[serde(skip_serializing_if = "Option::is_none")]
            pub cap_add: Option<Vec<String>>,
            #[serde(skip_serializing_if = "Option::is_none")]
            pub cap_drop: Option<Vec<String>>,
            #[serde(rename = "CgroupnsMode")]
            #[serde(skip_serializing_if = "Option::is_none")]
            pub c_groupns_mode: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none")]
            pub dns: Option<Vec<String>>,
            #[serde(skip_serializing_if = "Option::is_none")]
            pub dns_options: Option<Vec<String>>,
            #[serde(skip_serializing_if = "Option::is_none")]
            pub dns_search: Option<Vec<String>>,
            #[serde(skip_serializing_if = "Option::is_none")]
            pub extra_hosts: Option<Vec<String>>,
            #[serde(skip_serializing_if = "Option::is_none")]
            pub group_add: Option<Option<Vec<String>>>,
            #[serde(skip_serializing_if = "Option::is_none")]
            pub ipc_mode: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none")]
            pub cgroup: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none")]
            pub links: Option<Option<Vec<String>>>,
            #[serde(skip_serializing_if = "Option::is_none")]
            pub oom_score_adj: Option<i64>,
            #[serde(skip_serializing_if = "Option::is_none")]
            pub pid_mode: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none")]
            pub privileged: Option<bool>,
            #[serde(skip_serializing_if = "Option::is_none")]
            pub publish_all_ports: Option<bool>,
            #[serde(skip_serializing_if = "Option::is_none")]
            pub readonly_rootfs: Option<bool>,
            #[serde(skip_serializing_if = "Option::is_none")]
            pub security_opt: Option<Option<Vec<String>>>,
            #[serde(skip_serializing_if = "Option::is_none")]
            pub storage_opt: Option<Option<HashMap<String, String>>>,
            #[serde(skip_serializing_if = "Option::is_none")]
            pub tmpfs: Option<Option<HashMap<String, String>>>,
            #[serde(rename = "UTSMode")]
            #[serde(skip_serializing_if = "Option::is_none")]
            pub uts_mode: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none")]
            pub userns_mode: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none")]
            pub shm_size: Option<u64>,
            #[serde(skip_serializing_if = "Option::is_none")]
            pub sysctls: Option<Option<HashMap<String, String>>>,
            #[serde(skip_serializing_if = "Option::is_none")]
            pub runtime: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none")]
            pub isolation: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none")]
            pub masked_paths: Option<Vec<String>>,
            #[serde(skip_serializing_if = "Option::is_none")]
            pub readonly_paths: Option<Vec<String>>,
        }
        #[automatically_derived]
        impl ::core::clone::Clone for HostConfig {
            #[inline]
            fn clone(&self) -> HostConfig {
                HostConfig {
                    cpu_shares: ::core::clone::Clone::clone(&self.cpu_shares),
                    memory: ::core::clone::Clone::clone(&self.memory),
                    cgroup_parent: ::core::clone::Clone::clone(&self.cgroup_parent),
                    blkio_weight: ::core::clone::Clone::clone(&self.blkio_weight),
                    blkio_weight_device: ::core::clone::Clone::clone(
                        &self.blkio_weight_device,
                    ),
                    blkio_device_read_bps: ::core::clone::Clone::clone(
                        &self.blkio_device_read_bps,
                    ),
                    blkio_device_write_bps: ::core::clone::Clone::clone(
                        &self.blkio_device_write_bps,
                    ),
                    blkio_device_read_iops: ::core::clone::Clone::clone(
                        &self.blkio_device_read_iops,
                    ),
                    blkio_device_write_iops: ::core::clone::Clone::clone(
                        &self.blkio_device_write_iops,
                    ),
                    cpu_period: ::core::clone::Clone::clone(&self.cpu_period),
                    cpu_quota: ::core::clone::Clone::clone(&self.cpu_quota),
                    cpu_realtime_period: ::core::clone::Clone::clone(
                        &self.cpu_realtime_period,
                    ),
                    cpu_realtime_runtime: ::core::clone::Clone::clone(
                        &self.cpu_realtime_runtime,
                    ),
                    cpuset_cpus: ::core::clone::Clone::clone(&self.cpuset_cpus),
                    cpuset_mems: ::core::clone::Clone::clone(&self.cpuset_mems),
                    devices: ::core::clone::Clone::clone(&self.devices),
                    device_cgroup_rules: ::core::clone::Clone::clone(
                        &self.device_cgroup_rules,
                    ),
                    device_requests: ::core::clone::Clone::clone(&self.device_requests),
                    kernel_memory_tcp: ::core::clone::Clone::clone(
                        &self.kernel_memory_tcp,
                    ),
                    memory_reservation: ::core::clone::Clone::clone(
                        &self.memory_reservation,
                    ),
                    memory_swap: ::core::clone::Clone::clone(&self.memory_swap),
                    memory_swappiness: ::core::clone::Clone::clone(
                        &self.memory_swappiness,
                    ),
                    nano_cpus: ::core::clone::Clone::clone(&self.nano_cpus),
                    oom_kill_disable: ::core::clone::Clone::clone(
                        &self.oom_kill_disable,
                    ),
                    init: ::core::clone::Clone::clone(&self.init),
                    pids_limit: ::core::clone::Clone::clone(&self.pids_limit),
                    ulimits: ::core::clone::Clone::clone(&self.ulimits),
                    cpu_count: ::core::clone::Clone::clone(&self.cpu_count),
                    cpu_percent: ::core::clone::Clone::clone(&self.cpu_percent),
                    io_maximum_iops: ::core::clone::Clone::clone(&self.io_maximum_iops),
                    io_maximum_bandwith: ::core::clone::Clone::clone(
                        &self.io_maximum_bandwith,
                    ),
                    binds: ::core::clone::Clone::clone(&self.binds),
                    container_id_file: ::core::clone::Clone::clone(
                        &self.container_id_file,
                    ),
                    log_config: ::core::clone::Clone::clone(&self.log_config),
                    network_mode: ::core::clone::Clone::clone(&self.network_mode),
                    port_bindings: ::core::clone::Clone::clone(&self.port_bindings),
                    restart_policy: ::core::clone::Clone::clone(&self.restart_policy),
                    auto_remove: ::core::clone::Clone::clone(&self.auto_remove),
                    volume_driver: ::core::clone::Clone::clone(&self.volume_driver),
                    volumes_from: ::core::clone::Clone::clone(&self.volumes_from),
                    mounts: ::core::clone::Clone::clone(&self.mounts),
                    cap_add: ::core::clone::Clone::clone(&self.cap_add),
                    cap_drop: ::core::clone::Clone::clone(&self.cap_drop),
                    c_groupns_mode: ::core::clone::Clone::clone(&self.c_groupns_mode),
                    dns: ::core::clone::Clone::clone(&self.dns),
                    dns_options: ::core::clone::Clone::clone(&self.dns_options),
                    dns_search: ::core::clone::Clone::clone(&self.dns_search),
                    extra_hosts: ::core::clone::Clone::clone(&self.extra_hosts),
                    group_add: ::core::clone::Clone::clone(&self.group_add),
                    ipc_mode: ::core::clone::Clone::clone(&self.ipc_mode),
                    cgroup: ::core::clone::Clone::clone(&self.cgroup),
                    links: ::core::clone::Clone::clone(&self.links),
                    oom_score_adj: ::core::clone::Clone::clone(&self.oom_score_adj),
                    pid_mode: ::core::clone::Clone::clone(&self.pid_mode),
                    privileged: ::core::clone::Clone::clone(&self.privileged),
                    publish_all_ports: ::core::clone::Clone::clone(
                        &self.publish_all_ports,
                    ),
                    readonly_rootfs: ::core::clone::Clone::clone(&self.readonly_rootfs),
                    security_opt: ::core::clone::Clone::clone(&self.security_opt),
                    storage_opt: ::core::clone::Clone::clone(&self.storage_opt),
                    tmpfs: ::core::clone::Clone::clone(&self.tmpfs),
                    uts_mode: ::core::clone::Clone::clone(&self.uts_mode),
                    userns_mode: ::core::clone::Clone::clone(&self.userns_mode),
                    shm_size: ::core::clone::Clone::clone(&self.shm_size),
                    sysctls: ::core::clone::Clone::clone(&self.sysctls),
                    runtime: ::core::clone::Clone::clone(&self.runtime),
                    isolation: ::core::clone::Clone::clone(&self.isolation),
                    masked_paths: ::core::clone::Clone::clone(&self.masked_paths),
                    readonly_paths: ::core::clone::Clone::clone(&self.readonly_paths),
                }
            }
        }
        #[automatically_derived]
        impl ::core::fmt::Debug for HostConfig {
            #[inline]
            fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                let names: &'static _ = &[
                    "cpu_shares",
                    "memory",
                    "cgroup_parent",
                    "blkio_weight",
                    "blkio_weight_device",
                    "blkio_device_read_bps",
                    "blkio_device_write_bps",
                    "blkio_device_read_iops",
                    "blkio_device_write_iops",
                    "cpu_period",
                    "cpu_quota",
                    "cpu_realtime_period",
                    "cpu_realtime_runtime",
                    "cpuset_cpus",
                    "cpuset_mems",
                    "devices",
                    "device_cgroup_rules",
                    "device_requests",
                    "kernel_memory_tcp",
                    "memory_reservation",
                    "memory_swap",
                    "memory_swappiness",
                    "nano_cpus",
                    "oom_kill_disable",
                    "init",
                    "pids_limit",
                    "ulimits",
                    "cpu_count",
                    "cpu_percent",
                    "io_maximum_iops",
                    "io_maximum_bandwith",
                    "binds",
                    "container_id_file",
                    "log_config",
                    "network_mode",
                    "port_bindings",
                    "restart_policy",
                    "auto_remove",
                    "volume_driver",
                    "volumes_from",
                    "mounts",
                    "cap_add",
                    "cap_drop",
                    "c_groupns_mode",
                    "dns",
                    "dns_options",
                    "dns_search",
                    "extra_hosts",
                    "group_add",
                    "ipc_mode",
                    "cgroup",
                    "links",
                    "oom_score_adj",
                    "pid_mode",
                    "privileged",
                    "publish_all_ports",
                    "readonly_rootfs",
                    "security_opt",
                    "storage_opt",
                    "tmpfs",
                    "uts_mode",
                    "userns_mode",
                    "shm_size",
                    "sysctls",
                    "runtime",
                    "isolation",
                    "masked_paths",
                    "readonly_paths",
                ];
                let values: &[&dyn ::core::fmt::Debug] = &[
                    &self.cpu_shares,
                    &self.memory,
                    &self.cgroup_parent,
                    &self.blkio_weight,
                    &self.blkio_weight_device,
                    &self.blkio_device_read_bps,
                    &self.blkio_device_write_bps,
                    &self.blkio_device_read_iops,
                    &self.blkio_device_write_iops,
                    &self.cpu_period,
                    &self.cpu_quota,
                    &self.cpu_realtime_period,
                    &self.cpu_realtime_runtime,
                    &self.cpuset_cpus,
                    &self.cpuset_mems,
                    &self.devices,
                    &self.device_cgroup_rules,
                    &self.device_requests,
                    &self.kernel_memory_tcp,
                    &self.memory_reservation,
                    &self.memory_swap,
                    &self.memory_swappiness,
                    &self.nano_cpus,
                    &self.oom_kill_disable,
                    &self.init,
                    &self.pids_limit,
                    &self.ulimits,
                    &self.cpu_count,
                    &self.cpu_percent,
                    &self.io_maximum_iops,
                    &self.io_maximum_bandwith,
                    &self.binds,
                    &self.container_id_file,
                    &self.log_config,
                    &self.network_mode,
                    &self.port_bindings,
                    &self.restart_policy,
                    &self.auto_remove,
                    &self.volume_driver,
                    &self.volumes_from,
                    &self.mounts,
                    &self.cap_add,
                    &self.cap_drop,
                    &self.c_groupns_mode,
                    &self.dns,
                    &self.dns_options,
                    &self.dns_search,
                    &self.extra_hosts,
                    &self.group_add,
                    &self.ipc_mode,
                    &self.cgroup,
                    &self.links,
                    &self.oom_score_adj,
                    &self.pid_mode,
                    &self.privileged,
                    &self.publish_all_ports,
                    &self.readonly_rootfs,
                    &self.security_opt,
                    &self.storage_opt,
                    &self.tmpfs,
                    &self.uts_mode,
                    &self.userns_mode,
                    &self.shm_size,
                    &self.sysctls,
                    &self.runtime,
                    &self.isolation,
                    &self.masked_paths,
                    &&self.readonly_paths,
                ];
                ::core::fmt::Formatter::debug_struct_fields_finish(
                    f,
                    "HostConfig",
                    names,
                    values,
                )
            }
        }
        #[doc(hidden)]
        #[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
        const _: () = {
            #[allow(unused_extern_crates, clippy::useless_attribute)]
            extern crate serde as _serde;
            #[automatically_derived]
            impl _serde::Serialize for HostConfig {
                fn serialize<__S>(
                    &self,
                    __serializer: __S,
                ) -> _serde::__private::Result<__S::Ok, __S::Error>
                where
                    __S: _serde::Serializer,
                {
                    let mut __serde_state = _serde::Serializer::serialize_struct(
                        __serializer,
                        "HostConfig",
                        false as usize
                            + if Option::is_none(&self.cpu_shares) { 0 } else { 1 }
                            + if Option::is_none(&self.memory) { 0 } else { 1 }
                            + if Option::is_none(&self.cgroup_parent) { 0 } else { 1 }
                            + if Option::is_none(&self.blkio_weight) { 0 } else { 1 }
                            + if Option::is_none(&self.blkio_weight_device) {
                                0
                            } else {
                                1
                            }
                            + if Option::is_none(&self.blkio_device_read_bps) {
                                0
                            } else {
                                1
                            }
                            + if Option::is_none(&self.blkio_device_write_bps) {
                                0
                            } else {
                                1
                            }
                            + if Option::is_none(&self.blkio_device_read_iops) {
                                0
                            } else {
                                1
                            }
                            + if Option::is_none(&self.blkio_device_write_iops) {
                                0
                            } else {
                                1
                            } + if Option::is_none(&self.cpu_period) { 0 } else { 1 }
                            + if Option::is_none(&self.cpu_quota) { 0 } else { 1 }
                            + if Option::is_none(&self.cpu_realtime_period) {
                                0
                            } else {
                                1
                            }
                            + if Option::is_none(&self.cpu_realtime_runtime) {
                                0
                            } else {
                                1
                            } + if Option::is_none(&self.cpuset_cpus) { 0 } else { 1 }
                            + if Option::is_none(&self.cpuset_mems) { 0 } else { 1 }
                            + if Option::is_none(&self.devices) { 0 } else { 1 }
                            + if Option::is_none(&self.device_cgroup_rules) {
                                0
                            } else {
                                1
                            }
                            + if Option::is_none(&self.device_requests) { 0 } else { 1 }
                            + if Option::is_none(&self.kernel_memory_tcp) {
                                0
                            } else {
                                1
                            }
                            + if Option::is_none(&self.memory_reservation) {
                                0
                            } else {
                                1
                            } + if Option::is_none(&self.memory_swap) { 0 } else { 1 }
                            + if Option::is_none(&self.memory_swappiness) {
                                0
                            } else {
                                1
                            } + if Option::is_none(&self.nano_cpus) { 0 } else { 1 }
                            + if Option::is_none(&self.oom_kill_disable) { 0 } else { 1 }
                            + if Option::is_none(&self.init) { 0 } else { 1 }
                            + if Option::is_none(&self.pids_limit) { 0 } else { 1 }
                            + if Option::is_none(&self.ulimits) { 0 } else { 1 }
                            + if Option::is_none(&self.cpu_count) { 0 } else { 1 }
                            + if Option::is_none(&self.cpu_percent) { 0 } else { 1 }
                            + if Option::is_none(&self.io_maximum_iops) { 0 } else { 1 }
                            + if Option::is_none(&self.io_maximum_bandwith) {
                                0
                            } else {
                                1
                            } + if Option::is_none(&self.binds) { 0 } else { 1 }
                            + if Option::is_none(&self.container_id_file) {
                                0
                            } else {
                                1
                            } + if Option::is_none(&self.log_config) { 0 } else { 1 }
                            + if Option::is_none(&self.network_mode) { 0 } else { 1 }
                            + if Option::is_none(&self.port_bindings) { 0 } else { 1 }
                            + if Option::is_none(&self.restart_policy) { 0 } else { 1 }
                            + if Option::is_none(&self.auto_remove) { 0 } else { 1 }
                            + if Option::is_none(&self.volume_driver) { 0 } else { 1 }
                            + if Option::is_none(&self.volumes_from) { 0 } else { 1 }
                            + if Option::is_none(&self.mounts) { 0 } else { 1 }
                            + if Option::is_none(&self.cap_add) { 0 } else { 1 }
                            + if Option::is_none(&self.cap_drop) { 0 } else { 1 }
                            + if Option::is_none(&self.c_groupns_mode) { 0 } else { 1 }
                            + if Option::is_none(&self.dns) { 0 } else { 1 }
                            + if Option::is_none(&self.dns_options) { 0 } else { 1 }
                            + if Option::is_none(&self.dns_search) { 0 } else { 1 }
                            + if Option::is_none(&self.extra_hosts) { 0 } else { 1 }
                            + if Option::is_none(&self.group_add) { 0 } else { 1 }
                            + if Option::is_none(&self.ipc_mode) { 0 } else { 1 }
                            + if Option::is_none(&self.cgroup) { 0 } else { 1 }
                            + if Option::is_none(&self.links) { 0 } else { 1 }
                            + if Option::is_none(&self.oom_score_adj) { 0 } else { 1 }
                            + if Option::is_none(&self.pid_mode) { 0 } else { 1 }
                            + if Option::is_none(&self.privileged) { 0 } else { 1 }
                            + if Option::is_none(&self.publish_all_ports) {
                                0
                            } else {
                                1
                            }
                            + if Option::is_none(&self.readonly_rootfs) { 0 } else { 1 }
                            + if Option::is_none(&self.security_opt) { 0 } else { 1 }
                            + if Option::is_none(&self.storage_opt) { 0 } else { 1 }
                            + if Option::is_none(&self.tmpfs) { 0 } else { 1 }
                            + if Option::is_none(&self.uts_mode) { 0 } else { 1 }
                            + if Option::is_none(&self.userns_mode) { 0 } else { 1 }
                            + if Option::is_none(&self.shm_size) { 0 } else { 1 }
                            + if Option::is_none(&self.sysctls) { 0 } else { 1 }
                            + if Option::is_none(&self.runtime) { 0 } else { 1 }
                            + if Option::is_none(&self.isolation) { 0 } else { 1 }
                            + if Option::is_none(&self.masked_paths) { 0 } else { 1 }
                            + if Option::is_none(&self.readonly_paths) { 0 } else { 1 },
                    )?;
                    if !Option::is_none(&self.cpu_shares) {
                        _serde::ser::SerializeStruct::serialize_field(
                            &mut __serde_state,
                            "CpuShares",
                            &self.cpu_shares,
                        )?;
                    } else {
                        _serde::ser::SerializeStruct::skip_field(
                            &mut __serde_state,
                            "CpuShares",
                        )?;
                    }
                    if !Option::is_none(&self.memory) {
                        _serde::ser::SerializeStruct::serialize_field(
                            &mut __serde_state,
                            "Memory",
                            &self.memory,
                        )?;
                    } else {
                        _serde::ser::SerializeStruct::skip_field(
                            &mut __serde_state,
                            "Memory",
                        )?;
                    }
                    if !Option::is_none(&self.cgroup_parent) {
                        _serde::ser::SerializeStruct::serialize_field(
                            &mut __serde_state,
                            "CgroupParent",
                            &self.cgroup_parent,
                        )?;
                    } else {
                        _serde::ser::SerializeStruct::skip_field(
                            &mut __serde_state,
                            "CgroupParent",
                        )?;
                    }
                    if !Option::is_none(&self.blkio_weight) {
                        _serde::ser::SerializeStruct::serialize_field(
                            &mut __serde_state,
                            "BlkioWeight",
                            &self.blkio_weight,
                        )?;
                    } else {
                        _serde::ser::SerializeStruct::skip_field(
                            &mut __serde_state,
                            "BlkioWeight",
                        )?;
                    }
                    if !Option::is_none(&self.blkio_weight_device) {
                        _serde::ser::SerializeStruct::serialize_field(
                            &mut __serde_state,
                            "BlkioWeightDevice",
                            &self.blkio_weight_device,
                        )?;
                    } else {
                        _serde::ser::SerializeStruct::skip_field(
                            &mut __serde_state,
                            "BlkioWeightDevice",
                        )?;
                    }
                    if !Option::is_none(&self.blkio_device_read_bps) {
                        _serde::ser::SerializeStruct::serialize_field(
                            &mut __serde_state,
                            "BlkioDeviceReadBps",
                            &self.blkio_device_read_bps,
                        )?;
                    } else {
                        _serde::ser::SerializeStruct::skip_field(
                            &mut __serde_state,
                            "BlkioDeviceReadBps",
                        )?;
                    }
                    if !Option::is_none(&self.blkio_device_write_bps) {
                        _serde::ser::SerializeStruct::serialize_field(
                            &mut __serde_state,
                            "BlkioDeviceWriteBps",
                            &self.blkio_device_write_bps,
                        )?;
                    } else {
                        _serde::ser::SerializeStruct::skip_field(
                            &mut __serde_state,
                            "BlkioDeviceWriteBps",
                        )?;
                    }
                    if !Option::is_none(&self.blkio_device_read_iops) {
                        _serde::ser::SerializeStruct::serialize_field(
                            &mut __serde_state,
                            "BlkioDeviceReadIOps",
                            &self.blkio_device_read_iops,
                        )?;
                    } else {
                        _serde::ser::SerializeStruct::skip_field(
                            &mut __serde_state,
                            "BlkioDeviceReadIOps",
                        )?;
                    }
                    if !Option::is_none(&self.blkio_device_write_iops) {
                        _serde::ser::SerializeStruct::serialize_field(
                            &mut __serde_state,
                            "BlkioDeviceWriteIOps",
                            &self.blkio_device_write_iops,
                        )?;
                    } else {
                        _serde::ser::SerializeStruct::skip_field(
                            &mut __serde_state,
                            "BlkioDeviceWriteIOps",
                        )?;
                    }
                    if !Option::is_none(&self.cpu_period) {
                        _serde::ser::SerializeStruct::serialize_field(
                            &mut __serde_state,
                            "CpuPeriod",
                            &self.cpu_period,
                        )?;
                    } else {
                        _serde::ser::SerializeStruct::skip_field(
                            &mut __serde_state,
                            "CpuPeriod",
                        )?;
                    }
                    if !Option::is_none(&self.cpu_quota) {
                        _serde::ser::SerializeStruct::serialize_field(
                            &mut __serde_state,
                            "CpuQuota",
                            &self.cpu_quota,
                        )?;
                    } else {
                        _serde::ser::SerializeStruct::skip_field(
                            &mut __serde_state,
                            "CpuQuota",
                        )?;
                    }
                    if !Option::is_none(&self.cpu_realtime_period) {
                        _serde::ser::SerializeStruct::serialize_field(
                            &mut __serde_state,
                            "CpuRealtimePeriod",
                            &self.cpu_realtime_period,
                        )?;
                    } else {
                        _serde::ser::SerializeStruct::skip_field(
                            &mut __serde_state,
                            "CpuRealtimePeriod",
                        )?;
                    }
                    if !Option::is_none(&self.cpu_realtime_runtime) {
                        _serde::ser::SerializeStruct::serialize_field(
                            &mut __serde_state,
                            "CpuRealtimeRuntime",
                            &self.cpu_realtime_runtime,
                        )?;
                    } else {
                        _serde::ser::SerializeStruct::skip_field(
                            &mut __serde_state,
                            "CpuRealtimeRuntime",
                        )?;
                    }
                    if !Option::is_none(&self.cpuset_cpus) {
                        _serde::ser::SerializeStruct::serialize_field(
                            &mut __serde_state,
                            "CpusetCpus",
                            &self.cpuset_cpus,
                        )?;
                    } else {
                        _serde::ser::SerializeStruct::skip_field(
                            &mut __serde_state,
                            "CpusetCpus",
                        )?;
                    }
                    if !Option::is_none(&self.cpuset_mems) {
                        _serde::ser::SerializeStruct::serialize_field(
                            &mut __serde_state,
                            "CpusetMems",
                            &self.cpuset_mems,
                        )?;
                    } else {
                        _serde::ser::SerializeStruct::skip_field(
                            &mut __serde_state,
                            "CpusetMems",
                        )?;
                    }
                    if !Option::is_none(&self.devices) {
                        _serde::ser::SerializeStruct::serialize_field(
                            &mut __serde_state,
                            "Devices",
                            &self.devices,
                        )?;
                    } else {
                        _serde::ser::SerializeStruct::skip_field(
                            &mut __serde_state,
                            "Devices",
                        )?;
                    }
                    if !Option::is_none(&self.device_cgroup_rules) {
                        _serde::ser::SerializeStruct::serialize_field(
                            &mut __serde_state,
                            "DeviceCgroupRules",
                            &self.device_cgroup_rules,
                        )?;
                    } else {
                        _serde::ser::SerializeStruct::skip_field(
                            &mut __serde_state,
                            "DeviceCgroupRules",
                        )?;
                    }
                    if !Option::is_none(&self.device_requests) {
                        _serde::ser::SerializeStruct::serialize_field(
                            &mut __serde_state,
                            "DeviceRequests",
                            &self.device_requests,
                        )?;
                    } else {
                        _serde::ser::SerializeStruct::skip_field(
                            &mut __serde_state,
                            "DeviceRequests",
                        )?;
                    }
                    if !Option::is_none(&self.kernel_memory_tcp) {
                        _serde::ser::SerializeStruct::serialize_field(
                            &mut __serde_state,
                            "KernelMemoryTCP",
                            &self.kernel_memory_tcp,
                        )?;
                    } else {
                        _serde::ser::SerializeStruct::skip_field(
                            &mut __serde_state,
                            "KernelMemoryTCP",
                        )?;
                    }
                    if !Option::is_none(&self.memory_reservation) {
                        _serde::ser::SerializeStruct::serialize_field(
                            &mut __serde_state,
                            "MemoryReservation",
                            &self.memory_reservation,
                        )?;
                    } else {
                        _serde::ser::SerializeStruct::skip_field(
                            &mut __serde_state,
                            "MemoryReservation",
                        )?;
                    }
                    if !Option::is_none(&self.memory_swap) {
                        _serde::ser::SerializeStruct::serialize_field(
                            &mut __serde_state,
                            "MemorySwap",
                            &self.memory_swap,
                        )?;
                    } else {
                        _serde::ser::SerializeStruct::skip_field(
                            &mut __serde_state,
                            "MemorySwap",
                        )?;
                    }
                    if !Option::is_none(&self.memory_swappiness) {
                        _serde::ser::SerializeStruct::serialize_field(
                            &mut __serde_state,
                            "MemorySwappiness",
                            &self.memory_swappiness,
                        )?;
                    } else {
                        _serde::ser::SerializeStruct::skip_field(
                            &mut __serde_state,
                            "MemorySwappiness",
                        )?;
                    }
                    if !Option::is_none(&self.nano_cpus) {
                        _serde::ser::SerializeStruct::serialize_field(
                            &mut __serde_state,
                            "NanoCPUs",
                            &self.nano_cpus,
                        )?;
                    } else {
                        _serde::ser::SerializeStruct::skip_field(
                            &mut __serde_state,
                            "NanoCPUs",
                        )?;
                    }
                    if !Option::is_none(&self.oom_kill_disable) {
                        _serde::ser::SerializeStruct::serialize_field(
                            &mut __serde_state,
                            "OomKillDisable",
                            &self.oom_kill_disable,
                        )?;
                    } else {
                        _serde::ser::SerializeStruct::skip_field(
                            &mut __serde_state,
                            "OomKillDisable",
                        )?;
                    }
                    if !Option::is_none(&self.init) {
                        _serde::ser::SerializeStruct::serialize_field(
                            &mut __serde_state,
                            "Init",
                            &self.init,
                        )?;
                    } else {
                        _serde::ser::SerializeStruct::skip_field(
                            &mut __serde_state,
                            "Init",
                        )?;
                    }
                    if !Option::is_none(&self.pids_limit) {
                        _serde::ser::SerializeStruct::serialize_field(
                            &mut __serde_state,
                            "PidsLimit",
                            &self.pids_limit,
                        )?;
                    } else {
                        _serde::ser::SerializeStruct::skip_field(
                            &mut __serde_state,
                            "PidsLimit",
                        )?;
                    }
                    if !Option::is_none(&self.ulimits) {
                        _serde::ser::SerializeStruct::serialize_field(
                            &mut __serde_state,
                            "Ulimits",
                            &self.ulimits,
                        )?;
                    } else {
                        _serde::ser::SerializeStruct::skip_field(
                            &mut __serde_state,
                            "Ulimits",
                        )?;
                    }
                    if !Option::is_none(&self.cpu_count) {
                        _serde::ser::SerializeStruct::serialize_field(
                            &mut __serde_state,
                            "CpuCount",
                            &self.cpu_count,
                        )?;
                    } else {
                        _serde::ser::SerializeStruct::skip_field(
                            &mut __serde_state,
                            "CpuCount",
                        )?;
                    }
                    if !Option::is_none(&self.cpu_percent) {
                        _serde::ser::SerializeStruct::serialize_field(
                            &mut __serde_state,
                            "CpuPercent",
                            &self.cpu_percent,
                        )?;
                    } else {
                        _serde::ser::SerializeStruct::skip_field(
                            &mut __serde_state,
                            "CpuPercent",
                        )?;
                    }
                    if !Option::is_none(&self.io_maximum_iops) {
                        _serde::ser::SerializeStruct::serialize_field(
                            &mut __serde_state,
                            "IOMaximumIOps",
                            &self.io_maximum_iops,
                        )?;
                    } else {
                        _serde::ser::SerializeStruct::skip_field(
                            &mut __serde_state,
                            "IOMaximumIOps",
                        )?;
                    }
                    if !Option::is_none(&self.io_maximum_bandwith) {
                        _serde::ser::SerializeStruct::serialize_field(
                            &mut __serde_state,
                            "IOMaximumBandwith",
                            &self.io_maximum_bandwith,
                        )?;
                    } else {
                        _serde::ser::SerializeStruct::skip_field(
                            &mut __serde_state,
                            "IOMaximumBandwith",
                        )?;
                    }
                    if !Option::is_none(&self.binds) {
                        _serde::ser::SerializeStruct::serialize_field(
                            &mut __serde_state,
                            "Binds",
                            &self.binds,
                        )?;
                    } else {
                        _serde::ser::SerializeStruct::skip_field(
                            &mut __serde_state,
                            "Binds",
                        )?;
                    }
                    if !Option::is_none(&self.container_id_file) {
                        _serde::ser::SerializeStruct::serialize_field(
                            &mut __serde_state,
                            "ContainerIDFile",
                            &self.container_id_file,
                        )?;
                    } else {
                        _serde::ser::SerializeStruct::skip_field(
                            &mut __serde_state,
                            "ContainerIDFile",
                        )?;
                    }
                    if !Option::is_none(&self.log_config) {
                        _serde::ser::SerializeStruct::serialize_field(
                            &mut __serde_state,
                            "LogConfig",
                            &self.log_config,
                        )?;
                    } else {
                        _serde::ser::SerializeStruct::skip_field(
                            &mut __serde_state,
                            "LogConfig",
                        )?;
                    }
                    if !Option::is_none(&self.network_mode) {
                        _serde::ser::SerializeStruct::serialize_field(
                            &mut __serde_state,
                            "NetworkMode",
                            &self.network_mode,
                        )?;
                    } else {
                        _serde::ser::SerializeStruct::skip_field(
                            &mut __serde_state,
                            "NetworkMode",
                        )?;
                    }
                    if !Option::is_none(&self.port_bindings) {
                        _serde::ser::SerializeStruct::serialize_field(
                            &mut __serde_state,
                            "PortBindings",
                            &self.port_bindings,
                        )?;
                    } else {
                        _serde::ser::SerializeStruct::skip_field(
                            &mut __serde_state,
                            "PortBindings",
                        )?;
                    }
                    if !Option::is_none(&self.restart_policy) {
                        _serde::ser::SerializeStruct::serialize_field(
                            &mut __serde_state,
                            "RestartPolicy",
                            &self.restart_policy,
                        )?;
                    } else {
                        _serde::ser::SerializeStruct::skip_field(
                            &mut __serde_state,
                            "RestartPolicy",
                        )?;
                    }
                    if !Option::is_none(&self.auto_remove) {
                        _serde::ser::SerializeStruct::serialize_field(
                            &mut __serde_state,
                            "AutoRemove",
                            &self.auto_remove,
                        )?;
                    } else {
                        _serde::ser::SerializeStruct::skip_field(
                            &mut __serde_state,
                            "AutoRemove",
                        )?;
                    }
                    if !Option::is_none(&self.volume_driver) {
                        _serde::ser::SerializeStruct::serialize_field(
                            &mut __serde_state,
                            "VolumeDriver",
                            &self.volume_driver,
                        )?;
                    } else {
                        _serde::ser::SerializeStruct::skip_field(
                            &mut __serde_state,
                            "VolumeDriver",
                        )?;
                    }
                    if !Option::is_none(&self.volumes_from) {
                        _serde::ser::SerializeStruct::serialize_field(
                            &mut __serde_state,
                            "VolumesFrom",
                            &self.volumes_from,
                        )?;
                    } else {
                        _serde::ser::SerializeStruct::skip_field(
                            &mut __serde_state,
                            "VolumesFrom",
                        )?;
                    }
                    if !Option::is_none(&self.mounts) {
                        _serde::ser::SerializeStruct::serialize_field(
                            &mut __serde_state,
                            "Mounts",
                            &self.mounts,
                        )?;
                    } else {
                        _serde::ser::SerializeStruct::skip_field(
                            &mut __serde_state,
                            "Mounts",
                        )?;
                    }
                    if !Option::is_none(&self.cap_add) {
                        _serde::ser::SerializeStruct::serialize_field(
                            &mut __serde_state,
                            "CapAdd",
                            &self.cap_add,
                        )?;
                    } else {
                        _serde::ser::SerializeStruct::skip_field(
                            &mut __serde_state,
                            "CapAdd",
                        )?;
                    }
                    if !Option::is_none(&self.cap_drop) {
                        _serde::ser::SerializeStruct::serialize_field(
                            &mut __serde_state,
                            "CapDrop",
                            &self.cap_drop,
                        )?;
                    } else {
                        _serde::ser::SerializeStruct::skip_field(
                            &mut __serde_state,
                            "CapDrop",
                        )?;
                    }
                    if !Option::is_none(&self.c_groupns_mode) {
                        _serde::ser::SerializeStruct::serialize_field(
                            &mut __serde_state,
                            "CgroupnsMode",
                            &self.c_groupns_mode,
                        )?;
                    } else {
                        _serde::ser::SerializeStruct::skip_field(
                            &mut __serde_state,
                            "CgroupnsMode",
                        )?;
                    }
                    if !Option::is_none(&self.dns) {
                        _serde::ser::SerializeStruct::serialize_field(
                            &mut __serde_state,
                            "Dns",
                            &self.dns,
                        )?;
                    } else {
                        _serde::ser::SerializeStruct::skip_field(
                            &mut __serde_state,
                            "Dns",
                        )?;
                    }
                    if !Option::is_none(&self.dns_options) {
                        _serde::ser::SerializeStruct::serialize_field(
                            &mut __serde_state,
                            "DnsOptions",
                            &self.dns_options,
                        )?;
                    } else {
                        _serde::ser::SerializeStruct::skip_field(
                            &mut __serde_state,
                            "DnsOptions",
                        )?;
                    }
                    if !Option::is_none(&self.dns_search) {
                        _serde::ser::SerializeStruct::serialize_field(
                            &mut __serde_state,
                            "DnsSearch",
                            &self.dns_search,
                        )?;
                    } else {
                        _serde::ser::SerializeStruct::skip_field(
                            &mut __serde_state,
                            "DnsSearch",
                        )?;
                    }
                    if !Option::is_none(&self.extra_hosts) {
                        _serde::ser::SerializeStruct::serialize_field(
                            &mut __serde_state,
                            "ExtraHosts",
                            &self.extra_hosts,
                        )?;
                    } else {
                        _serde::ser::SerializeStruct::skip_field(
                            &mut __serde_state,
                            "ExtraHosts",
                        )?;
                    }
                    if !Option::is_none(&self.group_add) {
                        _serde::ser::SerializeStruct::serialize_field(
                            &mut __serde_state,
                            "GroupAdd",
                            &self.group_add,
                        )?;
                    } else {
                        _serde::ser::SerializeStruct::skip_field(
                            &mut __serde_state,
                            "GroupAdd",
                        )?;
                    }
                    if !Option::is_none(&self.ipc_mode) {
                        _serde::ser::SerializeStruct::serialize_field(
                            &mut __serde_state,
                            "IpcMode",
                            &self.ipc_mode,
                        )?;
                    } else {
                        _serde::ser::SerializeStruct::skip_field(
                            &mut __serde_state,
                            "IpcMode",
                        )?;
                    }
                    if !Option::is_none(&self.cgroup) {
                        _serde::ser::SerializeStruct::serialize_field(
                            &mut __serde_state,
                            "Cgroup",
                            &self.cgroup,
                        )?;
                    } else {
                        _serde::ser::SerializeStruct::skip_field(
                            &mut __serde_state,
                            "Cgroup",
                        )?;
                    }
                    if !Option::is_none(&self.links) {
                        _serde::ser::SerializeStruct::serialize_field(
                            &mut __serde_state,
                            "Links",
                            &self.links,
                        )?;
                    } else {
                        _serde::ser::SerializeStruct::skip_field(
                            &mut __serde_state,
                            "Links",
                        )?;
                    }
                    if !Option::is_none(&self.oom_score_adj) {
                        _serde::ser::SerializeStruct::serialize_field(
                            &mut __serde_state,
                            "OomScoreAdj",
                            &self.oom_score_adj,
                        )?;
                    } else {
                        _serde::ser::SerializeStruct::skip_field(
                            &mut __serde_state,
                            "OomScoreAdj",
                        )?;
                    }
                    if !Option::is_none(&self.pid_mode) {
                        _serde::ser::SerializeStruct::serialize_field(
                            &mut __serde_state,
                            "PidMode",
                            &self.pid_mode,
                        )?;
                    } else {
                        _serde::ser::SerializeStruct::skip_field(
                            &mut __serde_state,
                            "PidMode",
                        )?;
                    }
                    if !Option::is_none(&self.privileged) {
                        _serde::ser::SerializeStruct::serialize_field(
                            &mut __serde_state,
                            "Privileged",
                            &self.privileged,
                        )?;
                    } else {
                        _serde::ser::SerializeStruct::skip_field(
                            &mut __serde_state,
                            "Privileged",
                        )?;
                    }
                    if !Option::is_none(&self.publish_all_ports) {
                        _serde::ser::SerializeStruct::serialize_field(
                            &mut __serde_state,
                            "PublishAllPorts",
                            &self.publish_all_ports,
                        )?;
                    } else {
                        _serde::ser::SerializeStruct::skip_field(
                            &mut __serde_state,
                            "PublishAllPorts",
                        )?;
                    }
                    if !Option::is_none(&self.readonly_rootfs) {
                        _serde::ser::SerializeStruct::serialize_field(
                            &mut __serde_state,
                            "ReadonlyRootfs",
                            &self.readonly_rootfs,
                        )?;
                    } else {
                        _serde::ser::SerializeStruct::skip_field(
                            &mut __serde_state,
                            "ReadonlyRootfs",
                        )?;
                    }
                    if !Option::is_none(&self.security_opt) {
                        _serde::ser::SerializeStruct::serialize_field(
                            &mut __serde_state,
                            "SecurityOpt",
                            &self.security_opt,
                        )?;
                    } else {
                        _serde::ser::SerializeStruct::skip_field(
                            &mut __serde_state,
                            "SecurityOpt",
                        )?;
                    }
                    if !Option::is_none(&self.storage_opt) {
                        _serde::ser::SerializeStruct::serialize_field(
                            &mut __serde_state,
                            "StorageOpt",
                            &self.storage_opt,
                        )?;
                    } else {
                        _serde::ser::SerializeStruct::skip_field(
                            &mut __serde_state,
                            "StorageOpt",
                        )?;
                    }
                    if !Option::is_none(&self.tmpfs) {
                        _serde::ser::SerializeStruct::serialize_field(
                            &mut __serde_state,
                            "Tmpfs",
                            &self.tmpfs,
                        )?;
                    } else {
                        _serde::ser::SerializeStruct::skip_field(
                            &mut __serde_state,
                            "Tmpfs",
                        )?;
                    }
                    if !Option::is_none(&self.uts_mode) {
                        _serde::ser::SerializeStruct::serialize_field(
                            &mut __serde_state,
                            "UTSMode",
                            &self.uts_mode,
                        )?;
                    } else {
                        _serde::ser::SerializeStruct::skip_field(
                            &mut __serde_state,
                            "UTSMode",
                        )?;
                    }
                    if !Option::is_none(&self.userns_mode) {
                        _serde::ser::SerializeStruct::serialize_field(
                            &mut __serde_state,
                            "UsernsMode",
                            &self.userns_mode,
                        )?;
                    } else {
                        _serde::ser::SerializeStruct::skip_field(
                            &mut __serde_state,
                            "UsernsMode",
                        )?;
                    }
                    if !Option::is_none(&self.shm_size) {
                        _serde::ser::SerializeStruct::serialize_field(
                            &mut __serde_state,
                            "ShmSize",
                            &self.shm_size,
                        )?;
                    } else {
                        _serde::ser::SerializeStruct::skip_field(
                            &mut __serde_state,
                            "ShmSize",
                        )?;
                    }
                    if !Option::is_none(&self.sysctls) {
                        _serde::ser::SerializeStruct::serialize_field(
                            &mut __serde_state,
                            "Sysctls",
                            &self.sysctls,
                        )?;
                    } else {
                        _serde::ser::SerializeStruct::skip_field(
                            &mut __serde_state,
                            "Sysctls",
                        )?;
                    }
                    if !Option::is_none(&self.runtime) {
                        _serde::ser::SerializeStruct::serialize_field(
                            &mut __serde_state,
                            "Runtime",
                            &self.runtime,
                        )?;
                    } else {
                        _serde::ser::SerializeStruct::skip_field(
                            &mut __serde_state,
                            "Runtime",
                        )?;
                    }
                    if !Option::is_none(&self.isolation) {
                        _serde::ser::SerializeStruct::serialize_field(
                            &mut __serde_state,
                            "Isolation",
                            &self.isolation,
                        )?;
                    } else {
                        _serde::ser::SerializeStruct::skip_field(
                            &mut __serde_state,
                            "Isolation",
                        )?;
                    }
                    if !Option::is_none(&self.masked_paths) {
                        _serde::ser::SerializeStruct::serialize_field(
                            &mut __serde_state,
                            "MaskedPaths",
                            &self.masked_paths,
                        )?;
                    } else {
                        _serde::ser::SerializeStruct::skip_field(
                            &mut __serde_state,
                            "MaskedPaths",
                        )?;
                    }
                    if !Option::is_none(&self.readonly_paths) {
                        _serde::ser::SerializeStruct::serialize_field(
                            &mut __serde_state,
                            "ReadonlyPaths",
                            &self.readonly_paths,
                        )?;
                    } else {
                        _serde::ser::SerializeStruct::skip_field(
                            &mut __serde_state,
                            "ReadonlyPaths",
                        )?;
                    }
                    _serde::ser::SerializeStruct::end(__serde_state)
                }
            }
        };
        #[doc(hidden)]
        #[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
        const _: () = {
            #[allow(unused_extern_crates, clippy::useless_attribute)]
            extern crate serde as _serde;
            #[automatically_derived]
            impl<'de> _serde::Deserialize<'de> for HostConfig {
                fn deserialize<__D>(
                    __deserializer: __D,
                ) -> _serde::__private::Result<Self, __D::Error>
                where
                    __D: _serde::Deserializer<'de>,
                {
                    #[allow(non_camel_case_types)]
                    #[doc(hidden)]
                    enum __Field {
                        __field0,
                        __field1,
                        __field2,
                        __field3,
                        __field4,
                        __field5,
                        __field6,
                        __field7,
                        __field8,
                        __field9,
                        __field10,
                        __field11,
                        __field12,
                        __field13,
                        __field14,
                        __field15,
                        __field16,
                        __field17,
                        __field18,
                        __field19,
                        __field20,
                        __field21,
                        __field22,
                        __field23,
                        __field24,
                        __field25,
                        __field26,
                        __field27,
                        __field28,
                        __field29,
                        __field30,
                        __field31,
                        __field32,
                        __field33,
                        __field34,
                        __field35,
                        __field36,
                        __field37,
                        __field38,
                        __field39,
                        __field40,
                        __field41,
                        __field42,
                        __field43,
                        __field44,
                        __field45,
                        __field46,
                        __field47,
                        __field48,
                        __field49,
                        __field50,
                        __field51,
                        __field52,
                        __field53,
                        __field54,
                        __field55,
                        __field56,
                        __field57,
                        __field58,
                        __field59,
                        __field60,
                        __field61,
                        __field62,
                        __field63,
                        __field64,
                        __field65,
                        __field66,
                        __field67,
                        __ignore,
                    }
                    #[doc(hidden)]
                    struct __FieldVisitor;
                    impl<'de> _serde::de::Visitor<'de> for __FieldVisitor {
                        type Value = __Field;
                        fn expecting(
                            &self,
                            __formatter: &mut _serde::__private::Formatter,
                        ) -> _serde::__private::fmt::Result {
                            _serde::__private::Formatter::write_str(
                                __formatter,
                                "field identifier",
                            )
                        }
                        fn visit_u64<__E>(
                            self,
                            __value: u64,
                        ) -> _serde::__private::Result<Self::Value, __E>
                        where
                            __E: _serde::de::Error,
                        {
                            match __value {
                                0u64 => _serde::__private::Ok(__Field::__field0),
                                1u64 => _serde::__private::Ok(__Field::__field1),
                                2u64 => _serde::__private::Ok(__Field::__field2),
                                3u64 => _serde::__private::Ok(__Field::__field3),
                                4u64 => _serde::__private::Ok(__Field::__field4),
                                5u64 => _serde::__private::Ok(__Field::__field5),
                                6u64 => _serde::__private::Ok(__Field::__field6),
                                7u64 => _serde::__private::Ok(__Field::__field7),
                                8u64 => _serde::__private::Ok(__Field::__field8),
                                9u64 => _serde::__private::Ok(__Field::__field9),
                                10u64 => _serde::__private::Ok(__Field::__field10),
                                11u64 => _serde::__private::Ok(__Field::__field11),
                                12u64 => _serde::__private::Ok(__Field::__field12),
                                13u64 => _serde::__private::Ok(__Field::__field13),
                                14u64 => _serde::__private::Ok(__Field::__field14),
                                15u64 => _serde::__private::Ok(__Field::__field15),
                                16u64 => _serde::__private::Ok(__Field::__field16),
                                17u64 => _serde::__private::Ok(__Field::__field17),
                                18u64 => _serde::__private::Ok(__Field::__field18),
                                19u64 => _serde::__private::Ok(__Field::__field19),
                                20u64 => _serde::__private::Ok(__Field::__field20),
                                21u64 => _serde::__private::Ok(__Field::__field21),
                                22u64 => _serde::__private::Ok(__Field::__field22),
                                23u64 => _serde::__private::Ok(__Field::__field23),
                                24u64 => _serde::__private::Ok(__Field::__field24),
                                25u64 => _serde::__private::Ok(__Field::__field25),
                                26u64 => _serde::__private::Ok(__Field::__field26),
                                27u64 => _serde::__private::Ok(__Field::__field27),
                                28u64 => _serde::__private::Ok(__Field::__field28),
                                29u64 => _serde::__private::Ok(__Field::__field29),
                                30u64 => _serde::__private::Ok(__Field::__field30),
                                31u64 => _serde::__private::Ok(__Field::__field31),
                                32u64 => _serde::__private::Ok(__Field::__field32),
                                33u64 => _serde::__private::Ok(__Field::__field33),
                                34u64 => _serde::__private::Ok(__Field::__field34),
                                35u64 => _serde::__private::Ok(__Field::__field35),
                                36u64 => _serde::__private::Ok(__Field::__field36),
                                37u64 => _serde::__private::Ok(__Field::__field37),
                                38u64 => _serde::__private::Ok(__Field::__field38),
                                39u64 => _serde::__private::Ok(__Field::__field39),
                                40u64 => _serde::__private::Ok(__Field::__field40),
                                41u64 => _serde::__private::Ok(__Field::__field41),
                                42u64 => _serde::__private::Ok(__Field::__field42),
                                43u64 => _serde::__private::Ok(__Field::__field43),
                                44u64 => _serde::__private::Ok(__Field::__field44),
                                45u64 => _serde::__private::Ok(__Field::__field45),
                                46u64 => _serde::__private::Ok(__Field::__field46),
                                47u64 => _serde::__private::Ok(__Field::__field47),
                                48u64 => _serde::__private::Ok(__Field::__field48),
                                49u64 => _serde::__private::Ok(__Field::__field49),
                                50u64 => _serde::__private::Ok(__Field::__field50),
                                51u64 => _serde::__private::Ok(__Field::__field51),
                                52u64 => _serde::__private::Ok(__Field::__field52),
                                53u64 => _serde::__private::Ok(__Field::__field53),
                                54u64 => _serde::__private::Ok(__Field::__field54),
                                55u64 => _serde::__private::Ok(__Field::__field55),
                                56u64 => _serde::__private::Ok(__Field::__field56),
                                57u64 => _serde::__private::Ok(__Field::__field57),
                                58u64 => _serde::__private::Ok(__Field::__field58),
                                59u64 => _serde::__private::Ok(__Field::__field59),
                                60u64 => _serde::__private::Ok(__Field::__field60),
                                61u64 => _serde::__private::Ok(__Field::__field61),
                                62u64 => _serde::__private::Ok(__Field::__field62),
                                63u64 => _serde::__private::Ok(__Field::__field63),
                                64u64 => _serde::__private::Ok(__Field::__field64),
                                65u64 => _serde::__private::Ok(__Field::__field65),
                                66u64 => _serde::__private::Ok(__Field::__field66),
                                67u64 => _serde::__private::Ok(__Field::__field67),
                                _ => _serde::__private::Ok(__Field::__ignore),
                            }
                        }
                        fn visit_str<__E>(
                            self,
                            __value: &str,
                        ) -> _serde::__private::Result<Self::Value, __E>
                        where
                            __E: _serde::de::Error,
                        {
                            match __value {
                                "CpuShares" => _serde::__private::Ok(__Field::__field0),
                                "Memory" => _serde::__private::Ok(__Field::__field1),
                                "CgroupParent" => _serde::__private::Ok(__Field::__field2),
                                "BlkioWeight" => _serde::__private::Ok(__Field::__field3),
                                "BlkioWeightDevice" => {
                                    _serde::__private::Ok(__Field::__field4)
                                }
                                "BlkioDeviceReadBps" => {
                                    _serde::__private::Ok(__Field::__field5)
                                }
                                "BlkioDeviceWriteBps" => {
                                    _serde::__private::Ok(__Field::__field6)
                                }
                                "BlkioDeviceReadIOps" => {
                                    _serde::__private::Ok(__Field::__field7)
                                }
                                "BlkioDeviceWriteIOps" => {
                                    _serde::__private::Ok(__Field::__field8)
                                }
                                "CpuPeriod" => _serde::__private::Ok(__Field::__field9),
                                "CpuQuota" => _serde::__private::Ok(__Field::__field10),
                                "CpuRealtimePeriod" => {
                                    _serde::__private::Ok(__Field::__field11)
                                }
                                "CpuRealtimeRuntime" => {
                                    _serde::__private::Ok(__Field::__field12)
                                }
                                "CpusetCpus" => _serde::__private::Ok(__Field::__field13),
                                "CpusetMems" => _serde::__private::Ok(__Field::__field14),
                                "Devices" => _serde::__private::Ok(__Field::__field15),
                                "DeviceCgroupRules" => {
                                    _serde::__private::Ok(__Field::__field16)
                                }
                                "DeviceRequests" => {
                                    _serde::__private::Ok(__Field::__field17)
                                }
                                "KernelMemoryTCP" => {
                                    _serde::__private::Ok(__Field::__field18)
                                }
                                "MemoryReservation" => {
                                    _serde::__private::Ok(__Field::__field19)
                                }
                                "MemorySwap" => _serde::__private::Ok(__Field::__field20),
                                "MemorySwappiness" => {
                                    _serde::__private::Ok(__Field::__field21)
                                }
                                "NanoCPUs" => _serde::__private::Ok(__Field::__field22),
                                "OomKillDisable" => {
                                    _serde::__private::Ok(__Field::__field23)
                                }
                                "Init" => _serde::__private::Ok(__Field::__field24),
                                "PidsLimit" => _serde::__private::Ok(__Field::__field25),
                                "Ulimits" => _serde::__private::Ok(__Field::__field26),
                                "CpuCount" => _serde::__private::Ok(__Field::__field27),
                                "CpuPercent" => _serde::__private::Ok(__Field::__field28),
                                "IOMaximumIOps" => _serde::__private::Ok(__Field::__field29),
                                "IOMaximumBandwith" => {
                                    _serde::__private::Ok(__Field::__field30)
                                }
                                "Binds" => _serde::__private::Ok(__Field::__field31),
                                "ContainerIDFile" => {
                                    _serde::__private::Ok(__Field::__field32)
                                }
                                "LogConfig" => _serde::__private::Ok(__Field::__field33),
                                "NetworkMode" => _serde::__private::Ok(__Field::__field34),
                                "PortBindings" => _serde::__private::Ok(__Field::__field35),
                                "RestartPolicy" => _serde::__private::Ok(__Field::__field36),
                                "AutoRemove" => _serde::__private::Ok(__Field::__field37),
                                "VolumeDriver" => _serde::__private::Ok(__Field::__field38),
                                "VolumesFrom" => _serde::__private::Ok(__Field::__field39),
                                "Mounts" => _serde::__private::Ok(__Field::__field40),
                                "CapAdd" => _serde::__private::Ok(__Field::__field41),
                                "CapDrop" => _serde::__private::Ok(__Field::__field42),
                                "CgroupnsMode" => _serde::__private::Ok(__Field::__field43),
                                "Dns" => _serde::__private::Ok(__Field::__field44),
                                "DnsOptions" => _serde::__private::Ok(__Field::__field45),
                                "DnsSearch" => _serde::__private::Ok(__Field::__field46),
                                "ExtraHosts" => _serde::__private::Ok(__Field::__field47),
                                "GroupAdd" => _serde::__private::Ok(__Field::__field48),
                                "IpcMode" => _serde::__private::Ok(__Field::__field49),
                                "Cgroup" => _serde::__private::Ok(__Field::__field50),
                                "Links" => _serde::__private::Ok(__Field::__field51),
                                "OomScoreAdj" => _serde::__private::Ok(__Field::__field52),
                                "PidMode" => _serde::__private::Ok(__Field::__field53),
                                "Privileged" => _serde::__private::Ok(__Field::__field54),
                                "PublishAllPorts" => {
                                    _serde::__private::Ok(__Field::__field55)
                                }
                                "ReadonlyRootfs" => {
                                    _serde::__private::Ok(__Field::__field56)
                                }
                                "SecurityOpt" => _serde::__private::Ok(__Field::__field57),
                                "StorageOpt" => _serde::__private::Ok(__Field::__field58),
                                "Tmpfs" => _serde::__private::Ok(__Field::__field59),
                                "UTSMode" => _serde::__private::Ok(__Field::__field60),
                                "UsernsMode" => _serde::__private::Ok(__Field::__field61),
                                "ShmSize" => _serde::__private::Ok(__Field::__field62),
                                "Sysctls" => _serde::__private::Ok(__Field::__field63),
                                "Runtime" => _serde::__private::Ok(__Field::__field64),
                                "Isolation" => _serde::__private::Ok(__Field::__field65),
                                "MaskedPaths" => _serde::__private::Ok(__Field::__field66),
                                "ReadonlyPaths" => _serde::__private::Ok(__Field::__field67),
                                _ => _serde::__private::Ok(__Field::__ignore),
                            }
                        }
                        fn visit_bytes<__E>(
                            self,
                            __value: &[u8],
                        ) -> _serde::__private::Result<Self::Value, __E>
                        where
                            __E: _serde::de::Error,
                        {
                            match __value {
                                b"CpuShares" => _serde::__private::Ok(__Field::__field0),
                                b"Memory" => _serde::__private::Ok(__Field::__field1),
                                b"CgroupParent" => _serde::__private::Ok(__Field::__field2),
                                b"BlkioWeight" => _serde::__private::Ok(__Field::__field3),
                                b"BlkioWeightDevice" => {
                                    _serde::__private::Ok(__Field::__field4)
                                }
                                b"BlkioDeviceReadBps" => {
                                    _serde::__private::Ok(__Field::__field5)
                                }
                                b"BlkioDeviceWriteBps" => {
                                    _serde::__private::Ok(__Field::__field6)
                                }
                                b"BlkioDeviceReadIOps" => {
                                    _serde::__private::Ok(__Field::__field7)
                                }
                                b"BlkioDeviceWriteIOps" => {
                                    _serde::__private::Ok(__Field::__field8)
                                }
                                b"CpuPeriod" => _serde::__private::Ok(__Field::__field9),
                                b"CpuQuota" => _serde::__private::Ok(__Field::__field10),
                                b"CpuRealtimePeriod" => {
                                    _serde::__private::Ok(__Field::__field11)
                                }
                                b"CpuRealtimeRuntime" => {
                                    _serde::__private::Ok(__Field::__field12)
                                }
                                b"CpusetCpus" => _serde::__private::Ok(__Field::__field13),
                                b"CpusetMems" => _serde::__private::Ok(__Field::__field14),
                                b"Devices" => _serde::__private::Ok(__Field::__field15),
                                b"DeviceCgroupRules" => {
                                    _serde::__private::Ok(__Field::__field16)
                                }
                                b"DeviceRequests" => {
                                    _serde::__private::Ok(__Field::__field17)
                                }
                                b"KernelMemoryTCP" => {
                                    _serde::__private::Ok(__Field::__field18)
                                }
                                b"MemoryReservation" => {
                                    _serde::__private::Ok(__Field::__field19)
                                }
                                b"MemorySwap" => _serde::__private::Ok(__Field::__field20),
                                b"MemorySwappiness" => {
                                    _serde::__private::Ok(__Field::__field21)
                                }
                                b"NanoCPUs" => _serde::__private::Ok(__Field::__field22),
                                b"OomKillDisable" => {
                                    _serde::__private::Ok(__Field::__field23)
                                }
                                b"Init" => _serde::__private::Ok(__Field::__field24),
                                b"PidsLimit" => _serde::__private::Ok(__Field::__field25),
                                b"Ulimits" => _serde::__private::Ok(__Field::__field26),
                                b"CpuCount" => _serde::__private::Ok(__Field::__field27),
                                b"CpuPercent" => _serde::__private::Ok(__Field::__field28),
                                b"IOMaximumIOps" => {
                                    _serde::__private::Ok(__Field::__field29)
                                }
                                b"IOMaximumBandwith" => {
                                    _serde::__private::Ok(__Field::__field30)
                                }
                                b"Binds" => _serde::__private::Ok(__Field::__field31),
                                b"ContainerIDFile" => {
                                    _serde::__private::Ok(__Field::__field32)
                                }
                                b"LogConfig" => _serde::__private::Ok(__Field::__field33),
                                b"NetworkMode" => _serde::__private::Ok(__Field::__field34),
                                b"PortBindings" => _serde::__private::Ok(__Field::__field35),
                                b"RestartPolicy" => {
                                    _serde::__private::Ok(__Field::__field36)
                                }
                                b"AutoRemove" => _serde::__private::Ok(__Field::__field37),
                                b"VolumeDriver" => _serde::__private::Ok(__Field::__field38),
                                b"VolumesFrom" => _serde::__private::Ok(__Field::__field39),
                                b"Mounts" => _serde::__private::Ok(__Field::__field40),
                                b"CapAdd" => _serde::__private::Ok(__Field::__field41),
                                b"CapDrop" => _serde::__private::Ok(__Field::__field42),
                                b"CgroupnsMode" => _serde::__private::Ok(__Field::__field43),
                                b"Dns" => _serde::__private::Ok(__Field::__field44),
                                b"DnsOptions" => _serde::__private::Ok(__Field::__field45),
                                b"DnsSearch" => _serde::__private::Ok(__Field::__field46),
                                b"ExtraHosts" => _serde::__private::Ok(__Field::__field47),
                                b"GroupAdd" => _serde::__private::Ok(__Field::__field48),
                                b"IpcMode" => _serde::__private::Ok(__Field::__field49),
                                b"Cgroup" => _serde::__private::Ok(__Field::__field50),
                                b"Links" => _serde::__private::Ok(__Field::__field51),
                                b"OomScoreAdj" => _serde::__private::Ok(__Field::__field52),
                                b"PidMode" => _serde::__private::Ok(__Field::__field53),
                                b"Privileged" => _serde::__private::Ok(__Field::__field54),
                                b"PublishAllPorts" => {
                                    _serde::__private::Ok(__Field::__field55)
                                }
                                b"ReadonlyRootfs" => {
                                    _serde::__private::Ok(__Field::__field56)
                                }
                                b"SecurityOpt" => _serde::__private::Ok(__Field::__field57),
                                b"StorageOpt" => _serde::__private::Ok(__Field::__field58),
                                b"Tmpfs" => _serde::__private::Ok(__Field::__field59),
                                b"UTSMode" => _serde::__private::Ok(__Field::__field60),
                                b"UsernsMode" => _serde::__private::Ok(__Field::__field61),
                                b"ShmSize" => _serde::__private::Ok(__Field::__field62),
                                b"Sysctls" => _serde::__private::Ok(__Field::__field63),
                                b"Runtime" => _serde::__private::Ok(__Field::__field64),
                                b"Isolation" => _serde::__private::Ok(__Field::__field65),
                                b"MaskedPaths" => _serde::__private::Ok(__Field::__field66),
                                b"ReadonlyPaths" => {
                                    _serde::__private::Ok(__Field::__field67)
                                }
                                _ => _serde::__private::Ok(__Field::__ignore),
                            }
                        }
                    }
                    impl<'de> _serde::Deserialize<'de> for __Field {
                        #[inline]
                        fn deserialize<__D>(
                            __deserializer: __D,
                        ) -> _serde::__private::Result<Self, __D::Error>
                        where
                            __D: _serde::Deserializer<'de>,
                        {
                            _serde::Deserializer::deserialize_identifier(
                                __deserializer,
                                __FieldVisitor,
                            )
                        }
                    }
                    #[doc(hidden)]
                    struct __Visitor<'de> {
                        marker: _serde::__private::PhantomData<HostConfig>,
                        lifetime: _serde::__private::PhantomData<&'de ()>,
                    }
                    impl<'de> _serde::de::Visitor<'de> for __Visitor<'de> {
                        type Value = HostConfig;
                        fn expecting(
                            &self,
                            __formatter: &mut _serde::__private::Formatter,
                        ) -> _serde::__private::fmt::Result {
                            _serde::__private::Formatter::write_str(
                                __formatter,
                                "struct HostConfig",
                            )
                        }
                        #[inline]
                        fn visit_seq<__A>(
                            self,
                            mut __seq: __A,
                        ) -> _serde::__private::Result<Self::Value, __A::Error>
                        where
                            __A: _serde::de::SeqAccess<'de>,
                        {
                            let __field0 = match _serde::de::SeqAccess::next_element::<
                                Option<i64>,
                            >(&mut __seq)? {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            0usize,
                                            &"struct HostConfig with 68 elements",
                                        ),
                                    );
                                }
                            };
                            let __field1 = match _serde::de::SeqAccess::next_element::<
                                Option<i64>,
                            >(&mut __seq)? {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            1usize,
                                            &"struct HostConfig with 68 elements",
                                        ),
                                    );
                                }
                            };
                            let __field2 = match _serde::de::SeqAccess::next_element::<
                                Option<String>,
                            >(&mut __seq)? {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            2usize,
                                            &"struct HostConfig with 68 elements",
                                        ),
                                    );
                                }
                            };
                            let __field3 = match _serde::de::SeqAccess::next_element::<
                                Option<u16>,
                            >(&mut __seq)? {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            3usize,
                                            &"struct HostConfig with 68 elements",
                                        ),
                                    );
                                }
                            };
                            let __field4 = match _serde::de::SeqAccess::next_element::<
                                Option<Vec<ThrottleDevice>>,
                            >(&mut __seq)? {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            4usize,
                                            &"struct HostConfig with 68 elements",
                                        ),
                                    );
                                }
                            };
                            let __field5 = match _serde::de::SeqAccess::next_element::<
                                Option<Vec<ThrottleDevice>>,
                            >(&mut __seq)? {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            5usize,
                                            &"struct HostConfig with 68 elements",
                                        ),
                                    );
                                }
                            };
                            let __field6 = match _serde::de::SeqAccess::next_element::<
                                Option<Vec<ThrottleDevice>>,
                            >(&mut __seq)? {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            6usize,
                                            &"struct HostConfig with 68 elements",
                                        ),
                                    );
                                }
                            };
                            let __field7 = match _serde::de::SeqAccess::next_element::<
                                Option<Vec<ThrottleDevice>>,
                            >(&mut __seq)? {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            7usize,
                                            &"struct HostConfig with 68 elements",
                                        ),
                                    );
                                }
                            };
                            let __field8 = match _serde::de::SeqAccess::next_element::<
                                Option<Vec<ThrottleDevice>>,
                            >(&mut __seq)? {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            8usize,
                                            &"struct HostConfig with 68 elements",
                                        ),
                                    );
                                }
                            };
                            let __field9 = match _serde::de::SeqAccess::next_element::<
                                Option<i64>,
                            >(&mut __seq)? {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            9usize,
                                            &"struct HostConfig with 68 elements",
                                        ),
                                    );
                                }
                            };
                            let __field10 = match _serde::de::SeqAccess::next_element::<
                                Option<i64>,
                            >(&mut __seq)? {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            10usize,
                                            &"struct HostConfig with 68 elements",
                                        ),
                                    );
                                }
                            };
                            let __field11 = match _serde::de::SeqAccess::next_element::<
                                Option<i64>,
                            >(&mut __seq)? {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            11usize,
                                            &"struct HostConfig with 68 elements",
                                        ),
                                    );
                                }
                            };
                            let __field12 = match _serde::de::SeqAccess::next_element::<
                                Option<i64>,
                            >(&mut __seq)? {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            12usize,
                                            &"struct HostConfig with 68 elements",
                                        ),
                                    );
                                }
                            };
                            let __field13 = match _serde::de::SeqAccess::next_element::<
                                Option<String>,
                            >(&mut __seq)? {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            13usize,
                                            &"struct HostConfig with 68 elements",
                                        ),
                                    );
                                }
                            };
                            let __field14 = match _serde::de::SeqAccess::next_element::<
                                Option<String>,
                            >(&mut __seq)? {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            14usize,
                                            &"struct HostConfig with 68 elements",
                                        ),
                                    );
                                }
                            };
                            let __field15 = match _serde::de::SeqAccess::next_element::<
                                Option<Vec<DeviceMapping>>,
                            >(&mut __seq)? {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            15usize,
                                            &"struct HostConfig with 68 elements",
                                        ),
                                    );
                                }
                            };
                            let __field16 = match _serde::de::SeqAccess::next_element::<
                                Option<String>,
                            >(&mut __seq)? {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            16usize,
                                            &"struct HostConfig with 68 elements",
                                        ),
                                    );
                                }
                            };
                            let __field17 = match _serde::de::SeqAccess::next_element::<
                                Option<Vec<DeviceRequest>>,
                            >(&mut __seq)? {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            17usize,
                                            &"struct HostConfig with 68 elements",
                                        ),
                                    );
                                }
                            };
                            let __field18 = match _serde::de::SeqAccess::next_element::<
                                Option<i64>,
                            >(&mut __seq)? {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            18usize,
                                            &"struct HostConfig with 68 elements",
                                        ),
                                    );
                                }
                            };
                            let __field19 = match _serde::de::SeqAccess::next_element::<
                                Option<i64>,
                            >(&mut __seq)? {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            19usize,
                                            &"struct HostConfig with 68 elements",
                                        ),
                                    );
                                }
                            };
                            let __field20 = match _serde::de::SeqAccess::next_element::<
                                Option<i64>,
                            >(&mut __seq)? {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            20usize,
                                            &"struct HostConfig with 68 elements",
                                        ),
                                    );
                                }
                            };
                            let __field21 = match _serde::de::SeqAccess::next_element::<
                                Option<i64>,
                            >(&mut __seq)? {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            21usize,
                                            &"struct HostConfig with 68 elements",
                                        ),
                                    );
                                }
                            };
                            let __field22 = match _serde::de::SeqAccess::next_element::<
                                Option<i64>,
                            >(&mut __seq)? {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            22usize,
                                            &"struct HostConfig with 68 elements",
                                        ),
                                    );
                                }
                            };
                            let __field23 = match _serde::de::SeqAccess::next_element::<
                                Option<bool>,
                            >(&mut __seq)? {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            23usize,
                                            &"struct HostConfig with 68 elements",
                                        ),
                                    );
                                }
                            };
                            let __field24 = match _serde::de::SeqAccess::next_element::<
                                Option<bool>,
                            >(&mut __seq)? {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            24usize,
                                            &"struct HostConfig with 68 elements",
                                        ),
                                    );
                                }
                            };
                            let __field25 = match _serde::de::SeqAccess::next_element::<
                                Option<i64>,
                            >(&mut __seq)? {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            25usize,
                                            &"struct HostConfig with 68 elements",
                                        ),
                                    );
                                }
                            };
                            let __field26 = match _serde::de::SeqAccess::next_element::<
                                Option<Vec<Ulimit>>,
                            >(&mut __seq)? {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            26usize,
                                            &"struct HostConfig with 68 elements",
                                        ),
                                    );
                                }
                            };
                            let __field27 = match _serde::de::SeqAccess::next_element::<
                                Option<i64>,
                            >(&mut __seq)? {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            27usize,
                                            &"struct HostConfig with 68 elements",
                                        ),
                                    );
                                }
                            };
                            let __field28 = match _serde::de::SeqAccess::next_element::<
                                Option<i64>,
                            >(&mut __seq)? {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            28usize,
                                            &"struct HostConfig with 68 elements",
                                        ),
                                    );
                                }
                            };
                            let __field29 = match _serde::de::SeqAccess::next_element::<
                                Option<u64>,
                            >(&mut __seq)? {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            29usize,
                                            &"struct HostConfig with 68 elements",
                                        ),
                                    );
                                }
                            };
                            let __field30 = match _serde::de::SeqAccess::next_element::<
                                Option<u64>,
                            >(&mut __seq)? {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            30usize,
                                            &"struct HostConfig with 68 elements",
                                        ),
                                    );
                                }
                            };
                            let __field31 = match _serde::de::SeqAccess::next_element::<
                                Option<Vec<String>>,
                            >(&mut __seq)? {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            31usize,
                                            &"struct HostConfig with 68 elements",
                                        ),
                                    );
                                }
                            };
                            let __field32 = match _serde::de::SeqAccess::next_element::<
                                Option<String>,
                            >(&mut __seq)? {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            32usize,
                                            &"struct HostConfig with 68 elements",
                                        ),
                                    );
                                }
                            };
                            let __field33 = match _serde::de::SeqAccess::next_element::<
                                Option<LogConfig>,
                            >(&mut __seq)? {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            33usize,
                                            &"struct HostConfig with 68 elements",
                                        ),
                                    );
                                }
                            };
                            let __field34 = match _serde::de::SeqAccess::next_element::<
                                Option<String>,
                            >(&mut __seq)? {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            34usize,
                                            &"struct HostConfig with 68 elements",
                                        ),
                                    );
                                }
                            };
                            let __field35 = match _serde::de::SeqAccess::next_element::<
                                Option<PortMap>,
                            >(&mut __seq)? {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            35usize,
                                            &"struct HostConfig with 68 elements",
                                        ),
                                    );
                                }
                            };
                            let __field36 = match _serde::de::SeqAccess::next_element::<
                                Option<RestartPolicy>,
                            >(&mut __seq)? {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            36usize,
                                            &"struct HostConfig with 68 elements",
                                        ),
                                    );
                                }
                            };
                            let __field37 = match _serde::de::SeqAccess::next_element::<
                                Option<bool>,
                            >(&mut __seq)? {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            37usize,
                                            &"struct HostConfig with 68 elements",
                                        ),
                                    );
                                }
                            };
                            let __field38 = match _serde::de::SeqAccess::next_element::<
                                Option<String>,
                            >(&mut __seq)? {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            38usize,
                                            &"struct HostConfig with 68 elements",
                                        ),
                                    );
                                }
                            };
                            let __field39 = match _serde::de::SeqAccess::next_element::<
                                Option<Option<Vec<String>>>,
                            >(&mut __seq)? {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            39usize,
                                            &"struct HostConfig with 68 elements",
                                        ),
                                    );
                                }
                            };
                            let __field40 = match _serde::de::SeqAccess::next_element::<
                                Option<Vec<Mount>>,
                            >(&mut __seq)? {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            40usize,
                                            &"struct HostConfig with 68 elements",
                                        ),
                                    );
                                }
                            };
                            let __field41 = match _serde::de::SeqAccess::next_element::<
                                Option<Vec<String>>,
                            >(&mut __seq)? {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            41usize,
                                            &"struct HostConfig with 68 elements",
                                        ),
                                    );
                                }
                            };
                            let __field42 = match _serde::de::SeqAccess::next_element::<
                                Option<Vec<String>>,
                            >(&mut __seq)? {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            42usize,
                                            &"struct HostConfig with 68 elements",
                                        ),
                                    );
                                }
                            };
                            let __field43 = match _serde::de::SeqAccess::next_element::<
                                Option<String>,
                            >(&mut __seq)? {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            43usize,
                                            &"struct HostConfig with 68 elements",
                                        ),
                                    );
                                }
                            };
                            let __field44 = match _serde::de::SeqAccess::next_element::<
                                Option<Vec<String>>,
                            >(&mut __seq)? {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            44usize,
                                            &"struct HostConfig with 68 elements",
                                        ),
                                    );
                                }
                            };
                            let __field45 = match _serde::de::SeqAccess::next_element::<
                                Option<Vec<String>>,
                            >(&mut __seq)? {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            45usize,
                                            &"struct HostConfig with 68 elements",
                                        ),
                                    );
                                }
                            };
                            let __field46 = match _serde::de::SeqAccess::next_element::<
                                Option<Vec<String>>,
                            >(&mut __seq)? {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            46usize,
                                            &"struct HostConfig with 68 elements",
                                        ),
                                    );
                                }
                            };
                            let __field47 = match _serde::de::SeqAccess::next_element::<
                                Option<Vec<String>>,
                            >(&mut __seq)? {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            47usize,
                                            &"struct HostConfig with 68 elements",
                                        ),
                                    );
                                }
                            };
                            let __field48 = match _serde::de::SeqAccess::next_element::<
                                Option<Option<Vec<String>>>,
                            >(&mut __seq)? {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            48usize,
                                            &"struct HostConfig with 68 elements",
                                        ),
                                    );
                                }
                            };
                            let __field49 = match _serde::de::SeqAccess::next_element::<
                                Option<String>,
                            >(&mut __seq)? {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            49usize,
                                            &"struct HostConfig with 68 elements",
                                        ),
                                    );
                                }
                            };
                            let __field50 = match _serde::de::SeqAccess::next_element::<
                                Option<String>,
                            >(&mut __seq)? {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            50usize,
                                            &"struct HostConfig with 68 elements",
                                        ),
                                    );
                                }
                            };
                            let __field51 = match _serde::de::SeqAccess::next_element::<
                                Option<Option<Vec<String>>>,
                            >(&mut __seq)? {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            51usize,
                                            &"struct HostConfig with 68 elements",
                                        ),
                                    );
                                }
                            };
                            let __field52 = match _serde::de::SeqAccess::next_element::<
                                Option<i64>,
                            >(&mut __seq)? {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            52usize,
                                            &"struct HostConfig with 68 elements",
                                        ),
                                    );
                                }
                            };
                            let __field53 = match _serde::de::SeqAccess::next_element::<
                                Option<String>,
                            >(&mut __seq)? {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            53usize,
                                            &"struct HostConfig with 68 elements",
                                        ),
                                    );
                                }
                            };
                            let __field54 = match _serde::de::SeqAccess::next_element::<
                                Option<bool>,
                            >(&mut __seq)? {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            54usize,
                                            &"struct HostConfig with 68 elements",
                                        ),
                                    );
                                }
                            };
                            let __field55 = match _serde::de::SeqAccess::next_element::<
                                Option<bool>,
                            >(&mut __seq)? {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            55usize,
                                            &"struct HostConfig with 68 elements",
                                        ),
                                    );
                                }
                            };
                            let __field56 = match _serde::de::SeqAccess::next_element::<
                                Option<bool>,
                            >(&mut __seq)? {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            56usize,
                                            &"struct HostConfig with 68 elements",
                                        ),
                                    );
                                }
                            };
                            let __field57 = match _serde::de::SeqAccess::next_element::<
                                Option<Option<Vec<String>>>,
                            >(&mut __seq)? {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            57usize,
                                            &"struct HostConfig with 68 elements",
                                        ),
                                    );
                                }
                            };
                            let __field58 = match _serde::de::SeqAccess::next_element::<
                                Option<Option<HashMap<String, String>>>,
                            >(&mut __seq)? {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            58usize,
                                            &"struct HostConfig with 68 elements",
                                        ),
                                    );
                                }
                            };
                            let __field59 = match _serde::de::SeqAccess::next_element::<
                                Option<Option<HashMap<String, String>>>,
                            >(&mut __seq)? {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            59usize,
                                            &"struct HostConfig with 68 elements",
                                        ),
                                    );
                                }
                            };
                            let __field60 = match _serde::de::SeqAccess::next_element::<
                                Option<String>,
                            >(&mut __seq)? {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            60usize,
                                            &"struct HostConfig with 68 elements",
                                        ),
                                    );
                                }
                            };
                            let __field61 = match _serde::de::SeqAccess::next_element::<
                                Option<String>,
                            >(&mut __seq)? {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            61usize,
                                            &"struct HostConfig with 68 elements",
                                        ),
                                    );
                                }
                            };
                            let __field62 = match _serde::de::SeqAccess::next_element::<
                                Option<u64>,
                            >(&mut __seq)? {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            62usize,
                                            &"struct HostConfig with 68 elements",
                                        ),
                                    );
                                }
                            };
                            let __field63 = match _serde::de::SeqAccess::next_element::<
                                Option<Option<HashMap<String, String>>>,
                            >(&mut __seq)? {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            63usize,
                                            &"struct HostConfig with 68 elements",
                                        ),
                                    );
                                }
                            };
                            let __field64 = match _serde::de::SeqAccess::next_element::<
                                Option<String>,
                            >(&mut __seq)? {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            64usize,
                                            &"struct HostConfig with 68 elements",
                                        ),
                                    );
                                }
                            };
                            let __field65 = match _serde::de::SeqAccess::next_element::<
                                Option<String>,
                            >(&mut __seq)? {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            65usize,
                                            &"struct HostConfig with 68 elements",
                                        ),
                                    );
                                }
                            };
                            let __field66 = match _serde::de::SeqAccess::next_element::<
                                Option<Vec<String>>,
                            >(&mut __seq)? {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            66usize,
                                            &"struct HostConfig with 68 elements",
                                        ),
                                    );
                                }
                            };
                            let __field67 = match _serde::de::SeqAccess::next_element::<
                                Option<Vec<String>>,
                            >(&mut __seq)? {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            67usize,
                                            &"struct HostConfig with 68 elements",
                                        ),
                                    );
                                }
                            };
                            _serde::__private::Ok(HostConfig {
                                cpu_shares: __field0,
                                memory: __field1,
                                cgroup_parent: __field2,
                                blkio_weight: __field3,
                                blkio_weight_device: __field4,
                                blkio_device_read_bps: __field5,
                                blkio_device_write_bps: __field6,
                                blkio_device_read_iops: __field7,
                                blkio_device_write_iops: __field8,
                                cpu_period: __field9,
                                cpu_quota: __field10,
                                cpu_realtime_period: __field11,
                                cpu_realtime_runtime: __field12,
                                cpuset_cpus: __field13,
                                cpuset_mems: __field14,
                                devices: __field15,
                                device_cgroup_rules: __field16,
                                device_requests: __field17,
                                kernel_memory_tcp: __field18,
                                memory_reservation: __field19,
                                memory_swap: __field20,
                                memory_swappiness: __field21,
                                nano_cpus: __field22,
                                oom_kill_disable: __field23,
                                init: __field24,
                                pids_limit: __field25,
                                ulimits: __field26,
                                cpu_count: __field27,
                                cpu_percent: __field28,
                                io_maximum_iops: __field29,
                                io_maximum_bandwith: __field30,
                                binds: __field31,
                                container_id_file: __field32,
                                log_config: __field33,
                                network_mode: __field34,
                                port_bindings: __field35,
                                restart_policy: __field36,
                                auto_remove: __field37,
                                volume_driver: __field38,
                                volumes_from: __field39,
                                mounts: __field40,
                                cap_add: __field41,
                                cap_drop: __field42,
                                c_groupns_mode: __field43,
                                dns: __field44,
                                dns_options: __field45,
                                dns_search: __field46,
                                extra_hosts: __field47,
                                group_add: __field48,
                                ipc_mode: __field49,
                                cgroup: __field50,
                                links: __field51,
                                oom_score_adj: __field52,
                                pid_mode: __field53,
                                privileged: __field54,
                                publish_all_ports: __field55,
                                readonly_rootfs: __field56,
                                security_opt: __field57,
                                storage_opt: __field58,
                                tmpfs: __field59,
                                uts_mode: __field60,
                                userns_mode: __field61,
                                shm_size: __field62,
                                sysctls: __field63,
                                runtime: __field64,
                                isolation: __field65,
                                masked_paths: __field66,
                                readonly_paths: __field67,
                            })
                        }
                        #[inline]
                        fn visit_map<__A>(
                            self,
                            mut __map: __A,
                        ) -> _serde::__private::Result<Self::Value, __A::Error>
                        where
                            __A: _serde::de::MapAccess<'de>,
                        {
                            let mut __field0: _serde::__private::Option<Option<i64>> = _serde::__private::None;
                            let mut __field1: _serde::__private::Option<Option<i64>> = _serde::__private::None;
                            let mut __field2: _serde::__private::Option<
                                Option<String>,
                            > = _serde::__private::None;
                            let mut __field3: _serde::__private::Option<Option<u16>> = _serde::__private::None;
                            let mut __field4: _serde::__private::Option<
                                Option<Vec<ThrottleDevice>>,
                            > = _serde::__private::None;
                            let mut __field5: _serde::__private::Option<
                                Option<Vec<ThrottleDevice>>,
                            > = _serde::__private::None;
                            let mut __field6: _serde::__private::Option<
                                Option<Vec<ThrottleDevice>>,
                            > = _serde::__private::None;
                            let mut __field7: _serde::__private::Option<
                                Option<Vec<ThrottleDevice>>,
                            > = _serde::__private::None;
                            let mut __field8: _serde::__private::Option<
                                Option<Vec<ThrottleDevice>>,
                            > = _serde::__private::None;
                            let mut __field9: _serde::__private::Option<Option<i64>> = _serde::__private::None;
                            let mut __field10: _serde::__private::Option<Option<i64>> = _serde::__private::None;
                            let mut __field11: _serde::__private::Option<Option<i64>> = _serde::__private::None;
                            let mut __field12: _serde::__private::Option<Option<i64>> = _serde::__private::None;
                            let mut __field13: _serde::__private::Option<
                                Option<String>,
                            > = _serde::__private::None;
                            let mut __field14: _serde::__private::Option<
                                Option<String>,
                            > = _serde::__private::None;
                            let mut __field15: _serde::__private::Option<
                                Option<Vec<DeviceMapping>>,
                            > = _serde::__private::None;
                            let mut __field16: _serde::__private::Option<
                                Option<String>,
                            > = _serde::__private::None;
                            let mut __field17: _serde::__private::Option<
                                Option<Vec<DeviceRequest>>,
                            > = _serde::__private::None;
                            let mut __field18: _serde::__private::Option<Option<i64>> = _serde::__private::None;
                            let mut __field19: _serde::__private::Option<Option<i64>> = _serde::__private::None;
                            let mut __field20: _serde::__private::Option<Option<i64>> = _serde::__private::None;
                            let mut __field21: _serde::__private::Option<Option<i64>> = _serde::__private::None;
                            let mut __field22: _serde::__private::Option<Option<i64>> = _serde::__private::None;
                            let mut __field23: _serde::__private::Option<Option<bool>> = _serde::__private::None;
                            let mut __field24: _serde::__private::Option<Option<bool>> = _serde::__private::None;
                            let mut __field25: _serde::__private::Option<Option<i64>> = _serde::__private::None;
                            let mut __field26: _serde::__private::Option<
                                Option<Vec<Ulimit>>,
                            > = _serde::__private::None;
                            let mut __field27: _serde::__private::Option<Option<i64>> = _serde::__private::None;
                            let mut __field28: _serde::__private::Option<Option<i64>> = _serde::__private::None;
                            let mut __field29: _serde::__private::Option<Option<u64>> = _serde::__private::None;
                            let mut __field30: _serde::__private::Option<Option<u64>> = _serde::__private::None;
                            let mut __field31: _serde::__private::Option<
                                Option<Vec<String>>,
                            > = _serde::__private::None;
                            let mut __field32: _serde::__private::Option<
                                Option<String>,
                            > = _serde::__private::None;
                            let mut __field33: _serde::__private::Option<
                                Option<LogConfig>,
                            > = _serde::__private::None;
                            let mut __field34: _serde::__private::Option<
                                Option<String>,
                            > = _serde::__private::None;
                            let mut __field35: _serde::__private::Option<
                                Option<PortMap>,
                            > = _serde::__private::None;
                            let mut __field36: _serde::__private::Option<
                                Option<RestartPolicy>,
                            > = _serde::__private::None;
                            let mut __field37: _serde::__private::Option<Option<bool>> = _serde::__private::None;
                            let mut __field38: _serde::__private::Option<
                                Option<String>,
                            > = _serde::__private::None;
                            let mut __field39: _serde::__private::Option<
                                Option<Option<Vec<String>>>,
                            > = _serde::__private::None;
                            let mut __field40: _serde::__private::Option<
                                Option<Vec<Mount>>,
                            > = _serde::__private::None;
                            let mut __field41: _serde::__private::Option<
                                Option<Vec<String>>,
                            > = _serde::__private::None;
                            let mut __field42: _serde::__private::Option<
                                Option<Vec<String>>,
                            > = _serde::__private::None;
                            let mut __field43: _serde::__private::Option<
                                Option<String>,
                            > = _serde::__private::None;
                            let mut __field44: _serde::__private::Option<
                                Option<Vec<String>>,
                            > = _serde::__private::None;
                            let mut __field45: _serde::__private::Option<
                                Option<Vec<String>>,
                            > = _serde::__private::None;
                            let mut __field46: _serde::__private::Option<
                                Option<Vec<String>>,
                            > = _serde::__private::None;
                            let mut __field47: _serde::__private::Option<
                                Option<Vec<String>>,
                            > = _serde::__private::None;
                            let mut __field48: _serde::__private::Option<
                                Option<Option<Vec<String>>>,
                            > = _serde::__private::None;
                            let mut __field49: _serde::__private::Option<
                                Option<String>,
                            > = _serde::__private::None;
                            let mut __field50: _serde::__private::Option<
                                Option<String>,
                            > = _serde::__private::None;
                            let mut __field51: _serde::__private::Option<
                                Option<Option<Vec<String>>>,
                            > = _serde::__private::None;
                            let mut __field52: _serde::__private::Option<Option<i64>> = _serde::__private::None;
                            let mut __field53: _serde::__private::Option<
                                Option<String>,
                            > = _serde::__private::None;
                            let mut __field54: _serde::__private::Option<Option<bool>> = _serde::__private::None;
                            let mut __field55: _serde::__private::Option<Option<bool>> = _serde::__private::None;
                            let mut __field56: _serde::__private::Option<Option<bool>> = _serde::__private::None;
                            let mut __field57: _serde::__private::Option<
                                Option<Option<Vec<String>>>,
                            > = _serde::__private::None;
                            let mut __field58: _serde::__private::Option<
                                Option<Option<HashMap<String, String>>>,
                            > = _serde::__private::None;
                            let mut __field59: _serde::__private::Option<
                                Option<Option<HashMap<String, String>>>,
                            > = _serde::__private::None;
                            let mut __field60: _serde::__private::Option<
                                Option<String>,
                            > = _serde::__private::None;
                            let mut __field61: _serde::__private::Option<
                                Option<String>,
                            > = _serde::__private::None;
                            let mut __field62: _serde::__private::Option<Option<u64>> = _serde::__private::None;
                            let mut __field63: _serde::__private::Option<
                                Option<Option<HashMap<String, String>>>,
                            > = _serde::__private::None;
                            let mut __field64: _serde::__private::Option<
                                Option<String>,
                            > = _serde::__private::None;
                            let mut __field65: _serde::__private::Option<
                                Option<String>,
                            > = _serde::__private::None;
                            let mut __field66: _serde::__private::Option<
                                Option<Vec<String>>,
                            > = _serde::__private::None;
                            let mut __field67: _serde::__private::Option<
                                Option<Vec<String>>,
                            > = _serde::__private::None;
                            while let _serde::__private::Some(__key) = _serde::de::MapAccess::next_key::<
                                __Field,
                            >(&mut __map)? {
                                match __key {
                                    __Field::__field0 => {
                                        if _serde::__private::Option::is_some(&__field0) {
                                            return _serde::__private::Err(
                                                <__A::Error as _serde::de::Error>::duplicate_field(
                                                    "CpuShares",
                                                ),
                                            );
                                        }
                                        __field0 = _serde::__private::Some(
                                            _serde::de::MapAccess::next_value::<
                                                Option<i64>,
                                            >(&mut __map)?,
                                        );
                                    }
                                    __Field::__field1 => {
                                        if _serde::__private::Option::is_some(&__field1) {
                                            return _serde::__private::Err(
                                                <__A::Error as _serde::de::Error>::duplicate_field("Memory"),
                                            );
                                        }
                                        __field1 = _serde::__private::Some(
                                            _serde::de::MapAccess::next_value::<
                                                Option<i64>,
                                            >(&mut __map)?,
                                        );
                                    }
                                    __Field::__field2 => {
                                        if _serde::__private::Option::is_some(&__field2) {
                                            return _serde::__private::Err(
                                                <__A::Error as _serde::de::Error>::duplicate_field(
                                                    "CgroupParent",
                                                ),
                                            );
                                        }
                                        __field2 = _serde::__private::Some(
                                            _serde::de::MapAccess::next_value::<
                                                Option<String>,
                                            >(&mut __map)?,
                                        );
                                    }
                                    __Field::__field3 => {
                                        if _serde::__private::Option::is_some(&__field3) {
                                            return _serde::__private::Err(
                                                <__A::Error as _serde::de::Error>::duplicate_field(
                                                    "BlkioWeight",
                                                ),
                                            );
                                        }
                                        __field3 = _serde::__private::Some(
                                            _serde::de::MapAccess::next_value::<
                                                Option<u16>,
                                            >(&mut __map)?,
                                        );
                                    }
                                    __Field::__field4 => {
                                        if _serde::__private::Option::is_some(&__field4) {
                                            return _serde::__private::Err(
                                                <__A::Error as _serde::de::Error>::duplicate_field(
                                                    "BlkioWeightDevice",
                                                ),
                                            );
                                        }
                                        __field4 = _serde::__private::Some(
                                            _serde::de::MapAccess::next_value::<
                                                Option<Vec<ThrottleDevice>>,
                                            >(&mut __map)?,
                                        );
                                    }
                                    __Field::__field5 => {
                                        if _serde::__private::Option::is_some(&__field5) {
                                            return _serde::__private::Err(
                                                <__A::Error as _serde::de::Error>::duplicate_field(
                                                    "BlkioDeviceReadBps",
                                                ),
                                            );
                                        }
                                        __field5 = _serde::__private::Some(
                                            _serde::de::MapAccess::next_value::<
                                                Option<Vec<ThrottleDevice>>,
                                            >(&mut __map)?,
                                        );
                                    }
                                    __Field::__field6 => {
                                        if _serde::__private::Option::is_some(&__field6) {
                                            return _serde::__private::Err(
                                                <__A::Error as _serde::de::Error>::duplicate_field(
                                                    "BlkioDeviceWriteBps",
                                                ),
                                            );
                                        }
                                        __field6 = _serde::__private::Some(
                                            _serde::de::MapAccess::next_value::<
                                                Option<Vec<ThrottleDevice>>,
                                            >(&mut __map)?,
                                        );
                                    }
                                    __Field::__field7 => {
                                        if _serde::__private::Option::is_some(&__field7) {
                                            return _serde::__private::Err(
                                                <__A::Error as _serde::de::Error>::duplicate_field(
                                                    "BlkioDeviceReadIOps",
                                                ),
                                            );
                                        }
                                        __field7 = _serde::__private::Some(
                                            _serde::de::MapAccess::next_value::<
                                                Option<Vec<ThrottleDevice>>,
                                            >(&mut __map)?,
                                        );
                                    }
                                    __Field::__field8 => {
                                        if _serde::__private::Option::is_some(&__field8) {
                                            return _serde::__private::Err(
                                                <__A::Error as _serde::de::Error>::duplicate_field(
                                                    "BlkioDeviceWriteIOps",
                                                ),
                                            );
                                        }
                                        __field8 = _serde::__private::Some(
                                            _serde::de::MapAccess::next_value::<
                                                Option<Vec<ThrottleDevice>>,
                                            >(&mut __map)?,
                                        );
                                    }
                                    __Field::__field9 => {
                                        if _serde::__private::Option::is_some(&__field9) {
                                            return _serde::__private::Err(
                                                <__A::Error as _serde::de::Error>::duplicate_field(
                                                    "CpuPeriod",
                                                ),
                                            );
                                        }
                                        __field9 = _serde::__private::Some(
                                            _serde::de::MapAccess::next_value::<
                                                Option<i64>,
                                            >(&mut __map)?,
                                        );
                                    }
                                    __Field::__field10 => {
                                        if _serde::__private::Option::is_some(&__field10) {
                                            return _serde::__private::Err(
                                                <__A::Error as _serde::de::Error>::duplicate_field(
                                                    "CpuQuota",
                                                ),
                                            );
                                        }
                                        __field10 = _serde::__private::Some(
                                            _serde::de::MapAccess::next_value::<
                                                Option<i64>,
                                            >(&mut __map)?,
                                        );
                                    }
                                    __Field::__field11 => {
                                        if _serde::__private::Option::is_some(&__field11) {
                                            return _serde::__private::Err(
                                                <__A::Error as _serde::de::Error>::duplicate_field(
                                                    "CpuRealtimePeriod",
                                                ),
                                            );
                                        }
                                        __field11 = _serde::__private::Some(
                                            _serde::de::MapAccess::next_value::<
                                                Option<i64>,
                                            >(&mut __map)?,
                                        );
                                    }
                                    __Field::__field12 => {
                                        if _serde::__private::Option::is_some(&__field12) {
                                            return _serde::__private::Err(
                                                <__A::Error as _serde::de::Error>::duplicate_field(
                                                    "CpuRealtimeRuntime",
                                                ),
                                            );
                                        }
                                        __field12 = _serde::__private::Some(
                                            _serde::de::MapAccess::next_value::<
                                                Option<i64>,
                                            >(&mut __map)?,
                                        );
                                    }
                                    __Field::__field13 => {
                                        if _serde::__private::Option::is_some(&__field13) {
                                            return _serde::__private::Err(
                                                <__A::Error as _serde::de::Error>::duplicate_field(
                                                    "CpusetCpus",
                                                ),
                                            );
                                        }
                                        __field13 = _serde::__private::Some(
                                            _serde::de::MapAccess::next_value::<
                                                Option<String>,
                                            >(&mut __map)?,
                                        );
                                    }
                                    __Field::__field14 => {
                                        if _serde::__private::Option::is_some(&__field14) {
                                            return _serde::__private::Err(
                                                <__A::Error as _serde::de::Error>::duplicate_field(
                                                    "CpusetMems",
                                                ),
                                            );
                                        }
                                        __field14 = _serde::__private::Some(
                                            _serde::de::MapAccess::next_value::<
                                                Option<String>,
                                            >(&mut __map)?,
                                        );
                                    }
                                    __Field::__field15 => {
                                        if _serde::__private::Option::is_some(&__field15) {
                                            return _serde::__private::Err(
                                                <__A::Error as _serde::de::Error>::duplicate_field(
                                                    "Devices",
                                                ),
                                            );
                                        }
                                        __field15 = _serde::__private::Some(
                                            _serde::de::MapAccess::next_value::<
                                                Option<Vec<DeviceMapping>>,
                                            >(&mut __map)?,
                                        );
                                    }
                                    __Field::__field16 => {
                                        if _serde::__private::Option::is_some(&__field16) {
                                            return _serde::__private::Err(
                                                <__A::Error as _serde::de::Error>::duplicate_field(
                                                    "DeviceCgroupRules",
                                                ),
                                            );
                                        }
                                        __field16 = _serde::__private::Some(
                                            _serde::de::MapAccess::next_value::<
                                                Option<String>,
                                            >(&mut __map)?,
                                        );
                                    }
                                    __Field::__field17 => {
                                        if _serde::__private::Option::is_some(&__field17) {
                                            return _serde::__private::Err(
                                                <__A::Error as _serde::de::Error>::duplicate_field(
                                                    "DeviceRequests",
                                                ),
                                            );
                                        }
                                        __field17 = _serde::__private::Some(
                                            _serde::de::MapAccess::next_value::<
                                                Option<Vec<DeviceRequest>>,
                                            >(&mut __map)?,
                                        );
                                    }
                                    __Field::__field18 => {
                                        if _serde::__private::Option::is_some(&__field18) {
                                            return _serde::__private::Err(
                                                <__A::Error as _serde::de::Error>::duplicate_field(
                                                    "KernelMemoryTCP",
                                                ),
                                            );
                                        }
                                        __field18 = _serde::__private::Some(
                                            _serde::de::MapAccess::next_value::<
                                                Option<i64>,
                                            >(&mut __map)?,
                                        );
                                    }
                                    __Field::__field19 => {
                                        if _serde::__private::Option::is_some(&__field19) {
                                            return _serde::__private::Err(
                                                <__A::Error as _serde::de::Error>::duplicate_field(
                                                    "MemoryReservation",
                                                ),
                                            );
                                        }
                                        __field19 = _serde::__private::Some(
                                            _serde::de::MapAccess::next_value::<
                                                Option<i64>,
                                            >(&mut __map)?,
                                        );
                                    }
                                    __Field::__field20 => {
                                        if _serde::__private::Option::is_some(&__field20) {
                                            return _serde::__private::Err(
                                                <__A::Error as _serde::de::Error>::duplicate_field(
                                                    "MemorySwap",
                                                ),
                                            );
                                        }
                                        __field20 = _serde::__private::Some(
                                            _serde::de::MapAccess::next_value::<
                                                Option<i64>,
                                            >(&mut __map)?,
                                        );
                                    }
                                    __Field::__field21 => {
                                        if _serde::__private::Option::is_some(&__field21) {
                                            return _serde::__private::Err(
                                                <__A::Error as _serde::de::Error>::duplicate_field(
                                                    "MemorySwappiness",
                                                ),
                                            );
                                        }
                                        __field21 = _serde::__private::Some(
                                            _serde::de::MapAccess::next_value::<
                                                Option<i64>,
                                            >(&mut __map)?,
                                        );
                                    }
                                    __Field::__field22 => {
                                        if _serde::__private::Option::is_some(&__field22) {
                                            return _serde::__private::Err(
                                                <__A::Error as _serde::de::Error>::duplicate_field(
                                                    "NanoCPUs",
                                                ),
                                            );
                                        }
                                        __field22 = _serde::__private::Some(
                                            _serde::de::MapAccess::next_value::<
                                                Option<i64>,
                                            >(&mut __map)?,
                                        );
                                    }
                                    __Field::__field23 => {
                                        if _serde::__private::Option::is_some(&__field23) {
                                            return _serde::__private::Err(
                                                <__A::Error as _serde::de::Error>::duplicate_field(
                                                    "OomKillDisable",
                                                ),
                                            );
                                        }
                                        __field23 = _serde::__private::Some(
                                            _serde::de::MapAccess::next_value::<
                                                Option<bool>,
                                            >(&mut __map)?,
                                        );
                                    }
                                    __Field::__field24 => {
                                        if _serde::__private::Option::is_some(&__field24) {
                                            return _serde::__private::Err(
                                                <__A::Error as _serde::de::Error>::duplicate_field("Init"),
                                            );
                                        }
                                        __field24 = _serde::__private::Some(
                                            _serde::de::MapAccess::next_value::<
                                                Option<bool>,
                                            >(&mut __map)?,
                                        );
                                    }
                                    __Field::__field25 => {
                                        if _serde::__private::Option::is_some(&__field25) {
                                            return _serde::__private::Err(
                                                <__A::Error as _serde::de::Error>::duplicate_field(
                                                    "PidsLimit",
                                                ),
                                            );
                                        }
                                        __field25 = _serde::__private::Some(
                                            _serde::de::MapAccess::next_value::<
                                                Option<i64>,
                                            >(&mut __map)?,
                                        );
                                    }
                                    __Field::__field26 => {
                                        if _serde::__private::Option::is_some(&__field26) {
                                            return _serde::__private::Err(
                                                <__A::Error as _serde::de::Error>::duplicate_field(
                                                    "Ulimits",
                                                ),
                                            );
                                        }
                                        __field26 = _serde::__private::Some(
                                            _serde::de::MapAccess::next_value::<
                                                Option<Vec<Ulimit>>,
                                            >(&mut __map)?,
                                        );
                                    }
                                    __Field::__field27 => {
                                        if _serde::__private::Option::is_some(&__field27) {
                                            return _serde::__private::Err(
                                                <__A::Error as _serde::de::Error>::duplicate_field(
                                                    "CpuCount",
                                                ),
                                            );
                                        }
                                        __field27 = _serde::__private::Some(
                                            _serde::de::MapAccess::next_value::<
                                                Option<i64>,
                                            >(&mut __map)?,
                                        );
                                    }
                                    __Field::__field28 => {
                                        if _serde::__private::Option::is_some(&__field28) {
                                            return _serde::__private::Err(
                                                <__A::Error as _serde::de::Error>::duplicate_field(
                                                    "CpuPercent",
                                                ),
                                            );
                                        }
                                        __field28 = _serde::__private::Some(
                                            _serde::de::MapAccess::next_value::<
                                                Option<i64>,
                                            >(&mut __map)?,
                                        );
                                    }
                                    __Field::__field29 => {
                                        if _serde::__private::Option::is_some(&__field29) {
                                            return _serde::__private::Err(
                                                <__A::Error as _serde::de::Error>::duplicate_field(
                                                    "IOMaximumIOps",
                                                ),
                                            );
                                        }
                                        __field29 = _serde::__private::Some(
                                            _serde::de::MapAccess::next_value::<
                                                Option<u64>,
                                            >(&mut __map)?,
                                        );
                                    }
                                    __Field::__field30 => {
                                        if _serde::__private::Option::is_some(&__field30) {
                                            return _serde::__private::Err(
                                                <__A::Error as _serde::de::Error>::duplicate_field(
                                                    "IOMaximumBandwith",
                                                ),
                                            );
                                        }
                                        __field30 = _serde::__private::Some(
                                            _serde::de::MapAccess::next_value::<
                                                Option<u64>,
                                            >(&mut __map)?,
                                        );
                                    }
                                    __Field::__field31 => {
                                        if _serde::__private::Option::is_some(&__field31) {
                                            return _serde::__private::Err(
                                                <__A::Error as _serde::de::Error>::duplicate_field("Binds"),
                                            );
                                        }
                                        __field31 = _serde::__private::Some(
                                            _serde::de::MapAccess::next_value::<
                                                Option<Vec<String>>,
                                            >(&mut __map)?,
                                        );
                                    }
                                    __Field::__field32 => {
                                        if _serde::__private::Option::is_some(&__field32) {
                                            return _serde::__private::Err(
                                                <__A::Error as _serde::de::Error>::duplicate_field(
                                                    "ContainerIDFile",
                                                ),
                                            );
                                        }
                                        __field32 = _serde::__private::Some(
                                            _serde::de::MapAccess::next_value::<
                                                Option<String>,
                                            >(&mut __map)?,
                                        );
                                    }
                                    __Field::__field33 => {
                                        if _serde::__private::Option::is_some(&__field33) {
                                            return _serde::__private::Err(
                                                <__A::Error as _serde::de::Error>::duplicate_field(
                                                    "LogConfig",
                                                ),
                                            );
                                        }
                                        __field33 = _serde::__private::Some(
                                            _serde::de::MapAccess::next_value::<
                                                Option<LogConfig>,
                                            >(&mut __map)?,
                                        );
                                    }
                                    __Field::__field34 => {
                                        if _serde::__private::Option::is_some(&__field34) {
                                            return _serde::__private::Err(
                                                <__A::Error as _serde::de::Error>::duplicate_field(
                                                    "NetworkMode",
                                                ),
                                            );
                                        }
                                        __field34 = _serde::__private::Some(
                                            _serde::de::MapAccess::next_value::<
                                                Option<String>,
                                            >(&mut __map)?,
                                        );
                                    }
                                    __Field::__field35 => {
                                        if _serde::__private::Option::is_some(&__field35) {
                                            return _serde::__private::Err(
                                                <__A::Error as _serde::de::Error>::duplicate_field(
                                                    "PortBindings",
                                                ),
                                            );
                                        }
                                        __field35 = _serde::__private::Some(
                                            _serde::de::MapAccess::next_value::<
                                                Option<PortMap>,
                                            >(&mut __map)?,
                                        );
                                    }
                                    __Field::__field36 => {
                                        if _serde::__private::Option::is_some(&__field36) {
                                            return _serde::__private::Err(
                                                <__A::Error as _serde::de::Error>::duplicate_field(
                                                    "RestartPolicy",
                                                ),
                                            );
                                        }
                                        __field36 = _serde::__private::Some(
                                            _serde::de::MapAccess::next_value::<
                                                Option<RestartPolicy>,
                                            >(&mut __map)?,
                                        );
                                    }
                                    __Field::__field37 => {
                                        if _serde::__private::Option::is_some(&__field37) {
                                            return _serde::__private::Err(
                                                <__A::Error as _serde::de::Error>::duplicate_field(
                                                    "AutoRemove",
                                                ),
                                            );
                                        }
                                        __field37 = _serde::__private::Some(
                                            _serde::de::MapAccess::next_value::<
                                                Option<bool>,
                                            >(&mut __map)?,
                                        );
                                    }
                                    __Field::__field38 => {
                                        if _serde::__private::Option::is_some(&__field38) {
                                            return _serde::__private::Err(
                                                <__A::Error as _serde::de::Error>::duplicate_field(
                                                    "VolumeDriver",
                                                ),
                                            );
                                        }
                                        __field38 = _serde::__private::Some(
                                            _serde::de::MapAccess::next_value::<
                                                Option<String>,
                                            >(&mut __map)?,
                                        );
                                    }
                                    __Field::__field39 => {
                                        if _serde::__private::Option::is_some(&__field39) {
                                            return _serde::__private::Err(
                                                <__A::Error as _serde::de::Error>::duplicate_field(
                                                    "VolumesFrom",
                                                ),
                                            );
                                        }
                                        __field39 = _serde::__private::Some(
                                            _serde::de::MapAccess::next_value::<
                                                Option<Option<Vec<String>>>,
                                            >(&mut __map)?,
                                        );
                                    }
                                    __Field::__field40 => {
                                        if _serde::__private::Option::is_some(&__field40) {
                                            return _serde::__private::Err(
                                                <__A::Error as _serde::de::Error>::duplicate_field("Mounts"),
                                            );
                                        }
                                        __field40 = _serde::__private::Some(
                                            _serde::de::MapAccess::next_value::<
                                                Option<Vec<Mount>>,
                                            >(&mut __map)?,
                                        );
                                    }
                                    __Field::__field41 => {
                                        if _serde::__private::Option::is_some(&__field41) {
                                            return _serde::__private::Err(
                                                <__A::Error as _serde::de::Error>::duplicate_field("CapAdd"),
                                            );
                                        }
                                        __field41 = _serde::__private::Some(
                                            _serde::de::MapAccess::next_value::<
                                                Option<Vec<String>>,
                                            >(&mut __map)?,
                                        );
                                    }
                                    __Field::__field42 => {
                                        if _serde::__private::Option::is_some(&__field42) {
                                            return _serde::__private::Err(
                                                <__A::Error as _serde::de::Error>::duplicate_field(
                                                    "CapDrop",
                                                ),
                                            );
                                        }
                                        __field42 = _serde::__private::Some(
                                            _serde::de::MapAccess::next_value::<
                                                Option<Vec<String>>,
                                            >(&mut __map)?,
                                        );
                                    }
                                    __Field::__field43 => {
                                        if _serde::__private::Option::is_some(&__field43) {
                                            return _serde::__private::Err(
                                                <__A::Error as _serde::de::Error>::duplicate_field(
                                                    "CgroupnsMode",
                                                ),
                                            );
                                        }
                                        __field43 = _serde::__private::Some(
                                            _serde::de::MapAccess::next_value::<
                                                Option<String>,
                                            >(&mut __map)?,
                                        );
                                    }
                                    __Field::__field44 => {
                                        if _serde::__private::Option::is_some(&__field44) {
                                            return _serde::__private::Err(
                                                <__A::Error as _serde::de::Error>::duplicate_field("Dns"),
                                            );
                                        }
                                        __field44 = _serde::__private::Some(
                                            _serde::de::MapAccess::next_value::<
                                                Option<Vec<String>>,
                                            >(&mut __map)?,
                                        );
                                    }
                                    __Field::__field45 => {
                                        if _serde::__private::Option::is_some(&__field45) {
                                            return _serde::__private::Err(
                                                <__A::Error as _serde::de::Error>::duplicate_field(
                                                    "DnsOptions",
                                                ),
                                            );
                                        }
                                        __field45 = _serde::__private::Some(
                                            _serde::de::MapAccess::next_value::<
                                                Option<Vec<String>>,
                                            >(&mut __map)?,
                                        );
                                    }
                                    __Field::__field46 => {
                                        if _serde::__private::Option::is_some(&__field46) {
                                            return _serde::__private::Err(
                                                <__A::Error as _serde::de::Error>::duplicate_field(
                                                    "DnsSearch",
                                                ),
                                            );
                                        }
                                        __field46 = _serde::__private::Some(
                                            _serde::de::MapAccess::next_value::<
                                                Option<Vec<String>>,
                                            >(&mut __map)?,
                                        );
                                    }
                                    __Field::__field47 => {
                                        if _serde::__private::Option::is_some(&__field47) {
                                            return _serde::__private::Err(
                                                <__A::Error as _serde::de::Error>::duplicate_field(
                                                    "ExtraHosts",
                                                ),
                                            );
                                        }
                                        __field47 = _serde::__private::Some(
                                            _serde::de::MapAccess::next_value::<
                                                Option<Vec<String>>,
                                            >(&mut __map)?,
                                        );
                                    }
                                    __Field::__field48 => {
                                        if _serde::__private::Option::is_some(&__field48) {
                                            return _serde::__private::Err(
                                                <__A::Error as _serde::de::Error>::duplicate_field(
                                                    "GroupAdd",
                                                ),
                                            );
                                        }
                                        __field48 = _serde::__private::Some(
                                            _serde::de::MapAccess::next_value::<
                                                Option<Option<Vec<String>>>,
                                            >(&mut __map)?,
                                        );
                                    }
                                    __Field::__field49 => {
                                        if _serde::__private::Option::is_some(&__field49) {
                                            return _serde::__private::Err(
                                                <__A::Error as _serde::de::Error>::duplicate_field(
                                                    "IpcMode",
                                                ),
                                            );
                                        }
                                        __field49 = _serde::__private::Some(
                                            _serde::de::MapAccess::next_value::<
                                                Option<String>,
                                            >(&mut __map)?,
                                        );
                                    }
                                    __Field::__field50 => {
                                        if _serde::__private::Option::is_some(&__field50) {
                                            return _serde::__private::Err(
                                                <__A::Error as _serde::de::Error>::duplicate_field("Cgroup"),
                                            );
                                        }
                                        __field50 = _serde::__private::Some(
                                            _serde::de::MapAccess::next_value::<
                                                Option<String>,
                                            >(&mut __map)?,
                                        );
                                    }
                                    __Field::__field51 => {
                                        if _serde::__private::Option::is_some(&__field51) {
                                            return _serde::__private::Err(
                                                <__A::Error as _serde::de::Error>::duplicate_field("Links"),
                                            );
                                        }
                                        __field51 = _serde::__private::Some(
                                            _serde::de::MapAccess::next_value::<
                                                Option<Option<Vec<String>>>,
                                            >(&mut __map)?,
                                        );
                                    }
                                    __Field::__field52 => {
                                        if _serde::__private::Option::is_some(&__field52) {
                                            return _serde::__private::Err(
                                                <__A::Error as _serde::de::Error>::duplicate_field(
                                                    "OomScoreAdj",
                                                ),
                                            );
                                        }
                                        __field52 = _serde::__private::Some(
                                            _serde::de::MapAccess::next_value::<
                                                Option<i64>,
                                            >(&mut __map)?,
                                        );
                                    }
                                    __Field::__field53 => {
                                        if _serde::__private::Option::is_some(&__field53) {
                                            return _serde::__private::Err(
                                                <__A::Error as _serde::de::Error>::duplicate_field(
                                                    "PidMode",
                                                ),
                                            );
                                        }
                                        __field53 = _serde::__private::Some(
                                            _serde::de::MapAccess::next_value::<
                                                Option<String>,
                                            >(&mut __map)?,
                                        );
                                    }
                                    __Field::__field54 => {
                                        if _serde::__private::Option::is_some(&__field54) {
                                            return _serde::__private::Err(
                                                <__A::Error as _serde::de::Error>::duplicate_field(
                                                    "Privileged",
                                                ),
                                            );
                                        }
                                        __field54 = _serde::__private::Some(
                                            _serde::de::MapAccess::next_value::<
                                                Option<bool>,
                                            >(&mut __map)?,
                                        );
                                    }
                                    __Field::__field55 => {
                                        if _serde::__private::Option::is_some(&__field55) {
                                            return _serde::__private::Err(
                                                <__A::Error as _serde::de::Error>::duplicate_field(
                                                    "PublishAllPorts",
                                                ),
                                            );
                                        }
                                        __field55 = _serde::__private::Some(
                                            _serde::de::MapAccess::next_value::<
                                                Option<bool>,
                                            >(&mut __map)?,
                                        );
                                    }
                                    __Field::__field56 => {
                                        if _serde::__private::Option::is_some(&__field56) {
                                            return _serde::__private::Err(
                                                <__A::Error as _serde::de::Error>::duplicate_field(
                                                    "ReadonlyRootfs",
                                                ),
                                            );
                                        }
                                        __field56 = _serde::__private::Some(
                                            _serde::de::MapAccess::next_value::<
                                                Option<bool>,
                                            >(&mut __map)?,
                                        );
                                    }
                                    __Field::__field57 => {
                                        if _serde::__private::Option::is_some(&__field57) {
                                            return _serde::__private::Err(
                                                <__A::Error as _serde::de::Error>::duplicate_field(
                                                    "SecurityOpt",
                                                ),
                                            );
                                        }
                                        __field57 = _serde::__private::Some(
                                            _serde::de::MapAccess::next_value::<
                                                Option<Option<Vec<String>>>,
                                            >(&mut __map)?,
                                        );
                                    }
                                    __Field::__field58 => {
                                        if _serde::__private::Option::is_some(&__field58) {
                                            return _serde::__private::Err(
                                                <__A::Error as _serde::de::Error>::duplicate_field(
                                                    "StorageOpt",
                                                ),
                                            );
                                        }
                                        __field58 = _serde::__private::Some(
                                            _serde::de::MapAccess::next_value::<
                                                Option<Option<HashMap<String, String>>>,
                                            >(&mut __map)?,
                                        );
                                    }
                                    __Field::__field59 => {
                                        if _serde::__private::Option::is_some(&__field59) {
                                            return _serde::__private::Err(
                                                <__A::Error as _serde::de::Error>::duplicate_field("Tmpfs"),
                                            );
                                        }
                                        __field59 = _serde::__private::Some(
                                            _serde::de::MapAccess::next_value::<
                                                Option<Option<HashMap<String, String>>>,
                                            >(&mut __map)?,
                                        );
                                    }
                                    __Field::__field60 => {
                                        if _serde::__private::Option::is_some(&__field60) {
                                            return _serde::__private::Err(
                                                <__A::Error as _serde::de::Error>::duplicate_field(
                                                    "UTSMode",
                                                ),
                                            );
                                        }
                                        __field60 = _serde::__private::Some(
                                            _serde::de::MapAccess::next_value::<
                                                Option<String>,
                                            >(&mut __map)?,
                                        );
                                    }
                                    __Field::__field61 => {
                                        if _serde::__private::Option::is_some(&__field61) {
                                            return _serde::__private::Err(
                                                <__A::Error as _serde::de::Error>::duplicate_field(
                                                    "UsernsMode",
                                                ),
                                            );
                                        }
                                        __field61 = _serde::__private::Some(
                                            _serde::de::MapAccess::next_value::<
                                                Option<String>,
                                            >(&mut __map)?,
                                        );
                                    }
                                    __Field::__field62 => {
                                        if _serde::__private::Option::is_some(&__field62) {
                                            return _serde::__private::Err(
                                                <__A::Error as _serde::de::Error>::duplicate_field(
                                                    "ShmSize",
                                                ),
                                            );
                                        }
                                        __field62 = _serde::__private::Some(
                                            _serde::de::MapAccess::next_value::<
                                                Option<u64>,
                                            >(&mut __map)?,
                                        );
                                    }
                                    __Field::__field63 => {
                                        if _serde::__private::Option::is_some(&__field63) {
                                            return _serde::__private::Err(
                                                <__A::Error as _serde::de::Error>::duplicate_field(
                                                    "Sysctls",
                                                ),
                                            );
                                        }
                                        __field63 = _serde::__private::Some(
                                            _serde::de::MapAccess::next_value::<
                                                Option<Option<HashMap<String, String>>>,
                                            >(&mut __map)?,
                                        );
                                    }
                                    __Field::__field64 => {
                                        if _serde::__private::Option::is_some(&__field64) {
                                            return _serde::__private::Err(
                                                <__A::Error as _serde::de::Error>::duplicate_field(
                                                    "Runtime",
                                                ),
                                            );
                                        }
                                        __field64 = _serde::__private::Some(
                                            _serde::de::MapAccess::next_value::<
                                                Option<String>,
                                            >(&mut __map)?,
                                        );
                                    }
                                    __Field::__field65 => {
                                        if _serde::__private::Option::is_some(&__field65) {
                                            return _serde::__private::Err(
                                                <__A::Error as _serde::de::Error>::duplicate_field(
                                                    "Isolation",
                                                ),
                                            );
                                        }
                                        __field65 = _serde::__private::Some(
                                            _serde::de::MapAccess::next_value::<
                                                Option<String>,
                                            >(&mut __map)?,
                                        );
                                    }
                                    __Field::__field66 => {
                                        if _serde::__private::Option::is_some(&__field66) {
                                            return _serde::__private::Err(
                                                <__A::Error as _serde::de::Error>::duplicate_field(
                                                    "MaskedPaths",
                                                ),
                                            );
                                        }
                                        __field66 = _serde::__private::Some(
                                            _serde::de::MapAccess::next_value::<
                                                Option<Vec<String>>,
                                            >(&mut __map)?,
                                        );
                                    }
                                    __Field::__field67 => {
                                        if _serde::__private::Option::is_some(&__field67) {
                                            return _serde::__private::Err(
                                                <__A::Error as _serde::de::Error>::duplicate_field(
                                                    "ReadonlyPaths",
                                                ),
                                            );
                                        }
                                        __field67 = _serde::__private::Some(
                                            _serde::de::MapAccess::next_value::<
                                                Option<Vec<String>>,
                                            >(&mut __map)?,
                                        );
                                    }
                                    _ => {
                                        let _ = _serde::de::MapAccess::next_value::<
                                            _serde::de::IgnoredAny,
                                        >(&mut __map)?;
                                    }
                                }
                            }
                            let __field0 = match __field0 {
                                _serde::__private::Some(__field0) => __field0,
                                _serde::__private::None => {
                                    _serde::__private::de::missing_field("CpuShares")?
                                }
                            };
                            let __field1 = match __field1 {
                                _serde::__private::Some(__field1) => __field1,
                                _serde::__private::None => {
                                    _serde::__private::de::missing_field("Memory")?
                                }
                            };
                            let __field2 = match __field2 {
                                _serde::__private::Some(__field2) => __field2,
                                _serde::__private::None => {
                                    _serde::__private::de::missing_field("CgroupParent")?
                                }
                            };
                            let __field3 = match __field3 {
                                _serde::__private::Some(__field3) => __field3,
                                _serde::__private::None => {
                                    _serde::__private::de::missing_field("BlkioWeight")?
                                }
                            };
                            let __field4 = match __field4 {
                                _serde::__private::Some(__field4) => __field4,
                                _serde::__private::None => {
                                    _serde::__private::de::missing_field("BlkioWeightDevice")?
                                }
                            };
                            let __field5 = match __field5 {
                                _serde::__private::Some(__field5) => __field5,
                                _serde::__private::None => {
                                    _serde::__private::de::missing_field("BlkioDeviceReadBps")?
                                }
                            };
                            let __field6 = match __field6 {
                                _serde::__private::Some(__field6) => __field6,
                                _serde::__private::None => {
                                    _serde::__private::de::missing_field("BlkioDeviceWriteBps")?
                                }
                            };
                            let __field7 = match __field7 {
                                _serde::__private::Some(__field7) => __field7,
                                _serde::__private::None => {
                                    _serde::__private::de::missing_field("BlkioDeviceReadIOps")?
                                }
                            };
                            let __field8 = match __field8 {
                                _serde::__private::Some(__field8) => __field8,
                                _serde::__private::None => {
                                    _serde::__private::de::missing_field(
                                        "BlkioDeviceWriteIOps",
                                    )?
                                }
                            };
                            let __field9 = match __field9 {
                                _serde::__private::Some(__field9) => __field9,
                                _serde::__private::None => {
                                    _serde::__private::de::missing_field("CpuPeriod")?
                                }
                            };
                            let __field10 = match __field10 {
                                _serde::__private::Some(__field10) => __field10,
                                _serde::__private::None => {
                                    _serde::__private::de::missing_field("CpuQuota")?
                                }
                            };
                            let __field11 = match __field11 {
                                _serde::__private::Some(__field11) => __field11,
                                _serde::__private::None => {
                                    _serde::__private::de::missing_field("CpuRealtimePeriod")?
                                }
                            };
                            let __field12 = match __field12 {
                                _serde::__private::Some(__field12) => __field12,
                                _serde::__private::None => {
                                    _serde::__private::de::missing_field("CpuRealtimeRuntime")?
                                }
                            };
                            let __field13 = match __field13 {
                                _serde::__private::Some(__field13) => __field13,
                                _serde::__private::None => {
                                    _serde::__private::de::missing_field("CpusetCpus")?
                                }
                            };
                            let __field14 = match __field14 {
                                _serde::__private::Some(__field14) => __field14,
                                _serde::__private::None => {
                                    _serde::__private::de::missing_field("CpusetMems")?
                                }
                            };
                            let __field15 = match __field15 {
                                _serde::__private::Some(__field15) => __field15,
                                _serde::__private::None => {
                                    _serde::__private::de::missing_field("Devices")?
                                }
                            };
                            let __field16 = match __field16 {
                                _serde::__private::Some(__field16) => __field16,
                                _serde::__private::None => {
                                    _serde::__private::de::missing_field("DeviceCgroupRules")?
                                }
                            };
                            let __field17 = match __field17 {
                                _serde::__private::Some(__field17) => __field17,
                                _serde::__private::None => {
                                    _serde::__private::de::missing_field("DeviceRequests")?
                                }
                            };
                            let __field18 = match __field18 {
                                _serde::__private::Some(__field18) => __field18,
                                _serde::__private::None => {
                                    _serde::__private::de::missing_field("KernelMemoryTCP")?
                                }
                            };
                            let __field19 = match __field19 {
                                _serde::__private::Some(__field19) => __field19,
                                _serde::__private::None => {
                                    _serde::__private::de::missing_field("MemoryReservation")?
                                }
                            };
                            let __field20 = match __field20 {
                                _serde::__private::Some(__field20) => __field20,
                                _serde::__private::None => {
                                    _serde::__private::de::missing_field("MemorySwap")?
                                }
                            };
                            let __field21 = match __field21 {
                                _serde::__private::Some(__field21) => __field21,
                                _serde::__private::None => {
                                    _serde::__private::de::missing_field("MemorySwappiness")?
                                }
                            };
                            let __field22 = match __field22 {
                                _serde::__private::Some(__field22) => __field22,
                                _serde::__private::None => {
                                    _serde::__private::de::missing_field("NanoCPUs")?
                                }
                            };
                            let __field23 = match __field23 {
                                _serde::__private::Some(__field23) => __field23,
                                _serde::__private::None => {
                                    _serde::__private::de::missing_field("OomKillDisable")?
                                }
                            };
                            let __field24 = match __field24 {
                                _serde::__private::Some(__field24) => __field24,
                                _serde::__private::None => {
                                    _serde::__private::de::missing_field("Init")?
                                }
                            };
                            let __field25 = match __field25 {
                                _serde::__private::Some(__field25) => __field25,
                                _serde::__private::None => {
                                    _serde::__private::de::missing_field("PidsLimit")?
                                }
                            };
                            let __field26 = match __field26 {
                                _serde::__private::Some(__field26) => __field26,
                                _serde::__private::None => {
                                    _serde::__private::de::missing_field("Ulimits")?
                                }
                            };
                            let __field27 = match __field27 {
                                _serde::__private::Some(__field27) => __field27,
                                _serde::__private::None => {
                                    _serde::__private::de::missing_field("CpuCount")?
                                }
                            };
                            let __field28 = match __field28 {
                                _serde::__private::Some(__field28) => __field28,
                                _serde::__private::None => {
                                    _serde::__private::de::missing_field("CpuPercent")?
                                }
                            };
                            let __field29 = match __field29 {
                                _serde::__private::Some(__field29) => __field29,
                                _serde::__private::None => {
                                    _serde::__private::de::missing_field("IOMaximumIOps")?
                                }
                            };
                            let __field30 = match __field30 {
                                _serde::__private::Some(__field30) => __field30,
                                _serde::__private::None => {
                                    _serde::__private::de::missing_field("IOMaximumBandwith")?
                                }
                            };
                            let __field31 = match __field31 {
                                _serde::__private::Some(__field31) => __field31,
                                _serde::__private::None => {
                                    _serde::__private::de::missing_field("Binds")?
                                }
                            };
                            let __field32 = match __field32 {
                                _serde::__private::Some(__field32) => __field32,
                                _serde::__private::None => {
                                    _serde::__private::de::missing_field("ContainerIDFile")?
                                }
                            };
                            let __field33 = match __field33 {
                                _serde::__private::Some(__field33) => __field33,
                                _serde::__private::None => {
                                    _serde::__private::de::missing_field("LogConfig")?
                                }
                            };
                            let __field34 = match __field34 {
                                _serde::__private::Some(__field34) => __field34,
                                _serde::__private::None => {
                                    _serde::__private::de::missing_field("NetworkMode")?
                                }
                            };
                            let __field35 = match __field35 {
                                _serde::__private::Some(__field35) => __field35,
                                _serde::__private::None => {
                                    _serde::__private::de::missing_field("PortBindings")?
                                }
                            };
                            let __field36 = match __field36 {
                                _serde::__private::Some(__field36) => __field36,
                                _serde::__private::None => {
                                    _serde::__private::de::missing_field("RestartPolicy")?
                                }
                            };
                            let __field37 = match __field37 {
                                _serde::__private::Some(__field37) => __field37,
                                _serde::__private::None => {
                                    _serde::__private::de::missing_field("AutoRemove")?
                                }
                            };
                            let __field38 = match __field38 {
                                _serde::__private::Some(__field38) => __field38,
                                _serde::__private::None => {
                                    _serde::__private::de::missing_field("VolumeDriver")?
                                }
                            };
                            let __field39 = match __field39 {
                                _serde::__private::Some(__field39) => __field39,
                                _serde::__private::None => {
                                    _serde::__private::de::missing_field("VolumesFrom")?
                                }
                            };
                            let __field40 = match __field40 {
                                _serde::__private::Some(__field40) => __field40,
                                _serde::__private::None => {
                                    _serde::__private::de::missing_field("Mounts")?
                                }
                            };
                            let __field41 = match __field41 {
                                _serde::__private::Some(__field41) => __field41,
                                _serde::__private::None => {
                                    _serde::__private::de::missing_field("CapAdd")?
                                }
                            };
                            let __field42 = match __field42 {
                                _serde::__private::Some(__field42) => __field42,
                                _serde::__private::None => {
                                    _serde::__private::de::missing_field("CapDrop")?
                                }
                            };
                            let __field43 = match __field43 {
                                _serde::__private::Some(__field43) => __field43,
                                _serde::__private::None => {
                                    _serde::__private::de::missing_field("CgroupnsMode")?
                                }
                            };
                            let __field44 = match __field44 {
                                _serde::__private::Some(__field44) => __field44,
                                _serde::__private::None => {
                                    _serde::__private::de::missing_field("Dns")?
                                }
                            };
                            let __field45 = match __field45 {
                                _serde::__private::Some(__field45) => __field45,
                                _serde::__private::None => {
                                    _serde::__private::de::missing_field("DnsOptions")?
                                }
                            };
                            let __field46 = match __field46 {
                                _serde::__private::Some(__field46) => __field46,
                                _serde::__private::None => {
                                    _serde::__private::de::missing_field("DnsSearch")?
                                }
                            };
                            let __field47 = match __field47 {
                                _serde::__private::Some(__field47) => __field47,
                                _serde::__private::None => {
                                    _serde::__private::de::missing_field("ExtraHosts")?
                                }
                            };
                            let __field48 = match __field48 {
                                _serde::__private::Some(__field48) => __field48,
                                _serde::__private::None => {
                                    _serde::__private::de::missing_field("GroupAdd")?
                                }
                            };
                            let __field49 = match __field49 {
                                _serde::__private::Some(__field49) => __field49,
                                _serde::__private::None => {
                                    _serde::__private::de::missing_field("IpcMode")?
                                }
                            };
                            let __field50 = match __field50 {
                                _serde::__private::Some(__field50) => __field50,
                                _serde::__private::None => {
                                    _serde::__private::de::missing_field("Cgroup")?
                                }
                            };
                            let __field51 = match __field51 {
                                _serde::__private::Some(__field51) => __field51,
                                _serde::__private::None => {
                                    _serde::__private::de::missing_field("Links")?
                                }
                            };
                            let __field52 = match __field52 {
                                _serde::__private::Some(__field52) => __field52,
                                _serde::__private::None => {
                                    _serde::__private::de::missing_field("OomScoreAdj")?
                                }
                            };
                            let __field53 = match __field53 {
                                _serde::__private::Some(__field53) => __field53,
                                _serde::__private::None => {
                                    _serde::__private::de::missing_field("PidMode")?
                                }
                            };
                            let __field54 = match __field54 {
                                _serde::__private::Some(__field54) => __field54,
                                _serde::__private::None => {
                                    _serde::__private::de::missing_field("Privileged")?
                                }
                            };
                            let __field55 = match __field55 {
                                _serde::__private::Some(__field55) => __field55,
                                _serde::__private::None => {
                                    _serde::__private::de::missing_field("PublishAllPorts")?
                                }
                            };
                            let __field56 = match __field56 {
                                _serde::__private::Some(__field56) => __field56,
                                _serde::__private::None => {
                                    _serde::__private::de::missing_field("ReadonlyRootfs")?
                                }
                            };
                            let __field57 = match __field57 {
                                _serde::__private::Some(__field57) => __field57,
                                _serde::__private::None => {
                                    _serde::__private::de::missing_field("SecurityOpt")?
                                }
                            };
                            let __field58 = match __field58 {
                                _serde::__private::Some(__field58) => __field58,
                                _serde::__private::None => {
                                    _serde::__private::de::missing_field("StorageOpt")?
                                }
                            };
                            let __field59 = match __field59 {
                                _serde::__private::Some(__field59) => __field59,
                                _serde::__private::None => {
                                    _serde::__private::de::missing_field("Tmpfs")?
                                }
                            };
                            let __field60 = match __field60 {
                                _serde::__private::Some(__field60) => __field60,
                                _serde::__private::None => {
                                    _serde::__private::de::missing_field("UTSMode")?
                                }
                            };
                            let __field61 = match __field61 {
                                _serde::__private::Some(__field61) => __field61,
                                _serde::__private::None => {
                                    _serde::__private::de::missing_field("UsernsMode")?
                                }
                            };
                            let __field62 = match __field62 {
                                _serde::__private::Some(__field62) => __field62,
                                _serde::__private::None => {
                                    _serde::__private::de::missing_field("ShmSize")?
                                }
                            };
                            let __field63 = match __field63 {
                                _serde::__private::Some(__field63) => __field63,
                                _serde::__private::None => {
                                    _serde::__private::de::missing_field("Sysctls")?
                                }
                            };
                            let __field64 = match __field64 {
                                _serde::__private::Some(__field64) => __field64,
                                _serde::__private::None => {
                                    _serde::__private::de::missing_field("Runtime")?
                                }
                            };
                            let __field65 = match __field65 {
                                _serde::__private::Some(__field65) => __field65,
                                _serde::__private::None => {
                                    _serde::__private::de::missing_field("Isolation")?
                                }
                            };
                            let __field66 = match __field66 {
                                _serde::__private::Some(__field66) => __field66,
                                _serde::__private::None => {
                                    _serde::__private::de::missing_field("MaskedPaths")?
                                }
                            };
                            let __field67 = match __field67 {
                                _serde::__private::Some(__field67) => __field67,
                                _serde::__private::None => {
                                    _serde::__private::de::missing_field("ReadonlyPaths")?
                                }
                            };
                            _serde::__private::Ok(HostConfig {
                                cpu_shares: __field0,
                                memory: __field1,
                                cgroup_parent: __field2,
                                blkio_weight: __field3,
                                blkio_weight_device: __field4,
                                blkio_device_read_bps: __field5,
                                blkio_device_write_bps: __field6,
                                blkio_device_read_iops: __field7,
                                blkio_device_write_iops: __field8,
                                cpu_period: __field9,
                                cpu_quota: __field10,
                                cpu_realtime_period: __field11,
                                cpu_realtime_runtime: __field12,
                                cpuset_cpus: __field13,
                                cpuset_mems: __field14,
                                devices: __field15,
                                device_cgroup_rules: __field16,
                                device_requests: __field17,
                                kernel_memory_tcp: __field18,
                                memory_reservation: __field19,
                                memory_swap: __field20,
                                memory_swappiness: __field21,
                                nano_cpus: __field22,
                                oom_kill_disable: __field23,
                                init: __field24,
                                pids_limit: __field25,
                                ulimits: __field26,
                                cpu_count: __field27,
                                cpu_percent: __field28,
                                io_maximum_iops: __field29,
                                io_maximum_bandwith: __field30,
                                binds: __field31,
                                container_id_file: __field32,
                                log_config: __field33,
                                network_mode: __field34,
                                port_bindings: __field35,
                                restart_policy: __field36,
                                auto_remove: __field37,
                                volume_driver: __field38,
                                volumes_from: __field39,
                                mounts: __field40,
                                cap_add: __field41,
                                cap_drop: __field42,
                                c_groupns_mode: __field43,
                                dns: __field44,
                                dns_options: __field45,
                                dns_search: __field46,
                                extra_hosts: __field47,
                                group_add: __field48,
                                ipc_mode: __field49,
                                cgroup: __field50,
                                links: __field51,
                                oom_score_adj: __field52,
                                pid_mode: __field53,
                                privileged: __field54,
                                publish_all_ports: __field55,
                                readonly_rootfs: __field56,
                                security_opt: __field57,
                                storage_opt: __field58,
                                tmpfs: __field59,
                                uts_mode: __field60,
                                userns_mode: __field61,
                                shm_size: __field62,
                                sysctls: __field63,
                                runtime: __field64,
                                isolation: __field65,
                                masked_paths: __field66,
                                readonly_paths: __field67,
                            })
                        }
                    }
                    #[doc(hidden)]
                    const FIELDS: &'static [&'static str] = &[
                        "CpuShares",
                        "Memory",
                        "CgroupParent",
                        "BlkioWeight",
                        "BlkioWeightDevice",
                        "BlkioDeviceReadBps",
                        "BlkioDeviceWriteBps",
                        "BlkioDeviceReadIOps",
                        "BlkioDeviceWriteIOps",
                        "CpuPeriod",
                        "CpuQuota",
                        "CpuRealtimePeriod",
                        "CpuRealtimeRuntime",
                        "CpusetCpus",
                        "CpusetMems",
                        "Devices",
                        "DeviceCgroupRules",
                        "DeviceRequests",
                        "KernelMemoryTCP",
                        "MemoryReservation",
                        "MemorySwap",
                        "MemorySwappiness",
                        "NanoCPUs",
                        "OomKillDisable",
                        "Init",
                        "PidsLimit",
                        "Ulimits",
                        "CpuCount",
                        "CpuPercent",
                        "IOMaximumIOps",
                        "IOMaximumBandwith",
                        "Binds",
                        "ContainerIDFile",
                        "LogConfig",
                        "NetworkMode",
                        "PortBindings",
                        "RestartPolicy",
                        "AutoRemove",
                        "VolumeDriver",
                        "VolumesFrom",
                        "Mounts",
                        "CapAdd",
                        "CapDrop",
                        "CgroupnsMode",
                        "Dns",
                        "DnsOptions",
                        "DnsSearch",
                        "ExtraHosts",
                        "GroupAdd",
                        "IpcMode",
                        "Cgroup",
                        "Links",
                        "OomScoreAdj",
                        "PidMode",
                        "Privileged",
                        "PublishAllPorts",
                        "ReadonlyRootfs",
                        "SecurityOpt",
                        "StorageOpt",
                        "Tmpfs",
                        "UTSMode",
                        "UsernsMode",
                        "ShmSize",
                        "Sysctls",
                        "Runtime",
                        "Isolation",
                        "MaskedPaths",
                        "ReadonlyPaths",
                    ];
                    _serde::Deserializer::deserialize_struct(
                        __deserializer,
                        "HostConfig",
                        FIELDS,
                        __Visitor {
                            marker: _serde::__private::PhantomData::<HostConfig>,
                            lifetime: _serde::__private::PhantomData,
                        },
                    )
                }
            }
        };
        #[serde(rename_all = "PascalCase")]
        pub enum ThrottleDevice {}
        #[automatically_derived]
        impl ::core::clone::Clone for ThrottleDevice {
            #[inline]
            fn clone(&self) -> ThrottleDevice {
                match *self {}
            }
        }
        #[automatically_derived]
        impl ::core::fmt::Debug for ThrottleDevice {
            #[inline]
            fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                match *self {}
            }
        }
        #[serde(rename_all = "PascalCase")]
        pub struct ThrottleDeviceRate {
            #[serde(skip_serializing_if = "Option::is_none")]
            pub path: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none")]
            pub rate: Option<u64>,
        }
        #[automatically_derived]
        impl ::core::clone::Clone for ThrottleDeviceRate {
            #[inline]
            fn clone(&self) -> ThrottleDeviceRate {
                ThrottleDeviceRate {
                    path: ::core::clone::Clone::clone(&self.path),
                    rate: ::core::clone::Clone::clone(&self.rate),
                }
            }
        }
        #[automatically_derived]
        impl ::core::fmt::Debug for ThrottleDeviceRate {
            #[inline]
            fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                ::core::fmt::Formatter::debug_struct_field2_finish(
                    f,
                    "ThrottleDeviceRate",
                    "path",
                    &self.path,
                    "rate",
                    &&self.rate,
                )
            }
        }
        #[doc(hidden)]
        #[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
        const _: () = {
            #[allow(unused_extern_crates, clippy::useless_attribute)]
            extern crate serde as _serde;
            #[automatically_derived]
            impl _serde::Serialize for ThrottleDeviceRate {
                fn serialize<__S>(
                    &self,
                    __serializer: __S,
                ) -> _serde::__private::Result<__S::Ok, __S::Error>
                where
                    __S: _serde::Serializer,
                {
                    let mut __serde_state = _serde::Serializer::serialize_struct(
                        __serializer,
                        "ThrottleDeviceRate",
                        false as usize + if Option::is_none(&self.path) { 0 } else { 1 }
                            + if Option::is_none(&self.rate) { 0 } else { 1 },
                    )?;
                    if !Option::is_none(&self.path) {
                        _serde::ser::SerializeStruct::serialize_field(
                            &mut __serde_state,
                            "Path",
                            &self.path,
                        )?;
                    } else {
                        _serde::ser::SerializeStruct::skip_field(
                            &mut __serde_state,
                            "Path",
                        )?;
                    }
                    if !Option::is_none(&self.rate) {
                        _serde::ser::SerializeStruct::serialize_field(
                            &mut __serde_state,
                            "Rate",
                            &self.rate,
                        )?;
                    } else {
                        _serde::ser::SerializeStruct::skip_field(
                            &mut __serde_state,
                            "Rate",
                        )?;
                    }
                    _serde::ser::SerializeStruct::end(__serde_state)
                }
            }
        };
        #[doc(hidden)]
        #[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
        const _: () = {
            #[allow(unused_extern_crates, clippy::useless_attribute)]
            extern crate serde as _serde;
            #[automatically_derived]
            impl<'de> _serde::Deserialize<'de> for ThrottleDeviceRate {
                fn deserialize<__D>(
                    __deserializer: __D,
                ) -> _serde::__private::Result<Self, __D::Error>
                where
                    __D: _serde::Deserializer<'de>,
                {
                    #[allow(non_camel_case_types)]
                    #[doc(hidden)]
                    enum __Field {
                        __field0,
                        __field1,
                        __ignore,
                    }
                    #[doc(hidden)]
                    struct __FieldVisitor;
                    impl<'de> _serde::de::Visitor<'de> for __FieldVisitor {
                        type Value = __Field;
                        fn expecting(
                            &self,
                            __formatter: &mut _serde::__private::Formatter,
                        ) -> _serde::__private::fmt::Result {
                            _serde::__private::Formatter::write_str(
                                __formatter,
                                "field identifier",
                            )
                        }
                        fn visit_u64<__E>(
                            self,
                            __value: u64,
                        ) -> _serde::__private::Result<Self::Value, __E>
                        where
                            __E: _serde::de::Error,
                        {
                            match __value {
                                0u64 => _serde::__private::Ok(__Field::__field0),
                                1u64 => _serde::__private::Ok(__Field::__field1),
                                _ => _serde::__private::Ok(__Field::__ignore),
                            }
                        }
                        fn visit_str<__E>(
                            self,
                            __value: &str,
                        ) -> _serde::__private::Result<Self::Value, __E>
                        where
                            __E: _serde::de::Error,
                        {
                            match __value {
                                "Path" => _serde::__private::Ok(__Field::__field0),
                                "Rate" => _serde::__private::Ok(__Field::__field1),
                                _ => _serde::__private::Ok(__Field::__ignore),
                            }
                        }
                        fn visit_bytes<__E>(
                            self,
                            __value: &[u8],
                        ) -> _serde::__private::Result<Self::Value, __E>
                        where
                            __E: _serde::de::Error,
                        {
                            match __value {
                                b"Path" => _serde::__private::Ok(__Field::__field0),
                                b"Rate" => _serde::__private::Ok(__Field::__field1),
                                _ => _serde::__private::Ok(__Field::__ignore),
                            }
                        }
                    }
                    impl<'de> _serde::Deserialize<'de> for __Field {
                        #[inline]
                        fn deserialize<__D>(
                            __deserializer: __D,
                        ) -> _serde::__private::Result<Self, __D::Error>
                        where
                            __D: _serde::Deserializer<'de>,
                        {
                            _serde::Deserializer::deserialize_identifier(
                                __deserializer,
                                __FieldVisitor,
                            )
                        }
                    }
                    #[doc(hidden)]
                    struct __Visitor<'de> {
                        marker: _serde::__private::PhantomData<ThrottleDeviceRate>,
                        lifetime: _serde::__private::PhantomData<&'de ()>,
                    }
                    impl<'de> _serde::de::Visitor<'de> for __Visitor<'de> {
                        type Value = ThrottleDeviceRate;
                        fn expecting(
                            &self,
                            __formatter: &mut _serde::__private::Formatter,
                        ) -> _serde::__private::fmt::Result {
                            _serde::__private::Formatter::write_str(
                                __formatter,
                                "struct ThrottleDeviceRate",
                            )
                        }
                        #[inline]
                        fn visit_seq<__A>(
                            self,
                            mut __seq: __A,
                        ) -> _serde::__private::Result<Self::Value, __A::Error>
                        where
                            __A: _serde::de::SeqAccess<'de>,
                        {
                            let __field0 = match _serde::de::SeqAccess::next_element::<
                                Option<String>,
                            >(&mut __seq)? {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            0usize,
                                            &"struct ThrottleDeviceRate with 2 elements",
                                        ),
                                    );
                                }
                            };
                            let __field1 = match _serde::de::SeqAccess::next_element::<
                                Option<u64>,
                            >(&mut __seq)? {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            1usize,
                                            &"struct ThrottleDeviceRate with 2 elements",
                                        ),
                                    );
                                }
                            };
                            _serde::__private::Ok(ThrottleDeviceRate {
                                path: __field0,
                                rate: __field1,
                            })
                        }
                        #[inline]
                        fn visit_map<__A>(
                            self,
                            mut __map: __A,
                        ) -> _serde::__private::Result<Self::Value, __A::Error>
                        where
                            __A: _serde::de::MapAccess<'de>,
                        {
                            let mut __field0: _serde::__private::Option<
                                Option<String>,
                            > = _serde::__private::None;
                            let mut __field1: _serde::__private::Option<Option<u64>> = _serde::__private::None;
                            while let _serde::__private::Some(__key) = _serde::de::MapAccess::next_key::<
                                __Field,
                            >(&mut __map)? {
                                match __key {
                                    __Field::__field0 => {
                                        if _serde::__private::Option::is_some(&__field0) {
                                            return _serde::__private::Err(
                                                <__A::Error as _serde::de::Error>::duplicate_field("Path"),
                                            );
                                        }
                                        __field0 = _serde::__private::Some(
                                            _serde::de::MapAccess::next_value::<
                                                Option<String>,
                                            >(&mut __map)?,
                                        );
                                    }
                                    __Field::__field1 => {
                                        if _serde::__private::Option::is_some(&__field1) {
                                            return _serde::__private::Err(
                                                <__A::Error as _serde::de::Error>::duplicate_field("Rate"),
                                            );
                                        }
                                        __field1 = _serde::__private::Some(
                                            _serde::de::MapAccess::next_value::<
                                                Option<u64>,
                                            >(&mut __map)?,
                                        );
                                    }
                                    _ => {
                                        let _ = _serde::de::MapAccess::next_value::<
                                            _serde::de::IgnoredAny,
                                        >(&mut __map)?;
                                    }
                                }
                            }
                            let __field0 = match __field0 {
                                _serde::__private::Some(__field0) => __field0,
                                _serde::__private::None => {
                                    _serde::__private::de::missing_field("Path")?
                                }
                            };
                            let __field1 = match __field1 {
                                _serde::__private::Some(__field1) => __field1,
                                _serde::__private::None => {
                                    _serde::__private::de::missing_field("Rate")?
                                }
                            };
                            _serde::__private::Ok(ThrottleDeviceRate {
                                path: __field0,
                                rate: __field1,
                            })
                        }
                    }
                    #[doc(hidden)]
                    const FIELDS: &'static [&'static str] = &["Path", "Rate"];
                    _serde::Deserializer::deserialize_struct(
                        __deserializer,
                        "ThrottleDeviceRate",
                        FIELDS,
                        __Visitor {
                            marker: _serde::__private::PhantomData::<ThrottleDeviceRate>,
                            lifetime: _serde::__private::PhantomData,
                        },
                    )
                }
            }
        };
        #[serde(rename_all = "PascalCase")]
        pub struct RestartPolicy {
            #[serde(skip_serializing_if = "Option::is_none")]
            pub name: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none")]
            pub maximum_retry_count: Option<u64>,
        }
        #[automatically_derived]
        impl ::core::clone::Clone for RestartPolicy {
            #[inline]
            fn clone(&self) -> RestartPolicy {
                RestartPolicy {
                    name: ::core::clone::Clone::clone(&self.name),
                    maximum_retry_count: ::core::clone::Clone::clone(
                        &self.maximum_retry_count,
                    ),
                }
            }
        }
        #[automatically_derived]
        impl ::core::fmt::Debug for RestartPolicy {
            #[inline]
            fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                ::core::fmt::Formatter::debug_struct_field2_finish(
                    f,
                    "RestartPolicy",
                    "name",
                    &self.name,
                    "maximum_retry_count",
                    &&self.maximum_retry_count,
                )
            }
        }
        #[doc(hidden)]
        #[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
        const _: () = {
            #[allow(unused_extern_crates, clippy::useless_attribute)]
            extern crate serde as _serde;
            #[automatically_derived]
            impl _serde::Serialize for RestartPolicy {
                fn serialize<__S>(
                    &self,
                    __serializer: __S,
                ) -> _serde::__private::Result<__S::Ok, __S::Error>
                where
                    __S: _serde::Serializer,
                {
                    let mut __serde_state = _serde::Serializer::serialize_struct(
                        __serializer,
                        "RestartPolicy",
                        false as usize + if Option::is_none(&self.name) { 0 } else { 1 }
                            + if Option::is_none(&self.maximum_retry_count) {
                                0
                            } else {
                                1
                            },
                    )?;
                    if !Option::is_none(&self.name) {
                        _serde::ser::SerializeStruct::serialize_field(
                            &mut __serde_state,
                            "Name",
                            &self.name,
                        )?;
                    } else {
                        _serde::ser::SerializeStruct::skip_field(
                            &mut __serde_state,
                            "Name",
                        )?;
                    }
                    if !Option::is_none(&self.maximum_retry_count) {
                        _serde::ser::SerializeStruct::serialize_field(
                            &mut __serde_state,
                            "MaximumRetryCount",
                            &self.maximum_retry_count,
                        )?;
                    } else {
                        _serde::ser::SerializeStruct::skip_field(
                            &mut __serde_state,
                            "MaximumRetryCount",
                        )?;
                    }
                    _serde::ser::SerializeStruct::end(__serde_state)
                }
            }
        };
        #[doc(hidden)]
        #[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
        const _: () = {
            #[allow(unused_extern_crates, clippy::useless_attribute)]
            extern crate serde as _serde;
            #[automatically_derived]
            impl<'de> _serde::Deserialize<'de> for RestartPolicy {
                fn deserialize<__D>(
                    __deserializer: __D,
                ) -> _serde::__private::Result<Self, __D::Error>
                where
                    __D: _serde::Deserializer<'de>,
                {
                    #[allow(non_camel_case_types)]
                    #[doc(hidden)]
                    enum __Field {
                        __field0,
                        __field1,
                        __ignore,
                    }
                    #[doc(hidden)]
                    struct __FieldVisitor;
                    impl<'de> _serde::de::Visitor<'de> for __FieldVisitor {
                        type Value = __Field;
                        fn expecting(
                            &self,
                            __formatter: &mut _serde::__private::Formatter,
                        ) -> _serde::__private::fmt::Result {
                            _serde::__private::Formatter::write_str(
                                __formatter,
                                "field identifier",
                            )
                        }
                        fn visit_u64<__E>(
                            self,
                            __value: u64,
                        ) -> _serde::__private::Result<Self::Value, __E>
                        where
                            __E: _serde::de::Error,
                        {
                            match __value {
                                0u64 => _serde::__private::Ok(__Field::__field0),
                                1u64 => _serde::__private::Ok(__Field::__field1),
                                _ => _serde::__private::Ok(__Field::__ignore),
                            }
                        }
                        fn visit_str<__E>(
                            self,
                            __value: &str,
                        ) -> _serde::__private::Result<Self::Value, __E>
                        where
                            __E: _serde::de::Error,
                        {
                            match __value {
                                "Name" => _serde::__private::Ok(__Field::__field0),
                                "MaximumRetryCount" => {
                                    _serde::__private::Ok(__Field::__field1)
                                }
                                _ => _serde::__private::Ok(__Field::__ignore),
                            }
                        }
                        fn visit_bytes<__E>(
                            self,
                            __value: &[u8],
                        ) -> _serde::__private::Result<Self::Value, __E>
                        where
                            __E: _serde::de::Error,
                        {
                            match __value {
                                b"Name" => _serde::__private::Ok(__Field::__field0),
                                b"MaximumRetryCount" => {
                                    _serde::__private::Ok(__Field::__field1)
                                }
                                _ => _serde::__private::Ok(__Field::__ignore),
                            }
                        }
                    }
                    impl<'de> _serde::Deserialize<'de> for __Field {
                        #[inline]
                        fn deserialize<__D>(
                            __deserializer: __D,
                        ) -> _serde::__private::Result<Self, __D::Error>
                        where
                            __D: _serde::Deserializer<'de>,
                        {
                            _serde::Deserializer::deserialize_identifier(
                                __deserializer,
                                __FieldVisitor,
                            )
                        }
                    }
                    #[doc(hidden)]
                    struct __Visitor<'de> {
                        marker: _serde::__private::PhantomData<RestartPolicy>,
                        lifetime: _serde::__private::PhantomData<&'de ()>,
                    }
                    impl<'de> _serde::de::Visitor<'de> for __Visitor<'de> {
                        type Value = RestartPolicy;
                        fn expecting(
                            &self,
                            __formatter: &mut _serde::__private::Formatter,
                        ) -> _serde::__private::fmt::Result {
                            _serde::__private::Formatter::write_str(
                                __formatter,
                                "struct RestartPolicy",
                            )
                        }
                        #[inline]
                        fn visit_seq<__A>(
                            self,
                            mut __seq: __A,
                        ) -> _serde::__private::Result<Self::Value, __A::Error>
                        where
                            __A: _serde::de::SeqAccess<'de>,
                        {
                            let __field0 = match _serde::de::SeqAccess::next_element::<
                                Option<String>,
                            >(&mut __seq)? {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            0usize,
                                            &"struct RestartPolicy with 2 elements",
                                        ),
                                    );
                                }
                            };
                            let __field1 = match _serde::de::SeqAccess::next_element::<
                                Option<u64>,
                            >(&mut __seq)? {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            1usize,
                                            &"struct RestartPolicy with 2 elements",
                                        ),
                                    );
                                }
                            };
                            _serde::__private::Ok(RestartPolicy {
                                name: __field0,
                                maximum_retry_count: __field1,
                            })
                        }
                        #[inline]
                        fn visit_map<__A>(
                            self,
                            mut __map: __A,
                        ) -> _serde::__private::Result<Self::Value, __A::Error>
                        where
                            __A: _serde::de::MapAccess<'de>,
                        {
                            let mut __field0: _serde::__private::Option<
                                Option<String>,
                            > = _serde::__private::None;
                            let mut __field1: _serde::__private::Option<Option<u64>> = _serde::__private::None;
                            while let _serde::__private::Some(__key) = _serde::de::MapAccess::next_key::<
                                __Field,
                            >(&mut __map)? {
                                match __key {
                                    __Field::__field0 => {
                                        if _serde::__private::Option::is_some(&__field0) {
                                            return _serde::__private::Err(
                                                <__A::Error as _serde::de::Error>::duplicate_field("Name"),
                                            );
                                        }
                                        __field0 = _serde::__private::Some(
                                            _serde::de::MapAccess::next_value::<
                                                Option<String>,
                                            >(&mut __map)?,
                                        );
                                    }
                                    __Field::__field1 => {
                                        if _serde::__private::Option::is_some(&__field1) {
                                            return _serde::__private::Err(
                                                <__A::Error as _serde::de::Error>::duplicate_field(
                                                    "MaximumRetryCount",
                                                ),
                                            );
                                        }
                                        __field1 = _serde::__private::Some(
                                            _serde::de::MapAccess::next_value::<
                                                Option<u64>,
                                            >(&mut __map)?,
                                        );
                                    }
                                    _ => {
                                        let _ = _serde::de::MapAccess::next_value::<
                                            _serde::de::IgnoredAny,
                                        >(&mut __map)?;
                                    }
                                }
                            }
                            let __field0 = match __field0 {
                                _serde::__private::Some(__field0) => __field0,
                                _serde::__private::None => {
                                    _serde::__private::de::missing_field("Name")?
                                }
                            };
                            let __field1 = match __field1 {
                                _serde::__private::Some(__field1) => __field1,
                                _serde::__private::None => {
                                    _serde::__private::de::missing_field("MaximumRetryCount")?
                                }
                            };
                            _serde::__private::Ok(RestartPolicy {
                                name: __field0,
                                maximum_retry_count: __field1,
                            })
                        }
                    }
                    #[doc(hidden)]
                    const FIELDS: &'static [&'static str] = &[
                        "Name",
                        "MaximumRetryCount",
                    ];
                    _serde::Deserializer::deserialize_struct(
                        __deserializer,
                        "RestartPolicy",
                        FIELDS,
                        __Visitor {
                            marker: _serde::__private::PhantomData::<RestartPolicy>,
                            lifetime: _serde::__private::PhantomData,
                        },
                    )
                }
            }
        };
        pub type PortMap = HashMap<String, Option<Vec<PortBinding>>>;
        #[serde(rename_all = "PascalCase")]
        pub struct PortBinding {
            #[serde(skip_serializing_if = "Option::is_none")]
            pub host_ip: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none")]
            pub host_port: Option<String>,
        }
        #[automatically_derived]
        impl ::core::clone::Clone for PortBinding {
            #[inline]
            fn clone(&self) -> PortBinding {
                PortBinding {
                    host_ip: ::core::clone::Clone::clone(&self.host_ip),
                    host_port: ::core::clone::Clone::clone(&self.host_port),
                }
            }
        }
        #[automatically_derived]
        impl ::core::fmt::Debug for PortBinding {
            #[inline]
            fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                ::core::fmt::Formatter::debug_struct_field2_finish(
                    f,
                    "PortBinding",
                    "host_ip",
                    &self.host_ip,
                    "host_port",
                    &&self.host_port,
                )
            }
        }
        #[doc(hidden)]
        #[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
        const _: () = {
            #[allow(unused_extern_crates, clippy::useless_attribute)]
            extern crate serde as _serde;
            #[automatically_derived]
            impl _serde::Serialize for PortBinding {
                fn serialize<__S>(
                    &self,
                    __serializer: __S,
                ) -> _serde::__private::Result<__S::Ok, __S::Error>
                where
                    __S: _serde::Serializer,
                {
                    let mut __serde_state = _serde::Serializer::serialize_struct(
                        __serializer,
                        "PortBinding",
                        false as usize
                            + if Option::is_none(&self.host_ip) { 0 } else { 1 }
                            + if Option::is_none(&self.host_port) { 0 } else { 1 },
                    )?;
                    if !Option::is_none(&self.host_ip) {
                        _serde::ser::SerializeStruct::serialize_field(
                            &mut __serde_state,
                            "HostIp",
                            &self.host_ip,
                        )?;
                    } else {
                        _serde::ser::SerializeStruct::skip_field(
                            &mut __serde_state,
                            "HostIp",
                        )?;
                    }
                    if !Option::is_none(&self.host_port) {
                        _serde::ser::SerializeStruct::serialize_field(
                            &mut __serde_state,
                            "HostPort",
                            &self.host_port,
                        )?;
                    } else {
                        _serde::ser::SerializeStruct::skip_field(
                            &mut __serde_state,
                            "HostPort",
                        )?;
                    }
                    _serde::ser::SerializeStruct::end(__serde_state)
                }
            }
        };
        #[doc(hidden)]
        #[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
        const _: () = {
            #[allow(unused_extern_crates, clippy::useless_attribute)]
            extern crate serde as _serde;
            #[automatically_derived]
            impl<'de> _serde::Deserialize<'de> for PortBinding {
                fn deserialize<__D>(
                    __deserializer: __D,
                ) -> _serde::__private::Result<Self, __D::Error>
                where
                    __D: _serde::Deserializer<'de>,
                {
                    #[allow(non_camel_case_types)]
                    #[doc(hidden)]
                    enum __Field {
                        __field0,
                        __field1,
                        __ignore,
                    }
                    #[doc(hidden)]
                    struct __FieldVisitor;
                    impl<'de> _serde::de::Visitor<'de> for __FieldVisitor {
                        type Value = __Field;
                        fn expecting(
                            &self,
                            __formatter: &mut _serde::__private::Formatter,
                        ) -> _serde::__private::fmt::Result {
                            _serde::__private::Formatter::write_str(
                                __formatter,
                                "field identifier",
                            )
                        }
                        fn visit_u64<__E>(
                            self,
                            __value: u64,
                        ) -> _serde::__private::Result<Self::Value, __E>
                        where
                            __E: _serde::de::Error,
                        {
                            match __value {
                                0u64 => _serde::__private::Ok(__Field::__field0),
                                1u64 => _serde::__private::Ok(__Field::__field1),
                                _ => _serde::__private::Ok(__Field::__ignore),
                            }
                        }
                        fn visit_str<__E>(
                            self,
                            __value: &str,
                        ) -> _serde::__private::Result<Self::Value, __E>
                        where
                            __E: _serde::de::Error,
                        {
                            match __value {
                                "HostIp" => _serde::__private::Ok(__Field::__field0),
                                "HostPort" => _serde::__private::Ok(__Field::__field1),
                                _ => _serde::__private::Ok(__Field::__ignore),
                            }
                        }
                        fn visit_bytes<__E>(
                            self,
                            __value: &[u8],
                        ) -> _serde::__private::Result<Self::Value, __E>
                        where
                            __E: _serde::de::Error,
                        {
                            match __value {
                                b"HostIp" => _serde::__private::Ok(__Field::__field0),
                                b"HostPort" => _serde::__private::Ok(__Field::__field1),
                                _ => _serde::__private::Ok(__Field::__ignore),
                            }
                        }
                    }
                    impl<'de> _serde::Deserialize<'de> for __Field {
                        #[inline]
                        fn deserialize<__D>(
                            __deserializer: __D,
                        ) -> _serde::__private::Result<Self, __D::Error>
                        where
                            __D: _serde::Deserializer<'de>,
                        {
                            _serde::Deserializer::deserialize_identifier(
                                __deserializer,
                                __FieldVisitor,
                            )
                        }
                    }
                    #[doc(hidden)]
                    struct __Visitor<'de> {
                        marker: _serde::__private::PhantomData<PortBinding>,
                        lifetime: _serde::__private::PhantomData<&'de ()>,
                    }
                    impl<'de> _serde::de::Visitor<'de> for __Visitor<'de> {
                        type Value = PortBinding;
                        fn expecting(
                            &self,
                            __formatter: &mut _serde::__private::Formatter,
                        ) -> _serde::__private::fmt::Result {
                            _serde::__private::Formatter::write_str(
                                __formatter,
                                "struct PortBinding",
                            )
                        }
                        #[inline]
                        fn visit_seq<__A>(
                            self,
                            mut __seq: __A,
                        ) -> _serde::__private::Result<Self::Value, __A::Error>
                        where
                            __A: _serde::de::SeqAccess<'de>,
                        {
                            let __field0 = match _serde::de::SeqAccess::next_element::<
                                Option<String>,
                            >(&mut __seq)? {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            0usize,
                                            &"struct PortBinding with 2 elements",
                                        ),
                                    );
                                }
                            };
                            let __field1 = match _serde::de::SeqAccess::next_element::<
                                Option<String>,
                            >(&mut __seq)? {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            1usize,
                                            &"struct PortBinding with 2 elements",
                                        ),
                                    );
                                }
                            };
                            _serde::__private::Ok(PortBinding {
                                host_ip: __field0,
                                host_port: __field1,
                            })
                        }
                        #[inline]
                        fn visit_map<__A>(
                            self,
                            mut __map: __A,
                        ) -> _serde::__private::Result<Self::Value, __A::Error>
                        where
                            __A: _serde::de::MapAccess<'de>,
                        {
                            let mut __field0: _serde::__private::Option<
                                Option<String>,
                            > = _serde::__private::None;
                            let mut __field1: _serde::__private::Option<
                                Option<String>,
                            > = _serde::__private::None;
                            while let _serde::__private::Some(__key) = _serde::de::MapAccess::next_key::<
                                __Field,
                            >(&mut __map)? {
                                match __key {
                                    __Field::__field0 => {
                                        if _serde::__private::Option::is_some(&__field0) {
                                            return _serde::__private::Err(
                                                <__A::Error as _serde::de::Error>::duplicate_field("HostIp"),
                                            );
                                        }
                                        __field0 = _serde::__private::Some(
                                            _serde::de::MapAccess::next_value::<
                                                Option<String>,
                                            >(&mut __map)?,
                                        );
                                    }
                                    __Field::__field1 => {
                                        if _serde::__private::Option::is_some(&__field1) {
                                            return _serde::__private::Err(
                                                <__A::Error as _serde::de::Error>::duplicate_field(
                                                    "HostPort",
                                                ),
                                            );
                                        }
                                        __field1 = _serde::__private::Some(
                                            _serde::de::MapAccess::next_value::<
                                                Option<String>,
                                            >(&mut __map)?,
                                        );
                                    }
                                    _ => {
                                        let _ = _serde::de::MapAccess::next_value::<
                                            _serde::de::IgnoredAny,
                                        >(&mut __map)?;
                                    }
                                }
                            }
                            let __field0 = match __field0 {
                                _serde::__private::Some(__field0) => __field0,
                                _serde::__private::None => {
                                    _serde::__private::de::missing_field("HostIp")?
                                }
                            };
                            let __field1 = match __field1 {
                                _serde::__private::Some(__field1) => __field1,
                                _serde::__private::None => {
                                    _serde::__private::de::missing_field("HostPort")?
                                }
                            };
                            _serde::__private::Ok(PortBinding {
                                host_ip: __field0,
                                host_port: __field1,
                            })
                        }
                    }
                    #[doc(hidden)]
                    const FIELDS: &'static [&'static str] = &["HostIp", "HostPort"];
                    _serde::Deserializer::deserialize_struct(
                        __deserializer,
                        "PortBinding",
                        FIELDS,
                        __Visitor {
                            marker: _serde::__private::PhantomData::<PortBinding>,
                            lifetime: _serde::__private::PhantomData,
                        },
                    )
                }
            }
        };
        pub struct LogConfig {
            #[serde(rename = "Type")]
            #[serde(skip_serializing_if = "Option::is_none")]
            pub ty: Option<String>,
            #[serde(rename = "Config")]
            #[serde(skip_serializing_if = "Option::is_none")]
            pub config: Option<HashMap<String, String>>,
        }
        #[automatically_derived]
        impl ::core::clone::Clone for LogConfig {
            #[inline]
            fn clone(&self) -> LogConfig {
                LogConfig {
                    ty: ::core::clone::Clone::clone(&self.ty),
                    config: ::core::clone::Clone::clone(&self.config),
                }
            }
        }
        #[automatically_derived]
        impl ::core::fmt::Debug for LogConfig {
            #[inline]
            fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                ::core::fmt::Formatter::debug_struct_field2_finish(
                    f,
                    "LogConfig",
                    "ty",
                    &self.ty,
                    "config",
                    &&self.config,
                )
            }
        }
        #[doc(hidden)]
        #[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
        const _: () = {
            #[allow(unused_extern_crates, clippy::useless_attribute)]
            extern crate serde as _serde;
            #[automatically_derived]
            impl _serde::Serialize for LogConfig {
                fn serialize<__S>(
                    &self,
                    __serializer: __S,
                ) -> _serde::__private::Result<__S::Ok, __S::Error>
                where
                    __S: _serde::Serializer,
                {
                    let mut __serde_state = _serde::Serializer::serialize_struct(
                        __serializer,
                        "LogConfig",
                        false as usize + if Option::is_none(&self.ty) { 0 } else { 1 }
                            + if Option::is_none(&self.config) { 0 } else { 1 },
                    )?;
                    if !Option::is_none(&self.ty) {
                        _serde::ser::SerializeStruct::serialize_field(
                            &mut __serde_state,
                            "Type",
                            &self.ty,
                        )?;
                    } else {
                        _serde::ser::SerializeStruct::skip_field(
                            &mut __serde_state,
                            "Type",
                        )?;
                    }
                    if !Option::is_none(&self.config) {
                        _serde::ser::SerializeStruct::serialize_field(
                            &mut __serde_state,
                            "Config",
                            &self.config,
                        )?;
                    } else {
                        _serde::ser::SerializeStruct::skip_field(
                            &mut __serde_state,
                            "Config",
                        )?;
                    }
                    _serde::ser::SerializeStruct::end(__serde_state)
                }
            }
        };
        #[doc(hidden)]
        #[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
        const _: () = {
            #[allow(unused_extern_crates, clippy::useless_attribute)]
            extern crate serde as _serde;
            #[automatically_derived]
            impl<'de> _serde::Deserialize<'de> for LogConfig {
                fn deserialize<__D>(
                    __deserializer: __D,
                ) -> _serde::__private::Result<Self, __D::Error>
                where
                    __D: _serde::Deserializer<'de>,
                {
                    #[allow(non_camel_case_types)]
                    #[doc(hidden)]
                    enum __Field {
                        __field0,
                        __field1,
                        __ignore,
                    }
                    #[doc(hidden)]
                    struct __FieldVisitor;
                    impl<'de> _serde::de::Visitor<'de> for __FieldVisitor {
                        type Value = __Field;
                        fn expecting(
                            &self,
                            __formatter: &mut _serde::__private::Formatter,
                        ) -> _serde::__private::fmt::Result {
                            _serde::__private::Formatter::write_str(
                                __formatter,
                                "field identifier",
                            )
                        }
                        fn visit_u64<__E>(
                            self,
                            __value: u64,
                        ) -> _serde::__private::Result<Self::Value, __E>
                        where
                            __E: _serde::de::Error,
                        {
                            match __value {
                                0u64 => _serde::__private::Ok(__Field::__field0),
                                1u64 => _serde::__private::Ok(__Field::__field1),
                                _ => _serde::__private::Ok(__Field::__ignore),
                            }
                        }
                        fn visit_str<__E>(
                            self,
                            __value: &str,
                        ) -> _serde::__private::Result<Self::Value, __E>
                        where
                            __E: _serde::de::Error,
                        {
                            match __value {
                                "Type" => _serde::__private::Ok(__Field::__field0),
                                "Config" => _serde::__private::Ok(__Field::__field1),
                                _ => _serde::__private::Ok(__Field::__ignore),
                            }
                        }
                        fn visit_bytes<__E>(
                            self,
                            __value: &[u8],
                        ) -> _serde::__private::Result<Self::Value, __E>
                        where
                            __E: _serde::de::Error,
                        {
                            match __value {
                                b"Type" => _serde::__private::Ok(__Field::__field0),
                                b"Config" => _serde::__private::Ok(__Field::__field1),
                                _ => _serde::__private::Ok(__Field::__ignore),
                            }
                        }
                    }
                    impl<'de> _serde::Deserialize<'de> for __Field {
                        #[inline]
                        fn deserialize<__D>(
                            __deserializer: __D,
                        ) -> _serde::__private::Result<Self, __D::Error>
                        where
                            __D: _serde::Deserializer<'de>,
                        {
                            _serde::Deserializer::deserialize_identifier(
                                __deserializer,
                                __FieldVisitor,
                            )
                        }
                    }
                    #[doc(hidden)]
                    struct __Visitor<'de> {
                        marker: _serde::__private::PhantomData<LogConfig>,
                        lifetime: _serde::__private::PhantomData<&'de ()>,
                    }
                    impl<'de> _serde::de::Visitor<'de> for __Visitor<'de> {
                        type Value = LogConfig;
                        fn expecting(
                            &self,
                            __formatter: &mut _serde::__private::Formatter,
                        ) -> _serde::__private::fmt::Result {
                            _serde::__private::Formatter::write_str(
                                __formatter,
                                "struct LogConfig",
                            )
                        }
                        #[inline]
                        fn visit_seq<__A>(
                            self,
                            mut __seq: __A,
                        ) -> _serde::__private::Result<Self::Value, __A::Error>
                        where
                            __A: _serde::de::SeqAccess<'de>,
                        {
                            let __field0 = match _serde::de::SeqAccess::next_element::<
                                Option<String>,
                            >(&mut __seq)? {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            0usize,
                                            &"struct LogConfig with 2 elements",
                                        ),
                                    );
                                }
                            };
                            let __field1 = match _serde::de::SeqAccess::next_element::<
                                Option<HashMap<String, String>>,
                            >(&mut __seq)? {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            1usize,
                                            &"struct LogConfig with 2 elements",
                                        ),
                                    );
                                }
                            };
                            _serde::__private::Ok(LogConfig {
                                ty: __field0,
                                config: __field1,
                            })
                        }
                        #[inline]
                        fn visit_map<__A>(
                            self,
                            mut __map: __A,
                        ) -> _serde::__private::Result<Self::Value, __A::Error>
                        where
                            __A: _serde::de::MapAccess<'de>,
                        {
                            let mut __field0: _serde::__private::Option<
                                Option<String>,
                            > = _serde::__private::None;
                            let mut __field1: _serde::__private::Option<
                                Option<HashMap<String, String>>,
                            > = _serde::__private::None;
                            while let _serde::__private::Some(__key) = _serde::de::MapAccess::next_key::<
                                __Field,
                            >(&mut __map)? {
                                match __key {
                                    __Field::__field0 => {
                                        if _serde::__private::Option::is_some(&__field0) {
                                            return _serde::__private::Err(
                                                <__A::Error as _serde::de::Error>::duplicate_field("Type"),
                                            );
                                        }
                                        __field0 = _serde::__private::Some(
                                            _serde::de::MapAccess::next_value::<
                                                Option<String>,
                                            >(&mut __map)?,
                                        );
                                    }
                                    __Field::__field1 => {
                                        if _serde::__private::Option::is_some(&__field1) {
                                            return _serde::__private::Err(
                                                <__A::Error as _serde::de::Error>::duplicate_field("Config"),
                                            );
                                        }
                                        __field1 = _serde::__private::Some(
                                            _serde::de::MapAccess::next_value::<
                                                Option<HashMap<String, String>>,
                                            >(&mut __map)?,
                                        );
                                    }
                                    _ => {
                                        let _ = _serde::de::MapAccess::next_value::<
                                            _serde::de::IgnoredAny,
                                        >(&mut __map)?;
                                    }
                                }
                            }
                            let __field0 = match __field0 {
                                _serde::__private::Some(__field0) => __field0,
                                _serde::__private::None => {
                                    _serde::__private::de::missing_field("Type")?
                                }
                            };
                            let __field1 = match __field1 {
                                _serde::__private::Some(__field1) => __field1,
                                _serde::__private::None => {
                                    _serde::__private::de::missing_field("Config")?
                                }
                            };
                            _serde::__private::Ok(LogConfig {
                                ty: __field0,
                                config: __field1,
                            })
                        }
                    }
                    #[doc(hidden)]
                    const FIELDS: &'static [&'static str] = &["Type", "Config"];
                    _serde::Deserializer::deserialize_struct(
                        __deserializer,
                        "LogConfig",
                        FIELDS,
                        __Visitor {
                            marker: _serde::__private::PhantomData::<LogConfig>,
                            lifetime: _serde::__private::PhantomData,
                        },
                    )
                }
            }
        };
        #[serde(rename_all = "PascalCase")]
        pub struct Ulimit {
            pub name: String,
            pub soft: u64,
            pub hard: u64,
        }
        #[automatically_derived]
        impl ::core::clone::Clone for Ulimit {
            #[inline]
            fn clone(&self) -> Ulimit {
                Ulimit {
                    name: ::core::clone::Clone::clone(&self.name),
                    soft: ::core::clone::Clone::clone(&self.soft),
                    hard: ::core::clone::Clone::clone(&self.hard),
                }
            }
        }
        #[automatically_derived]
        impl ::core::fmt::Debug for Ulimit {
            #[inline]
            fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                ::core::fmt::Formatter::debug_struct_field3_finish(
                    f,
                    "Ulimit",
                    "name",
                    &self.name,
                    "soft",
                    &self.soft,
                    "hard",
                    &&self.hard,
                )
            }
        }
        #[doc(hidden)]
        #[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
        const _: () = {
            #[allow(unused_extern_crates, clippy::useless_attribute)]
            extern crate serde as _serde;
            #[automatically_derived]
            impl _serde::Serialize for Ulimit {
                fn serialize<__S>(
                    &self,
                    __serializer: __S,
                ) -> _serde::__private::Result<__S::Ok, __S::Error>
                where
                    __S: _serde::Serializer,
                {
                    let mut __serde_state = _serde::Serializer::serialize_struct(
                        __serializer,
                        "Ulimit",
                        false as usize + 1 + 1 + 1,
                    )?;
                    _serde::ser::SerializeStruct::serialize_field(
                        &mut __serde_state,
                        "Name",
                        &self.name,
                    )?;
                    _serde::ser::SerializeStruct::serialize_field(
                        &mut __serde_state,
                        "Soft",
                        &self.soft,
                    )?;
                    _serde::ser::SerializeStruct::serialize_field(
                        &mut __serde_state,
                        "Hard",
                        &self.hard,
                    )?;
                    _serde::ser::SerializeStruct::end(__serde_state)
                }
            }
        };
        #[doc(hidden)]
        #[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
        const _: () = {
            #[allow(unused_extern_crates, clippy::useless_attribute)]
            extern crate serde as _serde;
            #[automatically_derived]
            impl<'de> _serde::Deserialize<'de> for Ulimit {
                fn deserialize<__D>(
                    __deserializer: __D,
                ) -> _serde::__private::Result<Self, __D::Error>
                where
                    __D: _serde::Deserializer<'de>,
                {
                    #[allow(non_camel_case_types)]
                    #[doc(hidden)]
                    enum __Field {
                        __field0,
                        __field1,
                        __field2,
                        __ignore,
                    }
                    #[doc(hidden)]
                    struct __FieldVisitor;
                    impl<'de> _serde::de::Visitor<'de> for __FieldVisitor {
                        type Value = __Field;
                        fn expecting(
                            &self,
                            __formatter: &mut _serde::__private::Formatter,
                        ) -> _serde::__private::fmt::Result {
                            _serde::__private::Formatter::write_str(
                                __formatter,
                                "field identifier",
                            )
                        }
                        fn visit_u64<__E>(
                            self,
                            __value: u64,
                        ) -> _serde::__private::Result<Self::Value, __E>
                        where
                            __E: _serde::de::Error,
                        {
                            match __value {
                                0u64 => _serde::__private::Ok(__Field::__field0),
                                1u64 => _serde::__private::Ok(__Field::__field1),
                                2u64 => _serde::__private::Ok(__Field::__field2),
                                _ => _serde::__private::Ok(__Field::__ignore),
                            }
                        }
                        fn visit_str<__E>(
                            self,
                            __value: &str,
                        ) -> _serde::__private::Result<Self::Value, __E>
                        where
                            __E: _serde::de::Error,
                        {
                            match __value {
                                "Name" => _serde::__private::Ok(__Field::__field0),
                                "Soft" => _serde::__private::Ok(__Field::__field1),
                                "Hard" => _serde::__private::Ok(__Field::__field2),
                                _ => _serde::__private::Ok(__Field::__ignore),
                            }
                        }
                        fn visit_bytes<__E>(
                            self,
                            __value: &[u8],
                        ) -> _serde::__private::Result<Self::Value, __E>
                        where
                            __E: _serde::de::Error,
                        {
                            match __value {
                                b"Name" => _serde::__private::Ok(__Field::__field0),
                                b"Soft" => _serde::__private::Ok(__Field::__field1),
                                b"Hard" => _serde::__private::Ok(__Field::__field2),
                                _ => _serde::__private::Ok(__Field::__ignore),
                            }
                        }
                    }
                    impl<'de> _serde::Deserialize<'de> for __Field {
                        #[inline]
                        fn deserialize<__D>(
                            __deserializer: __D,
                        ) -> _serde::__private::Result<Self, __D::Error>
                        where
                            __D: _serde::Deserializer<'de>,
                        {
                            _serde::Deserializer::deserialize_identifier(
                                __deserializer,
                                __FieldVisitor,
                            )
                        }
                    }
                    #[doc(hidden)]
                    struct __Visitor<'de> {
                        marker: _serde::__private::PhantomData<Ulimit>,
                        lifetime: _serde::__private::PhantomData<&'de ()>,
                    }
                    impl<'de> _serde::de::Visitor<'de> for __Visitor<'de> {
                        type Value = Ulimit;
                        fn expecting(
                            &self,
                            __formatter: &mut _serde::__private::Formatter,
                        ) -> _serde::__private::fmt::Result {
                            _serde::__private::Formatter::write_str(
                                __formatter,
                                "struct Ulimit",
                            )
                        }
                        #[inline]
                        fn visit_seq<__A>(
                            self,
                            mut __seq: __A,
                        ) -> _serde::__private::Result<Self::Value, __A::Error>
                        where
                            __A: _serde::de::SeqAccess<'de>,
                        {
                            let __field0 = match _serde::de::SeqAccess::next_element::<
                                String,
                            >(&mut __seq)? {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            0usize,
                                            &"struct Ulimit with 3 elements",
                                        ),
                                    );
                                }
                            };
                            let __field1 = match _serde::de::SeqAccess::next_element::<
                                u64,
                            >(&mut __seq)? {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            1usize,
                                            &"struct Ulimit with 3 elements",
                                        ),
                                    );
                                }
                            };
                            let __field2 = match _serde::de::SeqAccess::next_element::<
                                u64,
                            >(&mut __seq)? {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            2usize,
                                            &"struct Ulimit with 3 elements",
                                        ),
                                    );
                                }
                            };
                            _serde::__private::Ok(Ulimit {
                                name: __field0,
                                soft: __field1,
                                hard: __field2,
                            })
                        }
                        #[inline]
                        fn visit_map<__A>(
                            self,
                            mut __map: __A,
                        ) -> _serde::__private::Result<Self::Value, __A::Error>
                        where
                            __A: _serde::de::MapAccess<'de>,
                        {
                            let mut __field0: _serde::__private::Option<String> = _serde::__private::None;
                            let mut __field1: _serde::__private::Option<u64> = _serde::__private::None;
                            let mut __field2: _serde::__private::Option<u64> = _serde::__private::None;
                            while let _serde::__private::Some(__key) = _serde::de::MapAccess::next_key::<
                                __Field,
                            >(&mut __map)? {
                                match __key {
                                    __Field::__field0 => {
                                        if _serde::__private::Option::is_some(&__field0) {
                                            return _serde::__private::Err(
                                                <__A::Error as _serde::de::Error>::duplicate_field("Name"),
                                            );
                                        }
                                        __field0 = _serde::__private::Some(
                                            _serde::de::MapAccess::next_value::<String>(&mut __map)?,
                                        );
                                    }
                                    __Field::__field1 => {
                                        if _serde::__private::Option::is_some(&__field1) {
                                            return _serde::__private::Err(
                                                <__A::Error as _serde::de::Error>::duplicate_field("Soft"),
                                            );
                                        }
                                        __field1 = _serde::__private::Some(
                                            _serde::de::MapAccess::next_value::<u64>(&mut __map)?,
                                        );
                                    }
                                    __Field::__field2 => {
                                        if _serde::__private::Option::is_some(&__field2) {
                                            return _serde::__private::Err(
                                                <__A::Error as _serde::de::Error>::duplicate_field("Hard"),
                                            );
                                        }
                                        __field2 = _serde::__private::Some(
                                            _serde::de::MapAccess::next_value::<u64>(&mut __map)?,
                                        );
                                    }
                                    _ => {
                                        let _ = _serde::de::MapAccess::next_value::<
                                            _serde::de::IgnoredAny,
                                        >(&mut __map)?;
                                    }
                                }
                            }
                            let __field0 = match __field0 {
                                _serde::__private::Some(__field0) => __field0,
                                _serde::__private::None => {
                                    _serde::__private::de::missing_field("Name")?
                                }
                            };
                            let __field1 = match __field1 {
                                _serde::__private::Some(__field1) => __field1,
                                _serde::__private::None => {
                                    _serde::__private::de::missing_field("Soft")?
                                }
                            };
                            let __field2 = match __field2 {
                                _serde::__private::Some(__field2) => __field2,
                                _serde::__private::None => {
                                    _serde::__private::de::missing_field("Hard")?
                                }
                            };
                            _serde::__private::Ok(Ulimit {
                                name: __field0,
                                soft: __field1,
                                hard: __field2,
                            })
                        }
                    }
                    #[doc(hidden)]
                    const FIELDS: &'static [&'static str] = &["Name", "Soft", "Hard"];
                    _serde::Deserializer::deserialize_struct(
                        __deserializer,
                        "Ulimit",
                        FIELDS,
                        __Visitor {
                            marker: _serde::__private::PhantomData::<Ulimit>,
                            lifetime: _serde::__private::PhantomData,
                        },
                    )
                }
            }
        };
        #[serde(rename_all = "PascalCase")]
        pub struct DeviceMapping {
            pub path_on_host: String,
            pub path_in_container: String,
            pub cgroup_permissions: String,
        }
        #[automatically_derived]
        impl ::core::clone::Clone for DeviceMapping {
            #[inline]
            fn clone(&self) -> DeviceMapping {
                DeviceMapping {
                    path_on_host: ::core::clone::Clone::clone(&self.path_on_host),
                    path_in_container: ::core::clone::Clone::clone(
                        &self.path_in_container,
                    ),
                    cgroup_permissions: ::core::clone::Clone::clone(
                        &self.cgroup_permissions,
                    ),
                }
            }
        }
        #[automatically_derived]
        impl ::core::fmt::Debug for DeviceMapping {
            #[inline]
            fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                ::core::fmt::Formatter::debug_struct_field3_finish(
                    f,
                    "DeviceMapping",
                    "path_on_host",
                    &self.path_on_host,
                    "path_in_container",
                    &self.path_in_container,
                    "cgroup_permissions",
                    &&self.cgroup_permissions,
                )
            }
        }
        #[doc(hidden)]
        #[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
        const _: () = {
            #[allow(unused_extern_crates, clippy::useless_attribute)]
            extern crate serde as _serde;
            #[automatically_derived]
            impl _serde::Serialize for DeviceMapping {
                fn serialize<__S>(
                    &self,
                    __serializer: __S,
                ) -> _serde::__private::Result<__S::Ok, __S::Error>
                where
                    __S: _serde::Serializer,
                {
                    let mut __serde_state = _serde::Serializer::serialize_struct(
                        __serializer,
                        "DeviceMapping",
                        false as usize + 1 + 1 + 1,
                    )?;
                    _serde::ser::SerializeStruct::serialize_field(
                        &mut __serde_state,
                        "PathOnHost",
                        &self.path_on_host,
                    )?;
                    _serde::ser::SerializeStruct::serialize_field(
                        &mut __serde_state,
                        "PathInContainer",
                        &self.path_in_container,
                    )?;
                    _serde::ser::SerializeStruct::serialize_field(
                        &mut __serde_state,
                        "CgroupPermissions",
                        &self.cgroup_permissions,
                    )?;
                    _serde::ser::SerializeStruct::end(__serde_state)
                }
            }
        };
        #[doc(hidden)]
        #[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
        const _: () = {
            #[allow(unused_extern_crates, clippy::useless_attribute)]
            extern crate serde as _serde;
            #[automatically_derived]
            impl<'de> _serde::Deserialize<'de> for DeviceMapping {
                fn deserialize<__D>(
                    __deserializer: __D,
                ) -> _serde::__private::Result<Self, __D::Error>
                where
                    __D: _serde::Deserializer<'de>,
                {
                    #[allow(non_camel_case_types)]
                    #[doc(hidden)]
                    enum __Field {
                        __field0,
                        __field1,
                        __field2,
                        __ignore,
                    }
                    #[doc(hidden)]
                    struct __FieldVisitor;
                    impl<'de> _serde::de::Visitor<'de> for __FieldVisitor {
                        type Value = __Field;
                        fn expecting(
                            &self,
                            __formatter: &mut _serde::__private::Formatter,
                        ) -> _serde::__private::fmt::Result {
                            _serde::__private::Formatter::write_str(
                                __formatter,
                                "field identifier",
                            )
                        }
                        fn visit_u64<__E>(
                            self,
                            __value: u64,
                        ) -> _serde::__private::Result<Self::Value, __E>
                        where
                            __E: _serde::de::Error,
                        {
                            match __value {
                                0u64 => _serde::__private::Ok(__Field::__field0),
                                1u64 => _serde::__private::Ok(__Field::__field1),
                                2u64 => _serde::__private::Ok(__Field::__field2),
                                _ => _serde::__private::Ok(__Field::__ignore),
                            }
                        }
                        fn visit_str<__E>(
                            self,
                            __value: &str,
                        ) -> _serde::__private::Result<Self::Value, __E>
                        where
                            __E: _serde::de::Error,
                        {
                            match __value {
                                "PathOnHost" => _serde::__private::Ok(__Field::__field0),
                                "PathInContainer" => {
                                    _serde::__private::Ok(__Field::__field1)
                                }
                                "CgroupPermissions" => {
                                    _serde::__private::Ok(__Field::__field2)
                                }
                                _ => _serde::__private::Ok(__Field::__ignore),
                            }
                        }
                        fn visit_bytes<__E>(
                            self,
                            __value: &[u8],
                        ) -> _serde::__private::Result<Self::Value, __E>
                        where
                            __E: _serde::de::Error,
                        {
                            match __value {
                                b"PathOnHost" => _serde::__private::Ok(__Field::__field0),
                                b"PathInContainer" => {
                                    _serde::__private::Ok(__Field::__field1)
                                }
                                b"CgroupPermissions" => {
                                    _serde::__private::Ok(__Field::__field2)
                                }
                                _ => _serde::__private::Ok(__Field::__ignore),
                            }
                        }
                    }
                    impl<'de> _serde::Deserialize<'de> for __Field {
                        #[inline]
                        fn deserialize<__D>(
                            __deserializer: __D,
                        ) -> _serde::__private::Result<Self, __D::Error>
                        where
                            __D: _serde::Deserializer<'de>,
                        {
                            _serde::Deserializer::deserialize_identifier(
                                __deserializer,
                                __FieldVisitor,
                            )
                        }
                    }
                    #[doc(hidden)]
                    struct __Visitor<'de> {
                        marker: _serde::__private::PhantomData<DeviceMapping>,
                        lifetime: _serde::__private::PhantomData<&'de ()>,
                    }
                    impl<'de> _serde::de::Visitor<'de> for __Visitor<'de> {
                        type Value = DeviceMapping;
                        fn expecting(
                            &self,
                            __formatter: &mut _serde::__private::Formatter,
                        ) -> _serde::__private::fmt::Result {
                            _serde::__private::Formatter::write_str(
                                __formatter,
                                "struct DeviceMapping",
                            )
                        }
                        #[inline]
                        fn visit_seq<__A>(
                            self,
                            mut __seq: __A,
                        ) -> _serde::__private::Result<Self::Value, __A::Error>
                        where
                            __A: _serde::de::SeqAccess<'de>,
                        {
                            let __field0 = match _serde::de::SeqAccess::next_element::<
                                String,
                            >(&mut __seq)? {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            0usize,
                                            &"struct DeviceMapping with 3 elements",
                                        ),
                                    );
                                }
                            };
                            let __field1 = match _serde::de::SeqAccess::next_element::<
                                String,
                            >(&mut __seq)? {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            1usize,
                                            &"struct DeviceMapping with 3 elements",
                                        ),
                                    );
                                }
                            };
                            let __field2 = match _serde::de::SeqAccess::next_element::<
                                String,
                            >(&mut __seq)? {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            2usize,
                                            &"struct DeviceMapping with 3 elements",
                                        ),
                                    );
                                }
                            };
                            _serde::__private::Ok(DeviceMapping {
                                path_on_host: __field0,
                                path_in_container: __field1,
                                cgroup_permissions: __field2,
                            })
                        }
                        #[inline]
                        fn visit_map<__A>(
                            self,
                            mut __map: __A,
                        ) -> _serde::__private::Result<Self::Value, __A::Error>
                        where
                            __A: _serde::de::MapAccess<'de>,
                        {
                            let mut __field0: _serde::__private::Option<String> = _serde::__private::None;
                            let mut __field1: _serde::__private::Option<String> = _serde::__private::None;
                            let mut __field2: _serde::__private::Option<String> = _serde::__private::None;
                            while let _serde::__private::Some(__key) = _serde::de::MapAccess::next_key::<
                                __Field,
                            >(&mut __map)? {
                                match __key {
                                    __Field::__field0 => {
                                        if _serde::__private::Option::is_some(&__field0) {
                                            return _serde::__private::Err(
                                                <__A::Error as _serde::de::Error>::duplicate_field(
                                                    "PathOnHost",
                                                ),
                                            );
                                        }
                                        __field0 = _serde::__private::Some(
                                            _serde::de::MapAccess::next_value::<String>(&mut __map)?,
                                        );
                                    }
                                    __Field::__field1 => {
                                        if _serde::__private::Option::is_some(&__field1) {
                                            return _serde::__private::Err(
                                                <__A::Error as _serde::de::Error>::duplicate_field(
                                                    "PathInContainer",
                                                ),
                                            );
                                        }
                                        __field1 = _serde::__private::Some(
                                            _serde::de::MapAccess::next_value::<String>(&mut __map)?,
                                        );
                                    }
                                    __Field::__field2 => {
                                        if _serde::__private::Option::is_some(&__field2) {
                                            return _serde::__private::Err(
                                                <__A::Error as _serde::de::Error>::duplicate_field(
                                                    "CgroupPermissions",
                                                ),
                                            );
                                        }
                                        __field2 = _serde::__private::Some(
                                            _serde::de::MapAccess::next_value::<String>(&mut __map)?,
                                        );
                                    }
                                    _ => {
                                        let _ = _serde::de::MapAccess::next_value::<
                                            _serde::de::IgnoredAny,
                                        >(&mut __map)?;
                                    }
                                }
                            }
                            let __field0 = match __field0 {
                                _serde::__private::Some(__field0) => __field0,
                                _serde::__private::None => {
                                    _serde::__private::de::missing_field("PathOnHost")?
                                }
                            };
                            let __field1 = match __field1 {
                                _serde::__private::Some(__field1) => __field1,
                                _serde::__private::None => {
                                    _serde::__private::de::missing_field("PathInContainer")?
                                }
                            };
                            let __field2 = match __field2 {
                                _serde::__private::Some(__field2) => __field2,
                                _serde::__private::None => {
                                    _serde::__private::de::missing_field("CgroupPermissions")?
                                }
                            };
                            _serde::__private::Ok(DeviceMapping {
                                path_on_host: __field0,
                                path_in_container: __field1,
                                cgroup_permissions: __field2,
                            })
                        }
                    }
                    #[doc(hidden)]
                    const FIELDS: &'static [&'static str] = &[
                        "PathOnHost",
                        "PathInContainer",
                        "CgroupPermissions",
                    ];
                    _serde::Deserializer::deserialize_struct(
                        __deserializer,
                        "DeviceMapping",
                        FIELDS,
                        __Visitor {
                            marker: _serde::__private::PhantomData::<DeviceMapping>,
                            lifetime: _serde::__private::PhantomData,
                        },
                    )
                }
            }
        };
        #[serde(rename_all = "PascalCase")]
        pub struct DeviceRequest {
            pub driver: String,
            pub count: u64,
            #[serde(rename = "DeviceIDs")]
            pub device_ids: Vec<String>,
            pub capabilities: Vec<String>,
            pub options: Option<serde_json::Value>,
        }
        #[automatically_derived]
        impl ::core::clone::Clone for DeviceRequest {
            #[inline]
            fn clone(&self) -> DeviceRequest {
                DeviceRequest {
                    driver: ::core::clone::Clone::clone(&self.driver),
                    count: ::core::clone::Clone::clone(&self.count),
                    device_ids: ::core::clone::Clone::clone(&self.device_ids),
                    capabilities: ::core::clone::Clone::clone(&self.capabilities),
                    options: ::core::clone::Clone::clone(&self.options),
                }
            }
        }
        #[automatically_derived]
        impl ::core::fmt::Debug for DeviceRequest {
            #[inline]
            fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                ::core::fmt::Formatter::debug_struct_field5_finish(
                    f,
                    "DeviceRequest",
                    "driver",
                    &self.driver,
                    "count",
                    &self.count,
                    "device_ids",
                    &self.device_ids,
                    "capabilities",
                    &self.capabilities,
                    "options",
                    &&self.options,
                )
            }
        }
        #[doc(hidden)]
        #[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
        const _: () = {
            #[allow(unused_extern_crates, clippy::useless_attribute)]
            extern crate serde as _serde;
            #[automatically_derived]
            impl _serde::Serialize for DeviceRequest {
                fn serialize<__S>(
                    &self,
                    __serializer: __S,
                ) -> _serde::__private::Result<__S::Ok, __S::Error>
                where
                    __S: _serde::Serializer,
                {
                    let mut __serde_state = _serde::Serializer::serialize_struct(
                        __serializer,
                        "DeviceRequest",
                        false as usize + 1 + 1 + 1 + 1 + 1,
                    )?;
                    _serde::ser::SerializeStruct::serialize_field(
                        &mut __serde_state,
                        "Driver",
                        &self.driver,
                    )?;
                    _serde::ser::SerializeStruct::serialize_field(
                        &mut __serde_state,
                        "Count",
                        &self.count,
                    )?;
                    _serde::ser::SerializeStruct::serialize_field(
                        &mut __serde_state,
                        "DeviceIDs",
                        &self.device_ids,
                    )?;
                    _serde::ser::SerializeStruct::serialize_field(
                        &mut __serde_state,
                        "Capabilities",
                        &self.capabilities,
                    )?;
                    _serde::ser::SerializeStruct::serialize_field(
                        &mut __serde_state,
                        "Options",
                        &self.options,
                    )?;
                    _serde::ser::SerializeStruct::end(__serde_state)
                }
            }
        };
        #[doc(hidden)]
        #[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
        const _: () = {
            #[allow(unused_extern_crates, clippy::useless_attribute)]
            extern crate serde as _serde;
            #[automatically_derived]
            impl<'de> _serde::Deserialize<'de> for DeviceRequest {
                fn deserialize<__D>(
                    __deserializer: __D,
                ) -> _serde::__private::Result<Self, __D::Error>
                where
                    __D: _serde::Deserializer<'de>,
                {
                    #[allow(non_camel_case_types)]
                    #[doc(hidden)]
                    enum __Field {
                        __field0,
                        __field1,
                        __field2,
                        __field3,
                        __field4,
                        __ignore,
                    }
                    #[doc(hidden)]
                    struct __FieldVisitor;
                    impl<'de> _serde::de::Visitor<'de> for __FieldVisitor {
                        type Value = __Field;
                        fn expecting(
                            &self,
                            __formatter: &mut _serde::__private::Formatter,
                        ) -> _serde::__private::fmt::Result {
                            _serde::__private::Formatter::write_str(
                                __formatter,
                                "field identifier",
                            )
                        }
                        fn visit_u64<__E>(
                            self,
                            __value: u64,
                        ) -> _serde::__private::Result<Self::Value, __E>
                        where
                            __E: _serde::de::Error,
                        {
                            match __value {
                                0u64 => _serde::__private::Ok(__Field::__field0),
                                1u64 => _serde::__private::Ok(__Field::__field1),
                                2u64 => _serde::__private::Ok(__Field::__field2),
                                3u64 => _serde::__private::Ok(__Field::__field3),
                                4u64 => _serde::__private::Ok(__Field::__field4),
                                _ => _serde::__private::Ok(__Field::__ignore),
                            }
                        }
                        fn visit_str<__E>(
                            self,
                            __value: &str,
                        ) -> _serde::__private::Result<Self::Value, __E>
                        where
                            __E: _serde::de::Error,
                        {
                            match __value {
                                "Driver" => _serde::__private::Ok(__Field::__field0),
                                "Count" => _serde::__private::Ok(__Field::__field1),
                                "DeviceIDs" => _serde::__private::Ok(__Field::__field2),
                                "Capabilities" => _serde::__private::Ok(__Field::__field3),
                                "Options" => _serde::__private::Ok(__Field::__field4),
                                _ => _serde::__private::Ok(__Field::__ignore),
                            }
                        }
                        fn visit_bytes<__E>(
                            self,
                            __value: &[u8],
                        ) -> _serde::__private::Result<Self::Value, __E>
                        where
                            __E: _serde::de::Error,
                        {
                            match __value {
                                b"Driver" => _serde::__private::Ok(__Field::__field0),
                                b"Count" => _serde::__private::Ok(__Field::__field1),
                                b"DeviceIDs" => _serde::__private::Ok(__Field::__field2),
                                b"Capabilities" => _serde::__private::Ok(__Field::__field3),
                                b"Options" => _serde::__private::Ok(__Field::__field4),
                                _ => _serde::__private::Ok(__Field::__ignore),
                            }
                        }
                    }
                    impl<'de> _serde::Deserialize<'de> for __Field {
                        #[inline]
                        fn deserialize<__D>(
                            __deserializer: __D,
                        ) -> _serde::__private::Result<Self, __D::Error>
                        where
                            __D: _serde::Deserializer<'de>,
                        {
                            _serde::Deserializer::deserialize_identifier(
                                __deserializer,
                                __FieldVisitor,
                            )
                        }
                    }
                    #[doc(hidden)]
                    struct __Visitor<'de> {
                        marker: _serde::__private::PhantomData<DeviceRequest>,
                        lifetime: _serde::__private::PhantomData<&'de ()>,
                    }
                    impl<'de> _serde::de::Visitor<'de> for __Visitor<'de> {
                        type Value = DeviceRequest;
                        fn expecting(
                            &self,
                            __formatter: &mut _serde::__private::Formatter,
                        ) -> _serde::__private::fmt::Result {
                            _serde::__private::Formatter::write_str(
                                __formatter,
                                "struct DeviceRequest",
                            )
                        }
                        #[inline]
                        fn visit_seq<__A>(
                            self,
                            mut __seq: __A,
                        ) -> _serde::__private::Result<Self::Value, __A::Error>
                        where
                            __A: _serde::de::SeqAccess<'de>,
                        {
                            let __field0 = match _serde::de::SeqAccess::next_element::<
                                String,
                            >(&mut __seq)? {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            0usize,
                                            &"struct DeviceRequest with 5 elements",
                                        ),
                                    );
                                }
                            };
                            let __field1 = match _serde::de::SeqAccess::next_element::<
                                u64,
                            >(&mut __seq)? {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            1usize,
                                            &"struct DeviceRequest with 5 elements",
                                        ),
                                    );
                                }
                            };
                            let __field2 = match _serde::de::SeqAccess::next_element::<
                                Vec<String>,
                            >(&mut __seq)? {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            2usize,
                                            &"struct DeviceRequest with 5 elements",
                                        ),
                                    );
                                }
                            };
                            let __field3 = match _serde::de::SeqAccess::next_element::<
                                Vec<String>,
                            >(&mut __seq)? {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            3usize,
                                            &"struct DeviceRequest with 5 elements",
                                        ),
                                    );
                                }
                            };
                            let __field4 = match _serde::de::SeqAccess::next_element::<
                                Option<serde_json::Value>,
                            >(&mut __seq)? {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            4usize,
                                            &"struct DeviceRequest with 5 elements",
                                        ),
                                    );
                                }
                            };
                            _serde::__private::Ok(DeviceRequest {
                                driver: __field0,
                                count: __field1,
                                device_ids: __field2,
                                capabilities: __field3,
                                options: __field4,
                            })
                        }
                        #[inline]
                        fn visit_map<__A>(
                            self,
                            mut __map: __A,
                        ) -> _serde::__private::Result<Self::Value, __A::Error>
                        where
                            __A: _serde::de::MapAccess<'de>,
                        {
                            let mut __field0: _serde::__private::Option<String> = _serde::__private::None;
                            let mut __field1: _serde::__private::Option<u64> = _serde::__private::None;
                            let mut __field2: _serde::__private::Option<Vec<String>> = _serde::__private::None;
                            let mut __field3: _serde::__private::Option<Vec<String>> = _serde::__private::None;
                            let mut __field4: _serde::__private::Option<
                                Option<serde_json::Value>,
                            > = _serde::__private::None;
                            while let _serde::__private::Some(__key) = _serde::de::MapAccess::next_key::<
                                __Field,
                            >(&mut __map)? {
                                match __key {
                                    __Field::__field0 => {
                                        if _serde::__private::Option::is_some(&__field0) {
                                            return _serde::__private::Err(
                                                <__A::Error as _serde::de::Error>::duplicate_field("Driver"),
                                            );
                                        }
                                        __field0 = _serde::__private::Some(
                                            _serde::de::MapAccess::next_value::<String>(&mut __map)?,
                                        );
                                    }
                                    __Field::__field1 => {
                                        if _serde::__private::Option::is_some(&__field1) {
                                            return _serde::__private::Err(
                                                <__A::Error as _serde::de::Error>::duplicate_field("Count"),
                                            );
                                        }
                                        __field1 = _serde::__private::Some(
                                            _serde::de::MapAccess::next_value::<u64>(&mut __map)?,
                                        );
                                    }
                                    __Field::__field2 => {
                                        if _serde::__private::Option::is_some(&__field2) {
                                            return _serde::__private::Err(
                                                <__A::Error as _serde::de::Error>::duplicate_field(
                                                    "DeviceIDs",
                                                ),
                                            );
                                        }
                                        __field2 = _serde::__private::Some(
                                            _serde::de::MapAccess::next_value::<
                                                Vec<String>,
                                            >(&mut __map)?,
                                        );
                                    }
                                    __Field::__field3 => {
                                        if _serde::__private::Option::is_some(&__field3) {
                                            return _serde::__private::Err(
                                                <__A::Error as _serde::de::Error>::duplicate_field(
                                                    "Capabilities",
                                                ),
                                            );
                                        }
                                        __field3 = _serde::__private::Some(
                                            _serde::de::MapAccess::next_value::<
                                                Vec<String>,
                                            >(&mut __map)?,
                                        );
                                    }
                                    __Field::__field4 => {
                                        if _serde::__private::Option::is_some(&__field4) {
                                            return _serde::__private::Err(
                                                <__A::Error as _serde::de::Error>::duplicate_field(
                                                    "Options",
                                                ),
                                            );
                                        }
                                        __field4 = _serde::__private::Some(
                                            _serde::de::MapAccess::next_value::<
                                                Option<serde_json::Value>,
                                            >(&mut __map)?,
                                        );
                                    }
                                    _ => {
                                        let _ = _serde::de::MapAccess::next_value::<
                                            _serde::de::IgnoredAny,
                                        >(&mut __map)?;
                                    }
                                }
                            }
                            let __field0 = match __field0 {
                                _serde::__private::Some(__field0) => __field0,
                                _serde::__private::None => {
                                    _serde::__private::de::missing_field("Driver")?
                                }
                            };
                            let __field1 = match __field1 {
                                _serde::__private::Some(__field1) => __field1,
                                _serde::__private::None => {
                                    _serde::__private::de::missing_field("Count")?
                                }
                            };
                            let __field2 = match __field2 {
                                _serde::__private::Some(__field2) => __field2,
                                _serde::__private::None => {
                                    _serde::__private::de::missing_field("DeviceIDs")?
                                }
                            };
                            let __field3 = match __field3 {
                                _serde::__private::Some(__field3) => __field3,
                                _serde::__private::None => {
                                    _serde::__private::de::missing_field("Capabilities")?
                                }
                            };
                            let __field4 = match __field4 {
                                _serde::__private::Some(__field4) => __field4,
                                _serde::__private::None => {
                                    _serde::__private::de::missing_field("Options")?
                                }
                            };
                            _serde::__private::Ok(DeviceRequest {
                                driver: __field0,
                                count: __field1,
                                device_ids: __field2,
                                capabilities: __field3,
                                options: __field4,
                            })
                        }
                    }
                    #[doc(hidden)]
                    const FIELDS: &'static [&'static str] = &[
                        "Driver",
                        "Count",
                        "DeviceIDs",
                        "Capabilities",
                        "Options",
                    ];
                    _serde::Deserializer::deserialize_struct(
                        __deserializer,
                        "DeviceRequest",
                        FIELDS,
                        __Visitor {
                            marker: _serde::__private::PhantomData::<DeviceRequest>,
                            lifetime: _serde::__private::PhantomData,
                        },
                    )
                }
            }
        };
        #[serde(rename_all = "PascalCase")]
        pub struct Port {
            pub ip: String,
            pub private_port: u64,
            pub public_port: u64,
            #[serde(rename = "Type")]
            pub typ: String,
        }
        #[automatically_derived]
        impl ::core::clone::Clone for Port {
            #[inline]
            fn clone(&self) -> Port {
                Port {
                    ip: ::core::clone::Clone::clone(&self.ip),
                    private_port: ::core::clone::Clone::clone(&self.private_port),
                    public_port: ::core::clone::Clone::clone(&self.public_port),
                    typ: ::core::clone::Clone::clone(&self.typ),
                }
            }
        }
        #[automatically_derived]
        impl ::core::fmt::Debug for Port {
            #[inline]
            fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                ::core::fmt::Formatter::debug_struct_field4_finish(
                    f,
                    "Port",
                    "ip",
                    &self.ip,
                    "private_port",
                    &self.private_port,
                    "public_port",
                    &self.public_port,
                    "typ",
                    &&self.typ,
                )
            }
        }
        #[doc(hidden)]
        #[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
        const _: () = {
            #[allow(unused_extern_crates, clippy::useless_attribute)]
            extern crate serde as _serde;
            #[automatically_derived]
            impl _serde::Serialize for Port {
                fn serialize<__S>(
                    &self,
                    __serializer: __S,
                ) -> _serde::__private::Result<__S::Ok, __S::Error>
                where
                    __S: _serde::Serializer,
                {
                    let mut __serde_state = _serde::Serializer::serialize_struct(
                        __serializer,
                        "Port",
                        false as usize + 1 + 1 + 1 + 1,
                    )?;
                    _serde::ser::SerializeStruct::serialize_field(
                        &mut __serde_state,
                        "Ip",
                        &self.ip,
                    )?;
                    _serde::ser::SerializeStruct::serialize_field(
                        &mut __serde_state,
                        "PrivatePort",
                        &self.private_port,
                    )?;
                    _serde::ser::SerializeStruct::serialize_field(
                        &mut __serde_state,
                        "PublicPort",
                        &self.public_port,
                    )?;
                    _serde::ser::SerializeStruct::serialize_field(
                        &mut __serde_state,
                        "Type",
                        &self.typ,
                    )?;
                    _serde::ser::SerializeStruct::end(__serde_state)
                }
            }
        };
        #[doc(hidden)]
        #[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
        const _: () = {
            #[allow(unused_extern_crates, clippy::useless_attribute)]
            extern crate serde as _serde;
            #[automatically_derived]
            impl<'de> _serde::Deserialize<'de> for Port {
                fn deserialize<__D>(
                    __deserializer: __D,
                ) -> _serde::__private::Result<Self, __D::Error>
                where
                    __D: _serde::Deserializer<'de>,
                {
                    #[allow(non_camel_case_types)]
                    #[doc(hidden)]
                    enum __Field {
                        __field0,
                        __field1,
                        __field2,
                        __field3,
                        __ignore,
                    }
                    #[doc(hidden)]
                    struct __FieldVisitor;
                    impl<'de> _serde::de::Visitor<'de> for __FieldVisitor {
                        type Value = __Field;
                        fn expecting(
                            &self,
                            __formatter: &mut _serde::__private::Formatter,
                        ) -> _serde::__private::fmt::Result {
                            _serde::__private::Formatter::write_str(
                                __formatter,
                                "field identifier",
                            )
                        }
                        fn visit_u64<__E>(
                            self,
                            __value: u64,
                        ) -> _serde::__private::Result<Self::Value, __E>
                        where
                            __E: _serde::de::Error,
                        {
                            match __value {
                                0u64 => _serde::__private::Ok(__Field::__field0),
                                1u64 => _serde::__private::Ok(__Field::__field1),
                                2u64 => _serde::__private::Ok(__Field::__field2),
                                3u64 => _serde::__private::Ok(__Field::__field3),
                                _ => _serde::__private::Ok(__Field::__ignore),
                            }
                        }
                        fn visit_str<__E>(
                            self,
                            __value: &str,
                        ) -> _serde::__private::Result<Self::Value, __E>
                        where
                            __E: _serde::de::Error,
                        {
                            match __value {
                                "Ip" => _serde::__private::Ok(__Field::__field0),
                                "PrivatePort" => _serde::__private::Ok(__Field::__field1),
                                "PublicPort" => _serde::__private::Ok(__Field::__field2),
                                "Type" => _serde::__private::Ok(__Field::__field3),
                                _ => _serde::__private::Ok(__Field::__ignore),
                            }
                        }
                        fn visit_bytes<__E>(
                            self,
                            __value: &[u8],
                        ) -> _serde::__private::Result<Self::Value, __E>
                        where
                            __E: _serde::de::Error,
                        {
                            match __value {
                                b"Ip" => _serde::__private::Ok(__Field::__field0),
                                b"PrivatePort" => _serde::__private::Ok(__Field::__field1),
                                b"PublicPort" => _serde::__private::Ok(__Field::__field2),
                                b"Type" => _serde::__private::Ok(__Field::__field3),
                                _ => _serde::__private::Ok(__Field::__ignore),
                            }
                        }
                    }
                    impl<'de> _serde::Deserialize<'de> for __Field {
                        #[inline]
                        fn deserialize<__D>(
                            __deserializer: __D,
                        ) -> _serde::__private::Result<Self, __D::Error>
                        where
                            __D: _serde::Deserializer<'de>,
                        {
                            _serde::Deserializer::deserialize_identifier(
                                __deserializer,
                                __FieldVisitor,
                            )
                        }
                    }
                    #[doc(hidden)]
                    struct __Visitor<'de> {
                        marker: _serde::__private::PhantomData<Port>,
                        lifetime: _serde::__private::PhantomData<&'de ()>,
                    }
                    impl<'de> _serde::de::Visitor<'de> for __Visitor<'de> {
                        type Value = Port;
                        fn expecting(
                            &self,
                            __formatter: &mut _serde::__private::Formatter,
                        ) -> _serde::__private::fmt::Result {
                            _serde::__private::Formatter::write_str(
                                __formatter,
                                "struct Port",
                            )
                        }
                        #[inline]
                        fn visit_seq<__A>(
                            self,
                            mut __seq: __A,
                        ) -> _serde::__private::Result<Self::Value, __A::Error>
                        where
                            __A: _serde::de::SeqAccess<'de>,
                        {
                            let __field0 = match _serde::de::SeqAccess::next_element::<
                                String,
                            >(&mut __seq)? {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            0usize,
                                            &"struct Port with 4 elements",
                                        ),
                                    );
                                }
                            };
                            let __field1 = match _serde::de::SeqAccess::next_element::<
                                u64,
                            >(&mut __seq)? {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            1usize,
                                            &"struct Port with 4 elements",
                                        ),
                                    );
                                }
                            };
                            let __field2 = match _serde::de::SeqAccess::next_element::<
                                u64,
                            >(&mut __seq)? {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            2usize,
                                            &"struct Port with 4 elements",
                                        ),
                                    );
                                }
                            };
                            let __field3 = match _serde::de::SeqAccess::next_element::<
                                String,
                            >(&mut __seq)? {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            3usize,
                                            &"struct Port with 4 elements",
                                        ),
                                    );
                                }
                            };
                            _serde::__private::Ok(Port {
                                ip: __field0,
                                private_port: __field1,
                                public_port: __field2,
                                typ: __field3,
                            })
                        }
                        #[inline]
                        fn visit_map<__A>(
                            self,
                            mut __map: __A,
                        ) -> _serde::__private::Result<Self::Value, __A::Error>
                        where
                            __A: _serde::de::MapAccess<'de>,
                        {
                            let mut __field0: _serde::__private::Option<String> = _serde::__private::None;
                            let mut __field1: _serde::__private::Option<u64> = _serde::__private::None;
                            let mut __field2: _serde::__private::Option<u64> = _serde::__private::None;
                            let mut __field3: _serde::__private::Option<String> = _serde::__private::None;
                            while let _serde::__private::Some(__key) = _serde::de::MapAccess::next_key::<
                                __Field,
                            >(&mut __map)? {
                                match __key {
                                    __Field::__field0 => {
                                        if _serde::__private::Option::is_some(&__field0) {
                                            return _serde::__private::Err(
                                                <__A::Error as _serde::de::Error>::duplicate_field("Ip"),
                                            );
                                        }
                                        __field0 = _serde::__private::Some(
                                            _serde::de::MapAccess::next_value::<String>(&mut __map)?,
                                        );
                                    }
                                    __Field::__field1 => {
                                        if _serde::__private::Option::is_some(&__field1) {
                                            return _serde::__private::Err(
                                                <__A::Error as _serde::de::Error>::duplicate_field(
                                                    "PrivatePort",
                                                ),
                                            );
                                        }
                                        __field1 = _serde::__private::Some(
                                            _serde::de::MapAccess::next_value::<u64>(&mut __map)?,
                                        );
                                    }
                                    __Field::__field2 => {
                                        if _serde::__private::Option::is_some(&__field2) {
                                            return _serde::__private::Err(
                                                <__A::Error as _serde::de::Error>::duplicate_field(
                                                    "PublicPort",
                                                ),
                                            );
                                        }
                                        __field2 = _serde::__private::Some(
                                            _serde::de::MapAccess::next_value::<u64>(&mut __map)?,
                                        );
                                    }
                                    __Field::__field3 => {
                                        if _serde::__private::Option::is_some(&__field3) {
                                            return _serde::__private::Err(
                                                <__A::Error as _serde::de::Error>::duplicate_field("Type"),
                                            );
                                        }
                                        __field3 = _serde::__private::Some(
                                            _serde::de::MapAccess::next_value::<String>(&mut __map)?,
                                        );
                                    }
                                    _ => {
                                        let _ = _serde::de::MapAccess::next_value::<
                                            _serde::de::IgnoredAny,
                                        >(&mut __map)?;
                                    }
                                }
                            }
                            let __field0 = match __field0 {
                                _serde::__private::Some(__field0) => __field0,
                                _serde::__private::None => {
                                    _serde::__private::de::missing_field("Ip")?
                                }
                            };
                            let __field1 = match __field1 {
                                _serde::__private::Some(__field1) => __field1,
                                _serde::__private::None => {
                                    _serde::__private::de::missing_field("PrivatePort")?
                                }
                            };
                            let __field2 = match __field2 {
                                _serde::__private::Some(__field2) => __field2,
                                _serde::__private::None => {
                                    _serde::__private::de::missing_field("PublicPort")?
                                }
                            };
                            let __field3 = match __field3 {
                                _serde::__private::Some(__field3) => __field3,
                                _serde::__private::None => {
                                    _serde::__private::de::missing_field("Type")?
                                }
                            };
                            _serde::__private::Ok(Port {
                                ip: __field0,
                                private_port: __field1,
                                public_port: __field2,
                                typ: __field3,
                            })
                        }
                    }
                    #[doc(hidden)]
                    const FIELDS: &'static [&'static str] = &[
                        "Ip",
                        "PrivatePort",
                        "PublicPort",
                        "Type",
                    ];
                    _serde::Deserializer::deserialize_struct(
                        __deserializer,
                        "Port",
                        FIELDS,
                        __Visitor {
                            marker: _serde::__private::PhantomData::<Port>,
                            lifetime: _serde::__private::PhantomData,
                        },
                    )
                }
            }
        };
        pub struct Stats {
            pub read: String,
            pub networks: HashMap<String, NetworkStats>,
            pub memory_stats: MemoryStats,
            pub blkio_stats: BlkioStats,
            pub cpu_stats: CpuStats,
        }
        #[automatically_derived]
        impl ::core::clone::Clone for Stats {
            #[inline]
            fn clone(&self) -> Stats {
                Stats {
                    read: ::core::clone::Clone::clone(&self.read),
                    networks: ::core::clone::Clone::clone(&self.networks),
                    memory_stats: ::core::clone::Clone::clone(&self.memory_stats),
                    blkio_stats: ::core::clone::Clone::clone(&self.blkio_stats),
                    cpu_stats: ::core::clone::Clone::clone(&self.cpu_stats),
                }
            }
        }
        #[automatically_derived]
        impl ::core::fmt::Debug for Stats {
            #[inline]
            fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                ::core::fmt::Formatter::debug_struct_field5_finish(
                    f,
                    "Stats",
                    "read",
                    &self.read,
                    "networks",
                    &self.networks,
                    "memory_stats",
                    &self.memory_stats,
                    "blkio_stats",
                    &self.blkio_stats,
                    "cpu_stats",
                    &&self.cpu_stats,
                )
            }
        }
        #[doc(hidden)]
        #[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
        const _: () = {
            #[allow(unused_extern_crates, clippy::useless_attribute)]
            extern crate serde as _serde;
            #[automatically_derived]
            impl _serde::Serialize for Stats {
                fn serialize<__S>(
                    &self,
                    __serializer: __S,
                ) -> _serde::__private::Result<__S::Ok, __S::Error>
                where
                    __S: _serde::Serializer,
                {
                    let mut __serde_state = _serde::Serializer::serialize_struct(
                        __serializer,
                        "Stats",
                        false as usize + 1 + 1 + 1 + 1 + 1,
                    )?;
                    _serde::ser::SerializeStruct::serialize_field(
                        &mut __serde_state,
                        "read",
                        &self.read,
                    )?;
                    _serde::ser::SerializeStruct::serialize_field(
                        &mut __serde_state,
                        "networks",
                        &self.networks,
                    )?;
                    _serde::ser::SerializeStruct::serialize_field(
                        &mut __serde_state,
                        "memory_stats",
                        &self.memory_stats,
                    )?;
                    _serde::ser::SerializeStruct::serialize_field(
                        &mut __serde_state,
                        "blkio_stats",
                        &self.blkio_stats,
                    )?;
                    _serde::ser::SerializeStruct::serialize_field(
                        &mut __serde_state,
                        "cpu_stats",
                        &self.cpu_stats,
                    )?;
                    _serde::ser::SerializeStruct::end(__serde_state)
                }
            }
        };
        #[doc(hidden)]
        #[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
        const _: () = {
            #[allow(unused_extern_crates, clippy::useless_attribute)]
            extern crate serde as _serde;
            #[automatically_derived]
            impl<'de> _serde::Deserialize<'de> for Stats {
                fn deserialize<__D>(
                    __deserializer: __D,
                ) -> _serde::__private::Result<Self, __D::Error>
                where
                    __D: _serde::Deserializer<'de>,
                {
                    #[allow(non_camel_case_types)]
                    #[doc(hidden)]
                    enum __Field {
                        __field0,
                        __field1,
                        __field2,
                        __field3,
                        __field4,
                        __ignore,
                    }
                    #[doc(hidden)]
                    struct __FieldVisitor;
                    impl<'de> _serde::de::Visitor<'de> for __FieldVisitor {
                        type Value = __Field;
                        fn expecting(
                            &self,
                            __formatter: &mut _serde::__private::Formatter,
                        ) -> _serde::__private::fmt::Result {
                            _serde::__private::Formatter::write_str(
                                __formatter,
                                "field identifier",
                            )
                        }
                        fn visit_u64<__E>(
                            self,
                            __value: u64,
                        ) -> _serde::__private::Result<Self::Value, __E>
                        where
                            __E: _serde::de::Error,
                        {
                            match __value {
                                0u64 => _serde::__private::Ok(__Field::__field0),
                                1u64 => _serde::__private::Ok(__Field::__field1),
                                2u64 => _serde::__private::Ok(__Field::__field2),
                                3u64 => _serde::__private::Ok(__Field::__field3),
                                4u64 => _serde::__private::Ok(__Field::__field4),
                                _ => _serde::__private::Ok(__Field::__ignore),
                            }
                        }
                        fn visit_str<__E>(
                            self,
                            __value: &str,
                        ) -> _serde::__private::Result<Self::Value, __E>
                        where
                            __E: _serde::de::Error,
                        {
                            match __value {
                                "read" => _serde::__private::Ok(__Field::__field0),
                                "networks" => _serde::__private::Ok(__Field::__field1),
                                "memory_stats" => _serde::__private::Ok(__Field::__field2),
                                "blkio_stats" => _serde::__private::Ok(__Field::__field3),
                                "cpu_stats" => _serde::__private::Ok(__Field::__field4),
                                _ => _serde::__private::Ok(__Field::__ignore),
                            }
                        }
                        fn visit_bytes<__E>(
                            self,
                            __value: &[u8],
                        ) -> _serde::__private::Result<Self::Value, __E>
                        where
                            __E: _serde::de::Error,
                        {
                            match __value {
                                b"read" => _serde::__private::Ok(__Field::__field0),
                                b"networks" => _serde::__private::Ok(__Field::__field1),
                                b"memory_stats" => _serde::__private::Ok(__Field::__field2),
                                b"blkio_stats" => _serde::__private::Ok(__Field::__field3),
                                b"cpu_stats" => _serde::__private::Ok(__Field::__field4),
                                _ => _serde::__private::Ok(__Field::__ignore),
                            }
                        }
                    }
                    impl<'de> _serde::Deserialize<'de> for __Field {
                        #[inline]
                        fn deserialize<__D>(
                            __deserializer: __D,
                        ) -> _serde::__private::Result<Self, __D::Error>
                        where
                            __D: _serde::Deserializer<'de>,
                        {
                            _serde::Deserializer::deserialize_identifier(
                                __deserializer,
                                __FieldVisitor,
                            )
                        }
                    }
                    #[doc(hidden)]
                    struct __Visitor<'de> {
                        marker: _serde::__private::PhantomData<Stats>,
                        lifetime: _serde::__private::PhantomData<&'de ()>,
                    }
                    impl<'de> _serde::de::Visitor<'de> for __Visitor<'de> {
                        type Value = Stats;
                        fn expecting(
                            &self,
                            __formatter: &mut _serde::__private::Formatter,
                        ) -> _serde::__private::fmt::Result {
                            _serde::__private::Formatter::write_str(
                                __formatter,
                                "struct Stats",
                            )
                        }
                        #[inline]
                        fn visit_seq<__A>(
                            self,
                            mut __seq: __A,
                        ) -> _serde::__private::Result<Self::Value, __A::Error>
                        where
                            __A: _serde::de::SeqAccess<'de>,
                        {
                            let __field0 = match _serde::de::SeqAccess::next_element::<
                                String,
                            >(&mut __seq)? {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            0usize,
                                            &"struct Stats with 5 elements",
                                        ),
                                    );
                                }
                            };
                            let __field1 = match _serde::de::SeqAccess::next_element::<
                                HashMap<String, NetworkStats>,
                            >(&mut __seq)? {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            1usize,
                                            &"struct Stats with 5 elements",
                                        ),
                                    );
                                }
                            };
                            let __field2 = match _serde::de::SeqAccess::next_element::<
                                MemoryStats,
                            >(&mut __seq)? {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            2usize,
                                            &"struct Stats with 5 elements",
                                        ),
                                    );
                                }
                            };
                            let __field3 = match _serde::de::SeqAccess::next_element::<
                                BlkioStats,
                            >(&mut __seq)? {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            3usize,
                                            &"struct Stats with 5 elements",
                                        ),
                                    );
                                }
                            };
                            let __field4 = match _serde::de::SeqAccess::next_element::<
                                CpuStats,
                            >(&mut __seq)? {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            4usize,
                                            &"struct Stats with 5 elements",
                                        ),
                                    );
                                }
                            };
                            _serde::__private::Ok(Stats {
                                read: __field0,
                                networks: __field1,
                                memory_stats: __field2,
                                blkio_stats: __field3,
                                cpu_stats: __field4,
                            })
                        }
                        #[inline]
                        fn visit_map<__A>(
                            self,
                            mut __map: __A,
                        ) -> _serde::__private::Result<Self::Value, __A::Error>
                        where
                            __A: _serde::de::MapAccess<'de>,
                        {
                            let mut __field0: _serde::__private::Option<String> = _serde::__private::None;
                            let mut __field1: _serde::__private::Option<
                                HashMap<String, NetworkStats>,
                            > = _serde::__private::None;
                            let mut __field2: _serde::__private::Option<MemoryStats> = _serde::__private::None;
                            let mut __field3: _serde::__private::Option<BlkioStats> = _serde::__private::None;
                            let mut __field4: _serde::__private::Option<CpuStats> = _serde::__private::None;
                            while let _serde::__private::Some(__key) = _serde::de::MapAccess::next_key::<
                                __Field,
                            >(&mut __map)? {
                                match __key {
                                    __Field::__field0 => {
                                        if _serde::__private::Option::is_some(&__field0) {
                                            return _serde::__private::Err(
                                                <__A::Error as _serde::de::Error>::duplicate_field("read"),
                                            );
                                        }
                                        __field0 = _serde::__private::Some(
                                            _serde::de::MapAccess::next_value::<String>(&mut __map)?,
                                        );
                                    }
                                    __Field::__field1 => {
                                        if _serde::__private::Option::is_some(&__field1) {
                                            return _serde::__private::Err(
                                                <__A::Error as _serde::de::Error>::duplicate_field(
                                                    "networks",
                                                ),
                                            );
                                        }
                                        __field1 = _serde::__private::Some(
                                            _serde::de::MapAccess::next_value::<
                                                HashMap<String, NetworkStats>,
                                            >(&mut __map)?,
                                        );
                                    }
                                    __Field::__field2 => {
                                        if _serde::__private::Option::is_some(&__field2) {
                                            return _serde::__private::Err(
                                                <__A::Error as _serde::de::Error>::duplicate_field(
                                                    "memory_stats",
                                                ),
                                            );
                                        }
                                        __field2 = _serde::__private::Some(
                                            _serde::de::MapAccess::next_value::<
                                                MemoryStats,
                                            >(&mut __map)?,
                                        );
                                    }
                                    __Field::__field3 => {
                                        if _serde::__private::Option::is_some(&__field3) {
                                            return _serde::__private::Err(
                                                <__A::Error as _serde::de::Error>::duplicate_field(
                                                    "blkio_stats",
                                                ),
                                            );
                                        }
                                        __field3 = _serde::__private::Some(
                                            _serde::de::MapAccess::next_value::<BlkioStats>(&mut __map)?,
                                        );
                                    }
                                    __Field::__field4 => {
                                        if _serde::__private::Option::is_some(&__field4) {
                                            return _serde::__private::Err(
                                                <__A::Error as _serde::de::Error>::duplicate_field(
                                                    "cpu_stats",
                                                ),
                                            );
                                        }
                                        __field4 = _serde::__private::Some(
                                            _serde::de::MapAccess::next_value::<CpuStats>(&mut __map)?,
                                        );
                                    }
                                    _ => {
                                        let _ = _serde::de::MapAccess::next_value::<
                                            _serde::de::IgnoredAny,
                                        >(&mut __map)?;
                                    }
                                }
                            }
                            let __field0 = match __field0 {
                                _serde::__private::Some(__field0) => __field0,
                                _serde::__private::None => {
                                    _serde::__private::de::missing_field("read")?
                                }
                            };
                            let __field1 = match __field1 {
                                _serde::__private::Some(__field1) => __field1,
                                _serde::__private::None => {
                                    _serde::__private::de::missing_field("networks")?
                                }
                            };
                            let __field2 = match __field2 {
                                _serde::__private::Some(__field2) => __field2,
                                _serde::__private::None => {
                                    _serde::__private::de::missing_field("memory_stats")?
                                }
                            };
                            let __field3 = match __field3 {
                                _serde::__private::Some(__field3) => __field3,
                                _serde::__private::None => {
                                    _serde::__private::de::missing_field("blkio_stats")?
                                }
                            };
                            let __field4 = match __field4 {
                                _serde::__private::Some(__field4) => __field4,
                                _serde::__private::None => {
                                    _serde::__private::de::missing_field("cpu_stats")?
                                }
                            };
                            _serde::__private::Ok(Stats {
                                read: __field0,
                                networks: __field1,
                                memory_stats: __field2,
                                blkio_stats: __field3,
                                cpu_stats: __field4,
                            })
                        }
                    }
                    #[doc(hidden)]
                    const FIELDS: &'static [&'static str] = &[
                        "read",
                        "networks",
                        "memory_stats",
                        "blkio_stats",
                        "cpu_stats",
                    ];
                    _serde::Deserializer::deserialize_struct(
                        __deserializer,
                        "Stats",
                        FIELDS,
                        __Visitor {
                            marker: _serde::__private::PhantomData::<Stats>,
                            lifetime: _serde::__private::PhantomData,
                        },
                    )
                }
            }
        };
        pub struct NetworkStats {
            pub rx_dropped: u64,
            pub rx_bytes: u64,
            pub rx_errors: u64,
            pub tx_packets: u64,
            pub tx_dropped: u64,
            pub rx_packets: u64,
            pub tx_errors: u64,
            pub tx_bytes: u64,
        }
        #[automatically_derived]
        impl ::core::clone::Clone for NetworkStats {
            #[inline]
            fn clone(&self) -> NetworkStats {
                NetworkStats {
                    rx_dropped: ::core::clone::Clone::clone(&self.rx_dropped),
                    rx_bytes: ::core::clone::Clone::clone(&self.rx_bytes),
                    rx_errors: ::core::clone::Clone::clone(&self.rx_errors),
                    tx_packets: ::core::clone::Clone::clone(&self.tx_packets),
                    tx_dropped: ::core::clone::Clone::clone(&self.tx_dropped),
                    rx_packets: ::core::clone::Clone::clone(&self.rx_packets),
                    tx_errors: ::core::clone::Clone::clone(&self.tx_errors),
                    tx_bytes: ::core::clone::Clone::clone(&self.tx_bytes),
                }
            }
        }
        #[automatically_derived]
        impl ::core::fmt::Debug for NetworkStats {
            #[inline]
            fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                let names: &'static _ = &[
                    "rx_dropped",
                    "rx_bytes",
                    "rx_errors",
                    "tx_packets",
                    "tx_dropped",
                    "rx_packets",
                    "tx_errors",
                    "tx_bytes",
                ];
                let values: &[&dyn ::core::fmt::Debug] = &[
                    &self.rx_dropped,
                    &self.rx_bytes,
                    &self.rx_errors,
                    &self.tx_packets,
                    &self.tx_dropped,
                    &self.rx_packets,
                    &self.tx_errors,
                    &&self.tx_bytes,
                ];
                ::core::fmt::Formatter::debug_struct_fields_finish(
                    f,
                    "NetworkStats",
                    names,
                    values,
                )
            }
        }
        #[doc(hidden)]
        #[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
        const _: () = {
            #[allow(unused_extern_crates, clippy::useless_attribute)]
            extern crate serde as _serde;
            #[automatically_derived]
            impl _serde::Serialize for NetworkStats {
                fn serialize<__S>(
                    &self,
                    __serializer: __S,
                ) -> _serde::__private::Result<__S::Ok, __S::Error>
                where
                    __S: _serde::Serializer,
                {
                    let mut __serde_state = _serde::Serializer::serialize_struct(
                        __serializer,
                        "NetworkStats",
                        false as usize + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1,
                    )?;
                    _serde::ser::SerializeStruct::serialize_field(
                        &mut __serde_state,
                        "rx_dropped",
                        &self.rx_dropped,
                    )?;
                    _serde::ser::SerializeStruct::serialize_field(
                        &mut __serde_state,
                        "rx_bytes",
                        &self.rx_bytes,
                    )?;
                    _serde::ser::SerializeStruct::serialize_field(
                        &mut __serde_state,
                        "rx_errors",
                        &self.rx_errors,
                    )?;
                    _serde::ser::SerializeStruct::serialize_field(
                        &mut __serde_state,
                        "tx_packets",
                        &self.tx_packets,
                    )?;
                    _serde::ser::SerializeStruct::serialize_field(
                        &mut __serde_state,
                        "tx_dropped",
                        &self.tx_dropped,
                    )?;
                    _serde::ser::SerializeStruct::serialize_field(
                        &mut __serde_state,
                        "rx_packets",
                        &self.rx_packets,
                    )?;
                    _serde::ser::SerializeStruct::serialize_field(
                        &mut __serde_state,
                        "tx_errors",
                        &self.tx_errors,
                    )?;
                    _serde::ser::SerializeStruct::serialize_field(
                        &mut __serde_state,
                        "tx_bytes",
                        &self.tx_bytes,
                    )?;
                    _serde::ser::SerializeStruct::end(__serde_state)
                }
            }
        };
        #[doc(hidden)]
        #[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
        const _: () = {
            #[allow(unused_extern_crates, clippy::useless_attribute)]
            extern crate serde as _serde;
            #[automatically_derived]
            impl<'de> _serde::Deserialize<'de> for NetworkStats {
                fn deserialize<__D>(
                    __deserializer: __D,
                ) -> _serde::__private::Result<Self, __D::Error>
                where
                    __D: _serde::Deserializer<'de>,
                {
                    #[allow(non_camel_case_types)]
                    #[doc(hidden)]
                    enum __Field {
                        __field0,
                        __field1,
                        __field2,
                        __field3,
                        __field4,
                        __field5,
                        __field6,
                        __field7,
                        __ignore,
                    }
                    #[doc(hidden)]
                    struct __FieldVisitor;
                    impl<'de> _serde::de::Visitor<'de> for __FieldVisitor {
                        type Value = __Field;
                        fn expecting(
                            &self,
                            __formatter: &mut _serde::__private::Formatter,
                        ) -> _serde::__private::fmt::Result {
                            _serde::__private::Formatter::write_str(
                                __formatter,
                                "field identifier",
                            )
                        }
                        fn visit_u64<__E>(
                            self,
                            __value: u64,
                        ) -> _serde::__private::Result<Self::Value, __E>
                        where
                            __E: _serde::de::Error,
                        {
                            match __value {
                                0u64 => _serde::__private::Ok(__Field::__field0),
                                1u64 => _serde::__private::Ok(__Field::__field1),
                                2u64 => _serde::__private::Ok(__Field::__field2),
                                3u64 => _serde::__private::Ok(__Field::__field3),
                                4u64 => _serde::__private::Ok(__Field::__field4),
                                5u64 => _serde::__private::Ok(__Field::__field5),
                                6u64 => _serde::__private::Ok(__Field::__field6),
                                7u64 => _serde::__private::Ok(__Field::__field7),
                                _ => _serde::__private::Ok(__Field::__ignore),
                            }
                        }
                        fn visit_str<__E>(
                            self,
                            __value: &str,
                        ) -> _serde::__private::Result<Self::Value, __E>
                        where
                            __E: _serde::de::Error,
                        {
                            match __value {
                                "rx_dropped" => _serde::__private::Ok(__Field::__field0),
                                "rx_bytes" => _serde::__private::Ok(__Field::__field1),
                                "rx_errors" => _serde::__private::Ok(__Field::__field2),
                                "tx_packets" => _serde::__private::Ok(__Field::__field3),
                                "tx_dropped" => _serde::__private::Ok(__Field::__field4),
                                "rx_packets" => _serde::__private::Ok(__Field::__field5),
                                "tx_errors" => _serde::__private::Ok(__Field::__field6),
                                "tx_bytes" => _serde::__private::Ok(__Field::__field7),
                                _ => _serde::__private::Ok(__Field::__ignore),
                            }
                        }
                        fn visit_bytes<__E>(
                            self,
                            __value: &[u8],
                        ) -> _serde::__private::Result<Self::Value, __E>
                        where
                            __E: _serde::de::Error,
                        {
                            match __value {
                                b"rx_dropped" => _serde::__private::Ok(__Field::__field0),
                                b"rx_bytes" => _serde::__private::Ok(__Field::__field1),
                                b"rx_errors" => _serde::__private::Ok(__Field::__field2),
                                b"tx_packets" => _serde::__private::Ok(__Field::__field3),
                                b"tx_dropped" => _serde::__private::Ok(__Field::__field4),
                                b"rx_packets" => _serde::__private::Ok(__Field::__field5),
                                b"tx_errors" => _serde::__private::Ok(__Field::__field6),
                                b"tx_bytes" => _serde::__private::Ok(__Field::__field7),
                                _ => _serde::__private::Ok(__Field::__ignore),
                            }
                        }
                    }
                    impl<'de> _serde::Deserialize<'de> for __Field {
                        #[inline]
                        fn deserialize<__D>(
                            __deserializer: __D,
                        ) -> _serde::__private::Result<Self, __D::Error>
                        where
                            __D: _serde::Deserializer<'de>,
                        {
                            _serde::Deserializer::deserialize_identifier(
                                __deserializer,
                                __FieldVisitor,
                            )
                        }
                    }
                    #[doc(hidden)]
                    struct __Visitor<'de> {
                        marker: _serde::__private::PhantomData<NetworkStats>,
                        lifetime: _serde::__private::PhantomData<&'de ()>,
                    }
                    impl<'de> _serde::de::Visitor<'de> for __Visitor<'de> {
                        type Value = NetworkStats;
                        fn expecting(
                            &self,
                            __formatter: &mut _serde::__private::Formatter,
                        ) -> _serde::__private::fmt::Result {
                            _serde::__private::Formatter::write_str(
                                __formatter,
                                "struct NetworkStats",
                            )
                        }
                        #[inline]
                        fn visit_seq<__A>(
                            self,
                            mut __seq: __A,
                        ) -> _serde::__private::Result<Self::Value, __A::Error>
                        where
                            __A: _serde::de::SeqAccess<'de>,
                        {
                            let __field0 = match _serde::de::SeqAccess::next_element::<
                                u64,
                            >(&mut __seq)? {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            0usize,
                                            &"struct NetworkStats with 8 elements",
                                        ),
                                    );
                                }
                            };
                            let __field1 = match _serde::de::SeqAccess::next_element::<
                                u64,
                            >(&mut __seq)? {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            1usize,
                                            &"struct NetworkStats with 8 elements",
                                        ),
                                    );
                                }
                            };
                            let __field2 = match _serde::de::SeqAccess::next_element::<
                                u64,
                            >(&mut __seq)? {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            2usize,
                                            &"struct NetworkStats with 8 elements",
                                        ),
                                    );
                                }
                            };
                            let __field3 = match _serde::de::SeqAccess::next_element::<
                                u64,
                            >(&mut __seq)? {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            3usize,
                                            &"struct NetworkStats with 8 elements",
                                        ),
                                    );
                                }
                            };
                            let __field4 = match _serde::de::SeqAccess::next_element::<
                                u64,
                            >(&mut __seq)? {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            4usize,
                                            &"struct NetworkStats with 8 elements",
                                        ),
                                    );
                                }
                            };
                            let __field5 = match _serde::de::SeqAccess::next_element::<
                                u64,
                            >(&mut __seq)? {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            5usize,
                                            &"struct NetworkStats with 8 elements",
                                        ),
                                    );
                                }
                            };
                            let __field6 = match _serde::de::SeqAccess::next_element::<
                                u64,
                            >(&mut __seq)? {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            6usize,
                                            &"struct NetworkStats with 8 elements",
                                        ),
                                    );
                                }
                            };
                            let __field7 = match _serde::de::SeqAccess::next_element::<
                                u64,
                            >(&mut __seq)? {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            7usize,
                                            &"struct NetworkStats with 8 elements",
                                        ),
                                    );
                                }
                            };
                            _serde::__private::Ok(NetworkStats {
                                rx_dropped: __field0,
                                rx_bytes: __field1,
                                rx_errors: __field2,
                                tx_packets: __field3,
                                tx_dropped: __field4,
                                rx_packets: __field5,
                                tx_errors: __field6,
                                tx_bytes: __field7,
                            })
                        }
                        #[inline]
                        fn visit_map<__A>(
                            self,
                            mut __map: __A,
                        ) -> _serde::__private::Result<Self::Value, __A::Error>
                        where
                            __A: _serde::de::MapAccess<'de>,
                        {
                            let mut __field0: _serde::__private::Option<u64> = _serde::__private::None;
                            let mut __field1: _serde::__private::Option<u64> = _serde::__private::None;
                            let mut __field2: _serde::__private::Option<u64> = _serde::__private::None;
                            let mut __field3: _serde::__private::Option<u64> = _serde::__private::None;
                            let mut __field4: _serde::__private::Option<u64> = _serde::__private::None;
                            let mut __field5: _serde::__private::Option<u64> = _serde::__private::None;
                            let mut __field6: _serde::__private::Option<u64> = _serde::__private::None;
                            let mut __field7: _serde::__private::Option<u64> = _serde::__private::None;
                            while let _serde::__private::Some(__key) = _serde::de::MapAccess::next_key::<
                                __Field,
                            >(&mut __map)? {
                                match __key {
                                    __Field::__field0 => {
                                        if _serde::__private::Option::is_some(&__field0) {
                                            return _serde::__private::Err(
                                                <__A::Error as _serde::de::Error>::duplicate_field(
                                                    "rx_dropped",
                                                ),
                                            );
                                        }
                                        __field0 = _serde::__private::Some(
                                            _serde::de::MapAccess::next_value::<u64>(&mut __map)?,
                                        );
                                    }
                                    __Field::__field1 => {
                                        if _serde::__private::Option::is_some(&__field1) {
                                            return _serde::__private::Err(
                                                <__A::Error as _serde::de::Error>::duplicate_field(
                                                    "rx_bytes",
                                                ),
                                            );
                                        }
                                        __field1 = _serde::__private::Some(
                                            _serde::de::MapAccess::next_value::<u64>(&mut __map)?,
                                        );
                                    }
                                    __Field::__field2 => {
                                        if _serde::__private::Option::is_some(&__field2) {
                                            return _serde::__private::Err(
                                                <__A::Error as _serde::de::Error>::duplicate_field(
                                                    "rx_errors",
                                                ),
                                            );
                                        }
                                        __field2 = _serde::__private::Some(
                                            _serde::de::MapAccess::next_value::<u64>(&mut __map)?,
                                        );
                                    }
                                    __Field::__field3 => {
                                        if _serde::__private::Option::is_some(&__field3) {
                                            return _serde::__private::Err(
                                                <__A::Error as _serde::de::Error>::duplicate_field(
                                                    "tx_packets",
                                                ),
                                            );
                                        }
                                        __field3 = _serde::__private::Some(
                                            _serde::de::MapAccess::next_value::<u64>(&mut __map)?,
                                        );
                                    }
                                    __Field::__field4 => {
                                        if _serde::__private::Option::is_some(&__field4) {
                                            return _serde::__private::Err(
                                                <__A::Error as _serde::de::Error>::duplicate_field(
                                                    "tx_dropped",
                                                ),
                                            );
                                        }
                                        __field4 = _serde::__private::Some(
                                            _serde::de::MapAccess::next_value::<u64>(&mut __map)?,
                                        );
                                    }
                                    __Field::__field5 => {
                                        if _serde::__private::Option::is_some(&__field5) {
                                            return _serde::__private::Err(
                                                <__A::Error as _serde::de::Error>::duplicate_field(
                                                    "rx_packets",
                                                ),
                                            );
                                        }
                                        __field5 = _serde::__private::Some(
                                            _serde::de::MapAccess::next_value::<u64>(&mut __map)?,
                                        );
                                    }
                                    __Field::__field6 => {
                                        if _serde::__private::Option::is_some(&__field6) {
                                            return _serde::__private::Err(
                                                <__A::Error as _serde::de::Error>::duplicate_field(
                                                    "tx_errors",
                                                ),
                                            );
                                        }
                                        __field6 = _serde::__private::Some(
                                            _serde::de::MapAccess::next_value::<u64>(&mut __map)?,
                                        );
                                    }
                                    __Field::__field7 => {
                                        if _serde::__private::Option::is_some(&__field7) {
                                            return _serde::__private::Err(
                                                <__A::Error as _serde::de::Error>::duplicate_field(
                                                    "tx_bytes",
                                                ),
                                            );
                                        }
                                        __field7 = _serde::__private::Some(
                                            _serde::de::MapAccess::next_value::<u64>(&mut __map)?,
                                        );
                                    }
                                    _ => {
                                        let _ = _serde::de::MapAccess::next_value::<
                                            _serde::de::IgnoredAny,
                                        >(&mut __map)?;
                                    }
                                }
                            }
                            let __field0 = match __field0 {
                                _serde::__private::Some(__field0) => __field0,
                                _serde::__private::None => {
                                    _serde::__private::de::missing_field("rx_dropped")?
                                }
                            };
                            let __field1 = match __field1 {
                                _serde::__private::Some(__field1) => __field1,
                                _serde::__private::None => {
                                    _serde::__private::de::missing_field("rx_bytes")?
                                }
                            };
                            let __field2 = match __field2 {
                                _serde::__private::Some(__field2) => __field2,
                                _serde::__private::None => {
                                    _serde::__private::de::missing_field("rx_errors")?
                                }
                            };
                            let __field3 = match __field3 {
                                _serde::__private::Some(__field3) => __field3,
                                _serde::__private::None => {
                                    _serde::__private::de::missing_field("tx_packets")?
                                }
                            };
                            let __field4 = match __field4 {
                                _serde::__private::Some(__field4) => __field4,
                                _serde::__private::None => {
                                    _serde::__private::de::missing_field("tx_dropped")?
                                }
                            };
                            let __field5 = match __field5 {
                                _serde::__private::Some(__field5) => __field5,
                                _serde::__private::None => {
                                    _serde::__private::de::missing_field("rx_packets")?
                                }
                            };
                            let __field6 = match __field6 {
                                _serde::__private::Some(__field6) => __field6,
                                _serde::__private::None => {
                                    _serde::__private::de::missing_field("tx_errors")?
                                }
                            };
                            let __field7 = match __field7 {
                                _serde::__private::Some(__field7) => __field7,
                                _serde::__private::None => {
                                    _serde::__private::de::missing_field("tx_bytes")?
                                }
                            };
                            _serde::__private::Ok(NetworkStats {
                                rx_dropped: __field0,
                                rx_bytes: __field1,
                                rx_errors: __field2,
                                tx_packets: __field3,
                                tx_dropped: __field4,
                                rx_packets: __field5,
                                tx_errors: __field6,
                                tx_bytes: __field7,
                            })
                        }
                    }
                    #[doc(hidden)]
                    const FIELDS: &'static [&'static str] = &[
                        "rx_dropped",
                        "rx_bytes",
                        "rx_errors",
                        "tx_packets",
                        "tx_dropped",
                        "rx_packets",
                        "tx_errors",
                        "tx_bytes",
                    ];
                    _serde::Deserializer::deserialize_struct(
                        __deserializer,
                        "NetworkStats",
                        FIELDS,
                        __Visitor {
                            marker: _serde::__private::PhantomData::<NetworkStats>,
                            lifetime: _serde::__private::PhantomData,
                        },
                    )
                }
            }
        };
        pub struct MemoryStats {
            pub max_usage: u64,
            pub usage: u64,
            pub failcnt: u64,
            pub limit: u64,
            pub stats: MemoryStat,
        }
        #[automatically_derived]
        impl ::core::clone::Clone for MemoryStats {
            #[inline]
            fn clone(&self) -> MemoryStats {
                MemoryStats {
                    max_usage: ::core::clone::Clone::clone(&self.max_usage),
                    usage: ::core::clone::Clone::clone(&self.usage),
                    failcnt: ::core::clone::Clone::clone(&self.failcnt),
                    limit: ::core::clone::Clone::clone(&self.limit),
                    stats: ::core::clone::Clone::clone(&self.stats),
                }
            }
        }
        #[automatically_derived]
        impl ::core::fmt::Debug for MemoryStats {
            #[inline]
            fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                ::core::fmt::Formatter::debug_struct_field5_finish(
                    f,
                    "MemoryStats",
                    "max_usage",
                    &self.max_usage,
                    "usage",
                    &self.usage,
                    "failcnt",
                    &self.failcnt,
                    "limit",
                    &self.limit,
                    "stats",
                    &&self.stats,
                )
            }
        }
        #[doc(hidden)]
        #[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
        const _: () = {
            #[allow(unused_extern_crates, clippy::useless_attribute)]
            extern crate serde as _serde;
            #[automatically_derived]
            impl _serde::Serialize for MemoryStats {
                fn serialize<__S>(
                    &self,
                    __serializer: __S,
                ) -> _serde::__private::Result<__S::Ok, __S::Error>
                where
                    __S: _serde::Serializer,
                {
                    let mut __serde_state = _serde::Serializer::serialize_struct(
                        __serializer,
                        "MemoryStats",
                        false as usize + 1 + 1 + 1 + 1 + 1,
                    )?;
                    _serde::ser::SerializeStruct::serialize_field(
                        &mut __serde_state,
                        "max_usage",
                        &self.max_usage,
                    )?;
                    _serde::ser::SerializeStruct::serialize_field(
                        &mut __serde_state,
                        "usage",
                        &self.usage,
                    )?;
                    _serde::ser::SerializeStruct::serialize_field(
                        &mut __serde_state,
                        "failcnt",
                        &self.failcnt,
                    )?;
                    _serde::ser::SerializeStruct::serialize_field(
                        &mut __serde_state,
                        "limit",
                        &self.limit,
                    )?;
                    _serde::ser::SerializeStruct::serialize_field(
                        &mut __serde_state,
                        "stats",
                        &self.stats,
                    )?;
                    _serde::ser::SerializeStruct::end(__serde_state)
                }
            }
        };
        #[doc(hidden)]
        #[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
        const _: () = {
            #[allow(unused_extern_crates, clippy::useless_attribute)]
            extern crate serde as _serde;
            #[automatically_derived]
            impl<'de> _serde::Deserialize<'de> for MemoryStats {
                fn deserialize<__D>(
                    __deserializer: __D,
                ) -> _serde::__private::Result<Self, __D::Error>
                where
                    __D: _serde::Deserializer<'de>,
                {
                    #[allow(non_camel_case_types)]
                    #[doc(hidden)]
                    enum __Field {
                        __field0,
                        __field1,
                        __field2,
                        __field3,
                        __field4,
                        __ignore,
                    }
                    #[doc(hidden)]
                    struct __FieldVisitor;
                    impl<'de> _serde::de::Visitor<'de> for __FieldVisitor {
                        type Value = __Field;
                        fn expecting(
                            &self,
                            __formatter: &mut _serde::__private::Formatter,
                        ) -> _serde::__private::fmt::Result {
                            _serde::__private::Formatter::write_str(
                                __formatter,
                                "field identifier",
                            )
                        }
                        fn visit_u64<__E>(
                            self,
                            __value: u64,
                        ) -> _serde::__private::Result<Self::Value, __E>
                        where
                            __E: _serde::de::Error,
                        {
                            match __value {
                                0u64 => _serde::__private::Ok(__Field::__field0),
                                1u64 => _serde::__private::Ok(__Field::__field1),
                                2u64 => _serde::__private::Ok(__Field::__field2),
                                3u64 => _serde::__private::Ok(__Field::__field3),
                                4u64 => _serde::__private::Ok(__Field::__field4),
                                _ => _serde::__private::Ok(__Field::__ignore),
                            }
                        }
                        fn visit_str<__E>(
                            self,
                            __value: &str,
                        ) -> _serde::__private::Result<Self::Value, __E>
                        where
                            __E: _serde::de::Error,
                        {
                            match __value {
                                "max_usage" => _serde::__private::Ok(__Field::__field0),
                                "usage" => _serde::__private::Ok(__Field::__field1),
                                "failcnt" => _serde::__private::Ok(__Field::__field2),
                                "limit" => _serde::__private::Ok(__Field::__field3),
                                "stats" => _serde::__private::Ok(__Field::__field4),
                                _ => _serde::__private::Ok(__Field::__ignore),
                            }
                        }
                        fn visit_bytes<__E>(
                            self,
                            __value: &[u8],
                        ) -> _serde::__private::Result<Self::Value, __E>
                        where
                            __E: _serde::de::Error,
                        {
                            match __value {
                                b"max_usage" => _serde::__private::Ok(__Field::__field0),
                                b"usage" => _serde::__private::Ok(__Field::__field1),
                                b"failcnt" => _serde::__private::Ok(__Field::__field2),
                                b"limit" => _serde::__private::Ok(__Field::__field3),
                                b"stats" => _serde::__private::Ok(__Field::__field4),
                                _ => _serde::__private::Ok(__Field::__ignore),
                            }
                        }
                    }
                    impl<'de> _serde::Deserialize<'de> for __Field {
                        #[inline]
                        fn deserialize<__D>(
                            __deserializer: __D,
                        ) -> _serde::__private::Result<Self, __D::Error>
                        where
                            __D: _serde::Deserializer<'de>,
                        {
                            _serde::Deserializer::deserialize_identifier(
                                __deserializer,
                                __FieldVisitor,
                            )
                        }
                    }
                    #[doc(hidden)]
                    struct __Visitor<'de> {
                        marker: _serde::__private::PhantomData<MemoryStats>,
                        lifetime: _serde::__private::PhantomData<&'de ()>,
                    }
                    impl<'de> _serde::de::Visitor<'de> for __Visitor<'de> {
                        type Value = MemoryStats;
                        fn expecting(
                            &self,
                            __formatter: &mut _serde::__private::Formatter,
                        ) -> _serde::__private::fmt::Result {
                            _serde::__private::Formatter::write_str(
                                __formatter,
                                "struct MemoryStats",
                            )
                        }
                        #[inline]
                        fn visit_seq<__A>(
                            self,
                            mut __seq: __A,
                        ) -> _serde::__private::Result<Self::Value, __A::Error>
                        where
                            __A: _serde::de::SeqAccess<'de>,
                        {
                            let __field0 = match _serde::de::SeqAccess::next_element::<
                                u64,
                            >(&mut __seq)? {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            0usize,
                                            &"struct MemoryStats with 5 elements",
                                        ),
                                    );
                                }
                            };
                            let __field1 = match _serde::de::SeqAccess::next_element::<
                                u64,
                            >(&mut __seq)? {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            1usize,
                                            &"struct MemoryStats with 5 elements",
                                        ),
                                    );
                                }
                            };
                            let __field2 = match _serde::de::SeqAccess::next_element::<
                                u64,
                            >(&mut __seq)? {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            2usize,
                                            &"struct MemoryStats with 5 elements",
                                        ),
                                    );
                                }
                            };
                            let __field3 = match _serde::de::SeqAccess::next_element::<
                                u64,
                            >(&mut __seq)? {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            3usize,
                                            &"struct MemoryStats with 5 elements",
                                        ),
                                    );
                                }
                            };
                            let __field4 = match _serde::de::SeqAccess::next_element::<
                                MemoryStat,
                            >(&mut __seq)? {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            4usize,
                                            &"struct MemoryStats with 5 elements",
                                        ),
                                    );
                                }
                            };
                            _serde::__private::Ok(MemoryStats {
                                max_usage: __field0,
                                usage: __field1,
                                failcnt: __field2,
                                limit: __field3,
                                stats: __field4,
                            })
                        }
                        #[inline]
                        fn visit_map<__A>(
                            self,
                            mut __map: __A,
                        ) -> _serde::__private::Result<Self::Value, __A::Error>
                        where
                            __A: _serde::de::MapAccess<'de>,
                        {
                            let mut __field0: _serde::__private::Option<u64> = _serde::__private::None;
                            let mut __field1: _serde::__private::Option<u64> = _serde::__private::None;
                            let mut __field2: _serde::__private::Option<u64> = _serde::__private::None;
                            let mut __field3: _serde::__private::Option<u64> = _serde::__private::None;
                            let mut __field4: _serde::__private::Option<MemoryStat> = _serde::__private::None;
                            while let _serde::__private::Some(__key) = _serde::de::MapAccess::next_key::<
                                __Field,
                            >(&mut __map)? {
                                match __key {
                                    __Field::__field0 => {
                                        if _serde::__private::Option::is_some(&__field0) {
                                            return _serde::__private::Err(
                                                <__A::Error as _serde::de::Error>::duplicate_field(
                                                    "max_usage",
                                                ),
                                            );
                                        }
                                        __field0 = _serde::__private::Some(
                                            _serde::de::MapAccess::next_value::<u64>(&mut __map)?,
                                        );
                                    }
                                    __Field::__field1 => {
                                        if _serde::__private::Option::is_some(&__field1) {
                                            return _serde::__private::Err(
                                                <__A::Error as _serde::de::Error>::duplicate_field("usage"),
                                            );
                                        }
                                        __field1 = _serde::__private::Some(
                                            _serde::de::MapAccess::next_value::<u64>(&mut __map)?,
                                        );
                                    }
                                    __Field::__field2 => {
                                        if _serde::__private::Option::is_some(&__field2) {
                                            return _serde::__private::Err(
                                                <__A::Error as _serde::de::Error>::duplicate_field(
                                                    "failcnt",
                                                ),
                                            );
                                        }
                                        __field2 = _serde::__private::Some(
                                            _serde::de::MapAccess::next_value::<u64>(&mut __map)?,
                                        );
                                    }
                                    __Field::__field3 => {
                                        if _serde::__private::Option::is_some(&__field3) {
                                            return _serde::__private::Err(
                                                <__A::Error as _serde::de::Error>::duplicate_field("limit"),
                                            );
                                        }
                                        __field3 = _serde::__private::Some(
                                            _serde::de::MapAccess::next_value::<u64>(&mut __map)?,
                                        );
                                    }
                                    __Field::__field4 => {
                                        if _serde::__private::Option::is_some(&__field4) {
                                            return _serde::__private::Err(
                                                <__A::Error as _serde::de::Error>::duplicate_field("stats"),
                                            );
                                        }
                                        __field4 = _serde::__private::Some(
                                            _serde::de::MapAccess::next_value::<MemoryStat>(&mut __map)?,
                                        );
                                    }
                                    _ => {
                                        let _ = _serde::de::MapAccess::next_value::<
                                            _serde::de::IgnoredAny,
                                        >(&mut __map)?;
                                    }
                                }
                            }
                            let __field0 = match __field0 {
                                _serde::__private::Some(__field0) => __field0,
                                _serde::__private::None => {
                                    _serde::__private::de::missing_field("max_usage")?
                                }
                            };
                            let __field1 = match __field1 {
                                _serde::__private::Some(__field1) => __field1,
                                _serde::__private::None => {
                                    _serde::__private::de::missing_field("usage")?
                                }
                            };
                            let __field2 = match __field2 {
                                _serde::__private::Some(__field2) => __field2,
                                _serde::__private::None => {
                                    _serde::__private::de::missing_field("failcnt")?
                                }
                            };
                            let __field3 = match __field3 {
                                _serde::__private::Some(__field3) => __field3,
                                _serde::__private::None => {
                                    _serde::__private::de::missing_field("limit")?
                                }
                            };
                            let __field4 = match __field4 {
                                _serde::__private::Some(__field4) => __field4,
                                _serde::__private::None => {
                                    _serde::__private::de::missing_field("stats")?
                                }
                            };
                            _serde::__private::Ok(MemoryStats {
                                max_usage: __field0,
                                usage: __field1,
                                failcnt: __field2,
                                limit: __field3,
                                stats: __field4,
                            })
                        }
                    }
                    #[doc(hidden)]
                    const FIELDS: &'static [&'static str] = &[
                        "max_usage",
                        "usage",
                        "failcnt",
                        "limit",
                        "stats",
                    ];
                    _serde::Deserializer::deserialize_struct(
                        __deserializer,
                        "MemoryStats",
                        FIELDS,
                        __Visitor {
                            marker: _serde::__private::PhantomData::<MemoryStats>,
                            lifetime: _serde::__private::PhantomData,
                        },
                    )
                }
            }
        };
        pub struct MemoryStat {
            pub total_pgmajfault: u64,
            pub cache: u64,
            pub mapped_file: u64,
            pub total_inactive_file: u64,
            pub pgpgout: u64,
            pub rss: u64,
            pub total_mapped_file: u64,
            pub writeback: u64,
            pub unevictable: u64,
            pub pgpgin: u64,
            pub total_unevictable: u64,
            pub pgmajfault: u64,
            pub total_rss: u64,
            pub total_rss_huge: u64,
            pub total_writeback: u64,
            pub total_inactive_anon: u64,
            pub rss_huge: u64,
            pub hierarchical_memory_limit: u64,
            pub hierarchical_memsw_limit: u64,
            pub total_pgfault: u64,
            pub total_active_file: u64,
            pub active_anon: u64,
            pub total_active_anon: u64,
            pub total_pgpgout: u64,
            pub total_cache: u64,
            pub inactive_anon: u64,
            pub active_file: u64,
            pub pgfault: u64,
            pub inactive_file: u64,
            pub total_pgpgin: u64,
        }
        #[automatically_derived]
        impl ::core::clone::Clone for MemoryStat {
            #[inline]
            fn clone(&self) -> MemoryStat {
                MemoryStat {
                    total_pgmajfault: ::core::clone::Clone::clone(
                        &self.total_pgmajfault,
                    ),
                    cache: ::core::clone::Clone::clone(&self.cache),
                    mapped_file: ::core::clone::Clone::clone(&self.mapped_file),
                    total_inactive_file: ::core::clone::Clone::clone(
                        &self.total_inactive_file,
                    ),
                    pgpgout: ::core::clone::Clone::clone(&self.pgpgout),
                    rss: ::core::clone::Clone::clone(&self.rss),
                    total_mapped_file: ::core::clone::Clone::clone(
                        &self.total_mapped_file,
                    ),
                    writeback: ::core::clone::Clone::clone(&self.writeback),
                    unevictable: ::core::clone::Clone::clone(&self.unevictable),
                    pgpgin: ::core::clone::Clone::clone(&self.pgpgin),
                    total_unevictable: ::core::clone::Clone::clone(
                        &self.total_unevictable,
                    ),
                    pgmajfault: ::core::clone::Clone::clone(&self.pgmajfault),
                    total_rss: ::core::clone::Clone::clone(&self.total_rss),
                    total_rss_huge: ::core::clone::Clone::clone(&self.total_rss_huge),
                    total_writeback: ::core::clone::Clone::clone(&self.total_writeback),
                    total_inactive_anon: ::core::clone::Clone::clone(
                        &self.total_inactive_anon,
                    ),
                    rss_huge: ::core::clone::Clone::clone(&self.rss_huge),
                    hierarchical_memory_limit: ::core::clone::Clone::clone(
                        &self.hierarchical_memory_limit,
                    ),
                    hierarchical_memsw_limit: ::core::clone::Clone::clone(
                        &self.hierarchical_memsw_limit,
                    ),
                    total_pgfault: ::core::clone::Clone::clone(&self.total_pgfault),
                    total_active_file: ::core::clone::Clone::clone(
                        &self.total_active_file,
                    ),
                    active_anon: ::core::clone::Clone::clone(&self.active_anon),
                    total_active_anon: ::core::clone::Clone::clone(
                        &self.total_active_anon,
                    ),
                    total_pgpgout: ::core::clone::Clone::clone(&self.total_pgpgout),
                    total_cache: ::core::clone::Clone::clone(&self.total_cache),
                    inactive_anon: ::core::clone::Clone::clone(&self.inactive_anon),
                    active_file: ::core::clone::Clone::clone(&self.active_file),
                    pgfault: ::core::clone::Clone::clone(&self.pgfault),
                    inactive_file: ::core::clone::Clone::clone(&self.inactive_file),
                    total_pgpgin: ::core::clone::Clone::clone(&self.total_pgpgin),
                }
            }
        }
        #[automatically_derived]
        impl ::core::fmt::Debug for MemoryStat {
            #[inline]
            fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                let names: &'static _ = &[
                    "total_pgmajfault",
                    "cache",
                    "mapped_file",
                    "total_inactive_file",
                    "pgpgout",
                    "rss",
                    "total_mapped_file",
                    "writeback",
                    "unevictable",
                    "pgpgin",
                    "total_unevictable",
                    "pgmajfault",
                    "total_rss",
                    "total_rss_huge",
                    "total_writeback",
                    "total_inactive_anon",
                    "rss_huge",
                    "hierarchical_memory_limit",
                    "hierarchical_memsw_limit",
                    "total_pgfault",
                    "total_active_file",
                    "active_anon",
                    "total_active_anon",
                    "total_pgpgout",
                    "total_cache",
                    "inactive_anon",
                    "active_file",
                    "pgfault",
                    "inactive_file",
                    "total_pgpgin",
                ];
                let values: &[&dyn ::core::fmt::Debug] = &[
                    &self.total_pgmajfault,
                    &self.cache,
                    &self.mapped_file,
                    &self.total_inactive_file,
                    &self.pgpgout,
                    &self.rss,
                    &self.total_mapped_file,
                    &self.writeback,
                    &self.unevictable,
                    &self.pgpgin,
                    &self.total_unevictable,
                    &self.pgmajfault,
                    &self.total_rss,
                    &self.total_rss_huge,
                    &self.total_writeback,
                    &self.total_inactive_anon,
                    &self.rss_huge,
                    &self.hierarchical_memory_limit,
                    &self.hierarchical_memsw_limit,
                    &self.total_pgfault,
                    &self.total_active_file,
                    &self.active_anon,
                    &self.total_active_anon,
                    &self.total_pgpgout,
                    &self.total_cache,
                    &self.inactive_anon,
                    &self.active_file,
                    &self.pgfault,
                    &self.inactive_file,
                    &&self.total_pgpgin,
                ];
                ::core::fmt::Formatter::debug_struct_fields_finish(
                    f,
                    "MemoryStat",
                    names,
                    values,
                )
            }
        }
        #[doc(hidden)]
        #[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
        const _: () = {
            #[allow(unused_extern_crates, clippy::useless_attribute)]
            extern crate serde as _serde;
            #[automatically_derived]
            impl _serde::Serialize for MemoryStat {
                fn serialize<__S>(
                    &self,
                    __serializer: __S,
                ) -> _serde::__private::Result<__S::Ok, __S::Error>
                where
                    __S: _serde::Serializer,
                {
                    let mut __serde_state = _serde::Serializer::serialize_struct(
                        __serializer,
                        "MemoryStat",
                        false as usize + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1
                            + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1
                            + 1 + 1 + 1,
                    )?;
                    _serde::ser::SerializeStruct::serialize_field(
                        &mut __serde_state,
                        "total_pgmajfault",
                        &self.total_pgmajfault,
                    )?;
                    _serde::ser::SerializeStruct::serialize_field(
                        &mut __serde_state,
                        "cache",
                        &self.cache,
                    )?;
                    _serde::ser::SerializeStruct::serialize_field(
                        &mut __serde_state,
                        "mapped_file",
                        &self.mapped_file,
                    )?;
                    _serde::ser::SerializeStruct::serialize_field(
                        &mut __serde_state,
                        "total_inactive_file",
                        &self.total_inactive_file,
                    )?;
                    _serde::ser::SerializeStruct::serialize_field(
                        &mut __serde_state,
                        "pgpgout",
                        &self.pgpgout,
                    )?;
                    _serde::ser::SerializeStruct::serialize_field(
                        &mut __serde_state,
                        "rss",
                        &self.rss,
                    )?;
                    _serde::ser::SerializeStruct::serialize_field(
                        &mut __serde_state,
                        "total_mapped_file",
                        &self.total_mapped_file,
                    )?;
                    _serde::ser::SerializeStruct::serialize_field(
                        &mut __serde_state,
                        "writeback",
                        &self.writeback,
                    )?;
                    _serde::ser::SerializeStruct::serialize_field(
                        &mut __serde_state,
                        "unevictable",
                        &self.unevictable,
                    )?;
                    _serde::ser::SerializeStruct::serialize_field(
                        &mut __serde_state,
                        "pgpgin",
                        &self.pgpgin,
                    )?;
                    _serde::ser::SerializeStruct::serialize_field(
                        &mut __serde_state,
                        "total_unevictable",
                        &self.total_unevictable,
                    )?;
                    _serde::ser::SerializeStruct::serialize_field(
                        &mut __serde_state,
                        "pgmajfault",
                        &self.pgmajfault,
                    )?;
                    _serde::ser::SerializeStruct::serialize_field(
                        &mut __serde_state,
                        "total_rss",
                        &self.total_rss,
                    )?;
                    _serde::ser::SerializeStruct::serialize_field(
                        &mut __serde_state,
                        "total_rss_huge",
                        &self.total_rss_huge,
                    )?;
                    _serde::ser::SerializeStruct::serialize_field(
                        &mut __serde_state,
                        "total_writeback",
                        &self.total_writeback,
                    )?;
                    _serde::ser::SerializeStruct::serialize_field(
                        &mut __serde_state,
                        "total_inactive_anon",
                        &self.total_inactive_anon,
                    )?;
                    _serde::ser::SerializeStruct::serialize_field(
                        &mut __serde_state,
                        "rss_huge",
                        &self.rss_huge,
                    )?;
                    _serde::ser::SerializeStruct::serialize_field(
                        &mut __serde_state,
                        "hierarchical_memory_limit",
                        &self.hierarchical_memory_limit,
                    )?;
                    _serde::ser::SerializeStruct::serialize_field(
                        &mut __serde_state,
                        "hierarchical_memsw_limit",
                        &self.hierarchical_memsw_limit,
                    )?;
                    _serde::ser::SerializeStruct::serialize_field(
                        &mut __serde_state,
                        "total_pgfault",
                        &self.total_pgfault,
                    )?;
                    _serde::ser::SerializeStruct::serialize_field(
                        &mut __serde_state,
                        "total_active_file",
                        &self.total_active_file,
                    )?;
                    _serde::ser::SerializeStruct::serialize_field(
                        &mut __serde_state,
                        "active_anon",
                        &self.active_anon,
                    )?;
                    _serde::ser::SerializeStruct::serialize_field(
                        &mut __serde_state,
                        "total_active_anon",
                        &self.total_active_anon,
                    )?;
                    _serde::ser::SerializeStruct::serialize_field(
                        &mut __serde_state,
                        "total_pgpgout",
                        &self.total_pgpgout,
                    )?;
                    _serde::ser::SerializeStruct::serialize_field(
                        &mut __serde_state,
                        "total_cache",
                        &self.total_cache,
                    )?;
                    _serde::ser::SerializeStruct::serialize_field(
                        &mut __serde_state,
                        "inactive_anon",
                        &self.inactive_anon,
                    )?;
                    _serde::ser::SerializeStruct::serialize_field(
                        &mut __serde_state,
                        "active_file",
                        &self.active_file,
                    )?;
                    _serde::ser::SerializeStruct::serialize_field(
                        &mut __serde_state,
                        "pgfault",
                        &self.pgfault,
                    )?;
                    _serde::ser::SerializeStruct::serialize_field(
                        &mut __serde_state,
                        "inactive_file",
                        &self.inactive_file,
                    )?;
                    _serde::ser::SerializeStruct::serialize_field(
                        &mut __serde_state,
                        "total_pgpgin",
                        &self.total_pgpgin,
                    )?;
                    _serde::ser::SerializeStruct::end(__serde_state)
                }
            }
        };
        #[doc(hidden)]
        #[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
        const _: () = {
            #[allow(unused_extern_crates, clippy::useless_attribute)]
            extern crate serde as _serde;
            #[automatically_derived]
            impl<'de> _serde::Deserialize<'de> for MemoryStat {
                fn deserialize<__D>(
                    __deserializer: __D,
                ) -> _serde::__private::Result<Self, __D::Error>
                where
                    __D: _serde::Deserializer<'de>,
                {
                    #[allow(non_camel_case_types)]
                    #[doc(hidden)]
                    enum __Field {
                        __field0,
                        __field1,
                        __field2,
                        __field3,
                        __field4,
                        __field5,
                        __field6,
                        __field7,
                        __field8,
                        __field9,
                        __field10,
                        __field11,
                        __field12,
                        __field13,
                        __field14,
                        __field15,
                        __field16,
                        __field17,
                        __field18,
                        __field19,
                        __field20,
                        __field21,
                        __field22,
                        __field23,
                        __field24,
                        __field25,
                        __field26,
                        __field27,
                        __field28,
                        __field29,
                        __ignore,
                    }
                    #[doc(hidden)]
                    struct __FieldVisitor;
                    impl<'de> _serde::de::Visitor<'de> for __FieldVisitor {
                        type Value = __Field;
                        fn expecting(
                            &self,
                            __formatter: &mut _serde::__private::Formatter,
                        ) -> _serde::__private::fmt::Result {
                            _serde::__private::Formatter::write_str(
                                __formatter,
                                "field identifier",
                            )
                        }
                        fn visit_u64<__E>(
                            self,
                            __value: u64,
                        ) -> _serde::__private::Result<Self::Value, __E>
                        where
                            __E: _serde::de::Error,
                        {
                            match __value {
                                0u64 => _serde::__private::Ok(__Field::__field0),
                                1u64 => _serde::__private::Ok(__Field::__field1),
                                2u64 => _serde::__private::Ok(__Field::__field2),
                                3u64 => _serde::__private::Ok(__Field::__field3),
                                4u64 => _serde::__private::Ok(__Field::__field4),
                                5u64 => _serde::__private::Ok(__Field::__field5),
                                6u64 => _serde::__private::Ok(__Field::__field6),
                                7u64 => _serde::__private::Ok(__Field::__field7),
                                8u64 => _serde::__private::Ok(__Field::__field8),
                                9u64 => _serde::__private::Ok(__Field::__field9),
                                10u64 => _serde::__private::Ok(__Field::__field10),
                                11u64 => _serde::__private::Ok(__Field::__field11),
                                12u64 => _serde::__private::Ok(__Field::__field12),
                                13u64 => _serde::__private::Ok(__Field::__field13),
                                14u64 => _serde::__private::Ok(__Field::__field14),
                                15u64 => _serde::__private::Ok(__Field::__field15),
                                16u64 => _serde::__private::Ok(__Field::__field16),
                                17u64 => _serde::__private::Ok(__Field::__field17),
                                18u64 => _serde::__private::Ok(__Field::__field18),
                                19u64 => _serde::__private::Ok(__Field::__field19),
                                20u64 => _serde::__private::Ok(__Field::__field20),
                                21u64 => _serde::__private::Ok(__Field::__field21),
                                22u64 => _serde::__private::Ok(__Field::__field22),
                                23u64 => _serde::__private::Ok(__Field::__field23),
                                24u64 => _serde::__private::Ok(__Field::__field24),
                                25u64 => _serde::__private::Ok(__Field::__field25),
                                26u64 => _serde::__private::Ok(__Field::__field26),
                                27u64 => _serde::__private::Ok(__Field::__field27),
                                28u64 => _serde::__private::Ok(__Field::__field28),
                                29u64 => _serde::__private::Ok(__Field::__field29),
                                _ => _serde::__private::Ok(__Field::__ignore),
                            }
                        }
                        fn visit_str<__E>(
                            self,
                            __value: &str,
                        ) -> _serde::__private::Result<Self::Value, __E>
                        where
                            __E: _serde::de::Error,
                        {
                            match __value {
                                "total_pgmajfault" => {
                                    _serde::__private::Ok(__Field::__field0)
                                }
                                "cache" => _serde::__private::Ok(__Field::__field1),
                                "mapped_file" => _serde::__private::Ok(__Field::__field2),
                                "total_inactive_file" => {
                                    _serde::__private::Ok(__Field::__field3)
                                }
                                "pgpgout" => _serde::__private::Ok(__Field::__field4),
                                "rss" => _serde::__private::Ok(__Field::__field5),
                                "total_mapped_file" => {
                                    _serde::__private::Ok(__Field::__field6)
                                }
                                "writeback" => _serde::__private::Ok(__Field::__field7),
                                "unevictable" => _serde::__private::Ok(__Field::__field8),
                                "pgpgin" => _serde::__private::Ok(__Field::__field9),
                                "total_unevictable" => {
                                    _serde::__private::Ok(__Field::__field10)
                                }
                                "pgmajfault" => _serde::__private::Ok(__Field::__field11),
                                "total_rss" => _serde::__private::Ok(__Field::__field12),
                                "total_rss_huge" => {
                                    _serde::__private::Ok(__Field::__field13)
                                }
                                "total_writeback" => {
                                    _serde::__private::Ok(__Field::__field14)
                                }
                                "total_inactive_anon" => {
                                    _serde::__private::Ok(__Field::__field15)
                                }
                                "rss_huge" => _serde::__private::Ok(__Field::__field16),
                                "hierarchical_memory_limit" => {
                                    _serde::__private::Ok(__Field::__field17)
                                }
                                "hierarchical_memsw_limit" => {
                                    _serde::__private::Ok(__Field::__field18)
                                }
                                "total_pgfault" => _serde::__private::Ok(__Field::__field19),
                                "total_active_file" => {
                                    _serde::__private::Ok(__Field::__field20)
                                }
                                "active_anon" => _serde::__private::Ok(__Field::__field21),
                                "total_active_anon" => {
                                    _serde::__private::Ok(__Field::__field22)
                                }
                                "total_pgpgout" => _serde::__private::Ok(__Field::__field23),
                                "total_cache" => _serde::__private::Ok(__Field::__field24),
                                "inactive_anon" => _serde::__private::Ok(__Field::__field25),
                                "active_file" => _serde::__private::Ok(__Field::__field26),
                                "pgfault" => _serde::__private::Ok(__Field::__field27),
                                "inactive_file" => _serde::__private::Ok(__Field::__field28),
                                "total_pgpgin" => _serde::__private::Ok(__Field::__field29),
                                _ => _serde::__private::Ok(__Field::__ignore),
                            }
                        }
                        fn visit_bytes<__E>(
                            self,
                            __value: &[u8],
                        ) -> _serde::__private::Result<Self::Value, __E>
                        where
                            __E: _serde::de::Error,
                        {
                            match __value {
                                b"total_pgmajfault" => {
                                    _serde::__private::Ok(__Field::__field0)
                                }
                                b"cache" => _serde::__private::Ok(__Field::__field1),
                                b"mapped_file" => _serde::__private::Ok(__Field::__field2),
                                b"total_inactive_file" => {
                                    _serde::__private::Ok(__Field::__field3)
                                }
                                b"pgpgout" => _serde::__private::Ok(__Field::__field4),
                                b"rss" => _serde::__private::Ok(__Field::__field5),
                                b"total_mapped_file" => {
                                    _serde::__private::Ok(__Field::__field6)
                                }
                                b"writeback" => _serde::__private::Ok(__Field::__field7),
                                b"unevictable" => _serde::__private::Ok(__Field::__field8),
                                b"pgpgin" => _serde::__private::Ok(__Field::__field9),
                                b"total_unevictable" => {
                                    _serde::__private::Ok(__Field::__field10)
                                }
                                b"pgmajfault" => _serde::__private::Ok(__Field::__field11),
                                b"total_rss" => _serde::__private::Ok(__Field::__field12),
                                b"total_rss_huge" => {
                                    _serde::__private::Ok(__Field::__field13)
                                }
                                b"total_writeback" => {
                                    _serde::__private::Ok(__Field::__field14)
                                }
                                b"total_inactive_anon" => {
                                    _serde::__private::Ok(__Field::__field15)
                                }
                                b"rss_huge" => _serde::__private::Ok(__Field::__field16),
                                b"hierarchical_memory_limit" => {
                                    _serde::__private::Ok(__Field::__field17)
                                }
                                b"hierarchical_memsw_limit" => {
                                    _serde::__private::Ok(__Field::__field18)
                                }
                                b"total_pgfault" => {
                                    _serde::__private::Ok(__Field::__field19)
                                }
                                b"total_active_file" => {
                                    _serde::__private::Ok(__Field::__field20)
                                }
                                b"active_anon" => _serde::__private::Ok(__Field::__field21),
                                b"total_active_anon" => {
                                    _serde::__private::Ok(__Field::__field22)
                                }
                                b"total_pgpgout" => {
                                    _serde::__private::Ok(__Field::__field23)
                                }
                                b"total_cache" => _serde::__private::Ok(__Field::__field24),
                                b"inactive_anon" => {
                                    _serde::__private::Ok(__Field::__field25)
                                }
                                b"active_file" => _serde::__private::Ok(__Field::__field26),
                                b"pgfault" => _serde::__private::Ok(__Field::__field27),
                                b"inactive_file" => {
                                    _serde::__private::Ok(__Field::__field28)
                                }
                                b"total_pgpgin" => _serde::__private::Ok(__Field::__field29),
                                _ => _serde::__private::Ok(__Field::__ignore),
                            }
                        }
                    }
                    impl<'de> _serde::Deserialize<'de> for __Field {
                        #[inline]
                        fn deserialize<__D>(
                            __deserializer: __D,
                        ) -> _serde::__private::Result<Self, __D::Error>
                        where
                            __D: _serde::Deserializer<'de>,
                        {
                            _serde::Deserializer::deserialize_identifier(
                                __deserializer,
                                __FieldVisitor,
                            )
                        }
                    }
                    #[doc(hidden)]
                    struct __Visitor<'de> {
                        marker: _serde::__private::PhantomData<MemoryStat>,
                        lifetime: _serde::__private::PhantomData<&'de ()>,
                    }
                    impl<'de> _serde::de::Visitor<'de> for __Visitor<'de> {
                        type Value = MemoryStat;
                        fn expecting(
                            &self,
                            __formatter: &mut _serde::__private::Formatter,
                        ) -> _serde::__private::fmt::Result {
                            _serde::__private::Formatter::write_str(
                                __formatter,
                                "struct MemoryStat",
                            )
                        }
                        #[inline]
                        fn visit_seq<__A>(
                            self,
                            mut __seq: __A,
                        ) -> _serde::__private::Result<Self::Value, __A::Error>
                        where
                            __A: _serde::de::SeqAccess<'de>,
                        {
                            let __field0 = match _serde::de::SeqAccess::next_element::<
                                u64,
                            >(&mut __seq)? {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            0usize,
                                            &"struct MemoryStat with 30 elements",
                                        ),
                                    );
                                }
                            };
                            let __field1 = match _serde::de::SeqAccess::next_element::<
                                u64,
                            >(&mut __seq)? {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            1usize,
                                            &"struct MemoryStat with 30 elements",
                                        ),
                                    );
                                }
                            };
                            let __field2 = match _serde::de::SeqAccess::next_element::<
                                u64,
                            >(&mut __seq)? {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            2usize,
                                            &"struct MemoryStat with 30 elements",
                                        ),
                                    );
                                }
                            };
                            let __field3 = match _serde::de::SeqAccess::next_element::<
                                u64,
                            >(&mut __seq)? {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            3usize,
                                            &"struct MemoryStat with 30 elements",
                                        ),
                                    );
                                }
                            };
                            let __field4 = match _serde::de::SeqAccess::next_element::<
                                u64,
                            >(&mut __seq)? {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            4usize,
                                            &"struct MemoryStat with 30 elements",
                                        ),
                                    );
                                }
                            };
                            let __field5 = match _serde::de::SeqAccess::next_element::<
                                u64,
                            >(&mut __seq)? {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            5usize,
                                            &"struct MemoryStat with 30 elements",
                                        ),
                                    );
                                }
                            };
                            let __field6 = match _serde::de::SeqAccess::next_element::<
                                u64,
                            >(&mut __seq)? {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            6usize,
                                            &"struct MemoryStat with 30 elements",
                                        ),
                                    );
                                }
                            };
                            let __field7 = match _serde::de::SeqAccess::next_element::<
                                u64,
                            >(&mut __seq)? {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            7usize,
                                            &"struct MemoryStat with 30 elements",
                                        ),
                                    );
                                }
                            };
                            let __field8 = match _serde::de::SeqAccess::next_element::<
                                u64,
                            >(&mut __seq)? {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            8usize,
                                            &"struct MemoryStat with 30 elements",
                                        ),
                                    );
                                }
                            };
                            let __field9 = match _serde::de::SeqAccess::next_element::<
                                u64,
                            >(&mut __seq)? {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            9usize,
                                            &"struct MemoryStat with 30 elements",
                                        ),
                                    );
                                }
                            };
                            let __field10 = match _serde::de::SeqAccess::next_element::<
                                u64,
                            >(&mut __seq)? {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            10usize,
                                            &"struct MemoryStat with 30 elements",
                                        ),
                                    );
                                }
                            };
                            let __field11 = match _serde::de::SeqAccess::next_element::<
                                u64,
                            >(&mut __seq)? {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            11usize,
                                            &"struct MemoryStat with 30 elements",
                                        ),
                                    );
                                }
                            };
                            let __field12 = match _serde::de::SeqAccess::next_element::<
                                u64,
                            >(&mut __seq)? {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            12usize,
                                            &"struct MemoryStat with 30 elements",
                                        ),
                                    );
                                }
                            };
                            let __field13 = match _serde::de::SeqAccess::next_element::<
                                u64,
                            >(&mut __seq)? {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            13usize,
                                            &"struct MemoryStat with 30 elements",
                                        ),
                                    );
                                }
                            };
                            let __field14 = match _serde::de::SeqAccess::next_element::<
                                u64,
                            >(&mut __seq)? {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            14usize,
                                            &"struct MemoryStat with 30 elements",
                                        ),
                                    );
                                }
                            };
                            let __field15 = match _serde::de::SeqAccess::next_element::<
                                u64,
                            >(&mut __seq)? {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            15usize,
                                            &"struct MemoryStat with 30 elements",
                                        ),
                                    );
                                }
                            };
                            let __field16 = match _serde::de::SeqAccess::next_element::<
                                u64,
                            >(&mut __seq)? {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            16usize,
                                            &"struct MemoryStat with 30 elements",
                                        ),
                                    );
                                }
                            };
                            let __field17 = match _serde::de::SeqAccess::next_element::<
                                u64,
                            >(&mut __seq)? {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            17usize,
                                            &"struct MemoryStat with 30 elements",
                                        ),
                                    );
                                }
                            };
                            let __field18 = match _serde::de::SeqAccess::next_element::<
                                u64,
                            >(&mut __seq)? {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            18usize,
                                            &"struct MemoryStat with 30 elements",
                                        ),
                                    );
                                }
                            };
                            let __field19 = match _serde::de::SeqAccess::next_element::<
                                u64,
                            >(&mut __seq)? {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            19usize,
                                            &"struct MemoryStat with 30 elements",
                                        ),
                                    );
                                }
                            };
                            let __field20 = match _serde::de::SeqAccess::next_element::<
                                u64,
                            >(&mut __seq)? {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            20usize,
                                            &"struct MemoryStat with 30 elements",
                                        ),
                                    );
                                }
                            };
                            let __field21 = match _serde::de::SeqAccess::next_element::<
                                u64,
                            >(&mut __seq)? {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            21usize,
                                            &"struct MemoryStat with 30 elements",
                                        ),
                                    );
                                }
                            };
                            let __field22 = match _serde::de::SeqAccess::next_element::<
                                u64,
                            >(&mut __seq)? {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            22usize,
                                            &"struct MemoryStat with 30 elements",
                                        ),
                                    );
                                }
                            };
                            let __field23 = match _serde::de::SeqAccess::next_element::<
                                u64,
                            >(&mut __seq)? {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            23usize,
                                            &"struct MemoryStat with 30 elements",
                                        ),
                                    );
                                }
                            };
                            let __field24 = match _serde::de::SeqAccess::next_element::<
                                u64,
                            >(&mut __seq)? {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            24usize,
                                            &"struct MemoryStat with 30 elements",
                                        ),
                                    );
                                }
                            };
                            let __field25 = match _serde::de::SeqAccess::next_element::<
                                u64,
                            >(&mut __seq)? {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            25usize,
                                            &"struct MemoryStat with 30 elements",
                                        ),
                                    );
                                }
                            };
                            let __field26 = match _serde::de::SeqAccess::next_element::<
                                u64,
                            >(&mut __seq)? {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            26usize,
                                            &"struct MemoryStat with 30 elements",
                                        ),
                                    );
                                }
                            };
                            let __field27 = match _serde::de::SeqAccess::next_element::<
                                u64,
                            >(&mut __seq)? {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            27usize,
                                            &"struct MemoryStat with 30 elements",
                                        ),
                                    );
                                }
                            };
                            let __field28 = match _serde::de::SeqAccess::next_element::<
                                u64,
                            >(&mut __seq)? {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            28usize,
                                            &"struct MemoryStat with 30 elements",
                                        ),
                                    );
                                }
                            };
                            let __field29 = match _serde::de::SeqAccess::next_element::<
                                u64,
                            >(&mut __seq)? {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            29usize,
                                            &"struct MemoryStat with 30 elements",
                                        ),
                                    );
                                }
                            };
                            _serde::__private::Ok(MemoryStat {
                                total_pgmajfault: __field0,
                                cache: __field1,
                                mapped_file: __field2,
                                total_inactive_file: __field3,
                                pgpgout: __field4,
                                rss: __field5,
                                total_mapped_file: __field6,
                                writeback: __field7,
                                unevictable: __field8,
                                pgpgin: __field9,
                                total_unevictable: __field10,
                                pgmajfault: __field11,
                                total_rss: __field12,
                                total_rss_huge: __field13,
                                total_writeback: __field14,
                                total_inactive_anon: __field15,
                                rss_huge: __field16,
                                hierarchical_memory_limit: __field17,
                                hierarchical_memsw_limit: __field18,
                                total_pgfault: __field19,
                                total_active_file: __field20,
                                active_anon: __field21,
                                total_active_anon: __field22,
                                total_pgpgout: __field23,
                                total_cache: __field24,
                                inactive_anon: __field25,
                                active_file: __field26,
                                pgfault: __field27,
                                inactive_file: __field28,
                                total_pgpgin: __field29,
                            })
                        }
                        #[inline]
                        fn visit_map<__A>(
                            self,
                            mut __map: __A,
                        ) -> _serde::__private::Result<Self::Value, __A::Error>
                        where
                            __A: _serde::de::MapAccess<'de>,
                        {
                            let mut __field0: _serde::__private::Option<u64> = _serde::__private::None;
                            let mut __field1: _serde::__private::Option<u64> = _serde::__private::None;
                            let mut __field2: _serde::__private::Option<u64> = _serde::__private::None;
                            let mut __field3: _serde::__private::Option<u64> = _serde::__private::None;
                            let mut __field4: _serde::__private::Option<u64> = _serde::__private::None;
                            let mut __field5: _serde::__private::Option<u64> = _serde::__private::None;
                            let mut __field6: _serde::__private::Option<u64> = _serde::__private::None;
                            let mut __field7: _serde::__private::Option<u64> = _serde::__private::None;
                            let mut __field8: _serde::__private::Option<u64> = _serde::__private::None;
                            let mut __field9: _serde::__private::Option<u64> = _serde::__private::None;
                            let mut __field10: _serde::__private::Option<u64> = _serde::__private::None;
                            let mut __field11: _serde::__private::Option<u64> = _serde::__private::None;
                            let mut __field12: _serde::__private::Option<u64> = _serde::__private::None;
                            let mut __field13: _serde::__private::Option<u64> = _serde::__private::None;
                            let mut __field14: _serde::__private::Option<u64> = _serde::__private::None;
                            let mut __field15: _serde::__private::Option<u64> = _serde::__private::None;
                            let mut __field16: _serde::__private::Option<u64> = _serde::__private::None;
                            let mut __field17: _serde::__private::Option<u64> = _serde::__private::None;
                            let mut __field18: _serde::__private::Option<u64> = _serde::__private::None;
                            let mut __field19: _serde::__private::Option<u64> = _serde::__private::None;
                            let mut __field20: _serde::__private::Option<u64> = _serde::__private::None;
                            let mut __field21: _serde::__private::Option<u64> = _serde::__private::None;
                            let mut __field22: _serde::__private::Option<u64> = _serde::__private::None;
                            let mut __field23: _serde::__private::Option<u64> = _serde::__private::None;
                            let mut __field24: _serde::__private::Option<u64> = _serde::__private::None;
                            let mut __field25: _serde::__private::Option<u64> = _serde::__private::None;
                            let mut __field26: _serde::__private::Option<u64> = _serde::__private::None;
                            let mut __field27: _serde::__private::Option<u64> = _serde::__private::None;
                            let mut __field28: _serde::__private::Option<u64> = _serde::__private::None;
                            let mut __field29: _serde::__private::Option<u64> = _serde::__private::None;
                            while let _serde::__private::Some(__key) = _serde::de::MapAccess::next_key::<
                                __Field,
                            >(&mut __map)? {
                                match __key {
                                    __Field::__field0 => {
                                        if _serde::__private::Option::is_some(&__field0) {
                                            return _serde::__private::Err(
                                                <__A::Error as _serde::de::Error>::duplicate_field(
                                                    "total_pgmajfault",
                                                ),
                                            );
                                        }
                                        __field0 = _serde::__private::Some(
                                            _serde::de::MapAccess::next_value::<u64>(&mut __map)?,
                                        );
                                    }
                                    __Field::__field1 => {
                                        if _serde::__private::Option::is_some(&__field1) {
                                            return _serde::__private::Err(
                                                <__A::Error as _serde::de::Error>::duplicate_field("cache"),
                                            );
                                        }
                                        __field1 = _serde::__private::Some(
                                            _serde::de::MapAccess::next_value::<u64>(&mut __map)?,
                                        );
                                    }
                                    __Field::__field2 => {
                                        if _serde::__private::Option::is_some(&__field2) {
                                            return _serde::__private::Err(
                                                <__A::Error as _serde::de::Error>::duplicate_field(
                                                    "mapped_file",
                                                ),
                                            );
                                        }
                                        __field2 = _serde::__private::Some(
                                            _serde::de::MapAccess::next_value::<u64>(&mut __map)?,
                                        );
                                    }
                                    __Field::__field3 => {
                                        if _serde::__private::Option::is_some(&__field3) {
                                            return _serde::__private::Err(
                                                <__A::Error as _serde::de::Error>::duplicate_field(
                                                    "total_inactive_file",
                                                ),
                                            );
                                        }
                                        __field3 = _serde::__private::Some(
                                            _serde::de::MapAccess::next_value::<u64>(&mut __map)?,
                                        );
                                    }
                                    __Field::__field4 => {
                                        if _serde::__private::Option::is_some(&__field4) {
                                            return _serde::__private::Err(
                                                <__A::Error as _serde::de::Error>::duplicate_field(
                                                    "pgpgout",
                                                ),
                                            );
                                        }
                                        __field4 = _serde::__private::Some(
                                            _serde::de::MapAccess::next_value::<u64>(&mut __map)?,
                                        );
                                    }
                                    __Field::__field5 => {
                                        if _serde::__private::Option::is_some(&__field5) {
                                            return _serde::__private::Err(
                                                <__A::Error as _serde::de::Error>::duplicate_field("rss"),
                                            );
                                        }
                                        __field5 = _serde::__private::Some(
                                            _serde::de::MapAccess::next_value::<u64>(&mut __map)?,
                                        );
                                    }
                                    __Field::__field6 => {
                                        if _serde::__private::Option::is_some(&__field6) {
                                            return _serde::__private::Err(
                                                <__A::Error as _serde::de::Error>::duplicate_field(
                                                    "total_mapped_file",
                                                ),
                                            );
                                        }
                                        __field6 = _serde::__private::Some(
                                            _serde::de::MapAccess::next_value::<u64>(&mut __map)?,
                                        );
                                    }
                                    __Field::__field7 => {
                                        if _serde::__private::Option::is_some(&__field7) {
                                            return _serde::__private::Err(
                                                <__A::Error as _serde::de::Error>::duplicate_field(
                                                    "writeback",
                                                ),
                                            );
                                        }
                                        __field7 = _serde::__private::Some(
                                            _serde::de::MapAccess::next_value::<u64>(&mut __map)?,
                                        );
                                    }
                                    __Field::__field8 => {
                                        if _serde::__private::Option::is_some(&__field8) {
                                            return _serde::__private::Err(
                                                <__A::Error as _serde::de::Error>::duplicate_field(
                                                    "unevictable",
                                                ),
                                            );
                                        }
                                        __field8 = _serde::__private::Some(
                                            _serde::de::MapAccess::next_value::<u64>(&mut __map)?,
                                        );
                                    }
                                    __Field::__field9 => {
                                        if _serde::__private::Option::is_some(&__field9) {
                                            return _serde::__private::Err(
                                                <__A::Error as _serde::de::Error>::duplicate_field("pgpgin"),
                                            );
                                        }
                                        __field9 = _serde::__private::Some(
                                            _serde::de::MapAccess::next_value::<u64>(&mut __map)?,
                                        );
                                    }
                                    __Field::__field10 => {
                                        if _serde::__private::Option::is_some(&__field10) {
                                            return _serde::__private::Err(
                                                <__A::Error as _serde::de::Error>::duplicate_field(
                                                    "total_unevictable",
                                                ),
                                            );
                                        }
                                        __field10 = _serde::__private::Some(
                                            _serde::de::MapAccess::next_value::<u64>(&mut __map)?,
                                        );
                                    }
                                    __Field::__field11 => {
                                        if _serde::__private::Option::is_some(&__field11) {
                                            return _serde::__private::Err(
                                                <__A::Error as _serde::de::Error>::duplicate_field(
                                                    "pgmajfault",
                                                ),
                                            );
                                        }
                                        __field11 = _serde::__private::Some(
                                            _serde::de::MapAccess::next_value::<u64>(&mut __map)?,
                                        );
                                    }
                                    __Field::__field12 => {
                                        if _serde::__private::Option::is_some(&__field12) {
                                            return _serde::__private::Err(
                                                <__A::Error as _serde::de::Error>::duplicate_field(
                                                    "total_rss",
                                                ),
                                            );
                                        }
                                        __field12 = _serde::__private::Some(
                                            _serde::de::MapAccess::next_value::<u64>(&mut __map)?,
                                        );
                                    }
                                    __Field::__field13 => {
                                        if _serde::__private::Option::is_some(&__field13) {
                                            return _serde::__private::Err(
                                                <__A::Error as _serde::de::Error>::duplicate_field(
                                                    "total_rss_huge",
                                                ),
                                            );
                                        }
                                        __field13 = _serde::__private::Some(
                                            _serde::de::MapAccess::next_value::<u64>(&mut __map)?,
                                        );
                                    }
                                    __Field::__field14 => {
                                        if _serde::__private::Option::is_some(&__field14) {
                                            return _serde::__private::Err(
                                                <__A::Error as _serde::de::Error>::duplicate_field(
                                                    "total_writeback",
                                                ),
                                            );
                                        }
                                        __field14 = _serde::__private::Some(
                                            _serde::de::MapAccess::next_value::<u64>(&mut __map)?,
                                        );
                                    }
                                    __Field::__field15 => {
                                        if _serde::__private::Option::is_some(&__field15) {
                                            return _serde::__private::Err(
                                                <__A::Error as _serde::de::Error>::duplicate_field(
                                                    "total_inactive_anon",
                                                ),
                                            );
                                        }
                                        __field15 = _serde::__private::Some(
                                            _serde::de::MapAccess::next_value::<u64>(&mut __map)?,
                                        );
                                    }
                                    __Field::__field16 => {
                                        if _serde::__private::Option::is_some(&__field16) {
                                            return _serde::__private::Err(
                                                <__A::Error as _serde::de::Error>::duplicate_field(
                                                    "rss_huge",
                                                ),
                                            );
                                        }
                                        __field16 = _serde::__private::Some(
                                            _serde::de::MapAccess::next_value::<u64>(&mut __map)?,
                                        );
                                    }
                                    __Field::__field17 => {
                                        if _serde::__private::Option::is_some(&__field17) {
                                            return _serde::__private::Err(
                                                <__A::Error as _serde::de::Error>::duplicate_field(
                                                    "hierarchical_memory_limit",
                                                ),
                                            );
                                        }
                                        __field17 = _serde::__private::Some(
                                            _serde::de::MapAccess::next_value::<u64>(&mut __map)?,
                                        );
                                    }
                                    __Field::__field18 => {
                                        if _serde::__private::Option::is_some(&__field18) {
                                            return _serde::__private::Err(
                                                <__A::Error as _serde::de::Error>::duplicate_field(
                                                    "hierarchical_memsw_limit",
                                                ),
                                            );
                                        }
                                        __field18 = _serde::__private::Some(
                                            _serde::de::MapAccess::next_value::<u64>(&mut __map)?,
                                        );
                                    }
                                    __Field::__field19 => {
                                        if _serde::__private::Option::is_some(&__field19) {
                                            return _serde::__private::Err(
                                                <__A::Error as _serde::de::Error>::duplicate_field(
                                                    "total_pgfault",
                                                ),
                                            );
                                        }
                                        __field19 = _serde::__private::Some(
                                            _serde::de::MapAccess::next_value::<u64>(&mut __map)?,
                                        );
                                    }
                                    __Field::__field20 => {
                                        if _serde::__private::Option::is_some(&__field20) {
                                            return _serde::__private::Err(
                                                <__A::Error as _serde::de::Error>::duplicate_field(
                                                    "total_active_file",
                                                ),
                                            );
                                        }
                                        __field20 = _serde::__private::Some(
                                            _serde::de::MapAccess::next_value::<u64>(&mut __map)?,
                                        );
                                    }
                                    __Field::__field21 => {
                                        if _serde::__private::Option::is_some(&__field21) {
                                            return _serde::__private::Err(
                                                <__A::Error as _serde::de::Error>::duplicate_field(
                                                    "active_anon",
                                                ),
                                            );
                                        }
                                        __field21 = _serde::__private::Some(
                                            _serde::de::MapAccess::next_value::<u64>(&mut __map)?,
                                        );
                                    }
                                    __Field::__field22 => {
                                        if _serde::__private::Option::is_some(&__field22) {
                                            return _serde::__private::Err(
                                                <__A::Error as _serde::de::Error>::duplicate_field(
                                                    "total_active_anon",
                                                ),
                                            );
                                        }
                                        __field22 = _serde::__private::Some(
                                            _serde::de::MapAccess::next_value::<u64>(&mut __map)?,
                                        );
                                    }
                                    __Field::__field23 => {
                                        if _serde::__private::Option::is_some(&__field23) {
                                            return _serde::__private::Err(
                                                <__A::Error as _serde::de::Error>::duplicate_field(
                                                    "total_pgpgout",
                                                ),
                                            );
                                        }
                                        __field23 = _serde::__private::Some(
                                            _serde::de::MapAccess::next_value::<u64>(&mut __map)?,
                                        );
                                    }
                                    __Field::__field24 => {
                                        if _serde::__private::Option::is_some(&__field24) {
                                            return _serde::__private::Err(
                                                <__A::Error as _serde::de::Error>::duplicate_field(
                                                    "total_cache",
                                                ),
                                            );
                                        }
                                        __field24 = _serde::__private::Some(
                                            _serde::de::MapAccess::next_value::<u64>(&mut __map)?,
                                        );
                                    }
                                    __Field::__field25 => {
                                        if _serde::__private::Option::is_some(&__field25) {
                                            return _serde::__private::Err(
                                                <__A::Error as _serde::de::Error>::duplicate_field(
                                                    "inactive_anon",
                                                ),
                                            );
                                        }
                                        __field25 = _serde::__private::Some(
                                            _serde::de::MapAccess::next_value::<u64>(&mut __map)?,
                                        );
                                    }
                                    __Field::__field26 => {
                                        if _serde::__private::Option::is_some(&__field26) {
                                            return _serde::__private::Err(
                                                <__A::Error as _serde::de::Error>::duplicate_field(
                                                    "active_file",
                                                ),
                                            );
                                        }
                                        __field26 = _serde::__private::Some(
                                            _serde::de::MapAccess::next_value::<u64>(&mut __map)?,
                                        );
                                    }
                                    __Field::__field27 => {
                                        if _serde::__private::Option::is_some(&__field27) {
                                            return _serde::__private::Err(
                                                <__A::Error as _serde::de::Error>::duplicate_field(
                                                    "pgfault",
                                                ),
                                            );
                                        }
                                        __field27 = _serde::__private::Some(
                                            _serde::de::MapAccess::next_value::<u64>(&mut __map)?,
                                        );
                                    }
                                    __Field::__field28 => {
                                        if _serde::__private::Option::is_some(&__field28) {
                                            return _serde::__private::Err(
                                                <__A::Error as _serde::de::Error>::duplicate_field(
                                                    "inactive_file",
                                                ),
                                            );
                                        }
                                        __field28 = _serde::__private::Some(
                                            _serde::de::MapAccess::next_value::<u64>(&mut __map)?,
                                        );
                                    }
                                    __Field::__field29 => {
                                        if _serde::__private::Option::is_some(&__field29) {
                                            return _serde::__private::Err(
                                                <__A::Error as _serde::de::Error>::duplicate_field(
                                                    "total_pgpgin",
                                                ),
                                            );
                                        }
                                        __field29 = _serde::__private::Some(
                                            _serde::de::MapAccess::next_value::<u64>(&mut __map)?,
                                        );
                                    }
                                    _ => {
                                        let _ = _serde::de::MapAccess::next_value::<
                                            _serde::de::IgnoredAny,
                                        >(&mut __map)?;
                                    }
                                }
                            }
                            let __field0 = match __field0 {
                                _serde::__private::Some(__field0) => __field0,
                                _serde::__private::None => {
                                    _serde::__private::de::missing_field("total_pgmajfault")?
                                }
                            };
                            let __field1 = match __field1 {
                                _serde::__private::Some(__field1) => __field1,
                                _serde::__private::None => {
                                    _serde::__private::de::missing_field("cache")?
                                }
                            };
                            let __field2 = match __field2 {
                                _serde::__private::Some(__field2) => __field2,
                                _serde::__private::None => {
                                    _serde::__private::de::missing_field("mapped_file")?
                                }
                            };
                            let __field3 = match __field3 {
                                _serde::__private::Some(__field3) => __field3,
                                _serde::__private::None => {
                                    _serde::__private::de::missing_field("total_inactive_file")?
                                }
                            };
                            let __field4 = match __field4 {
                                _serde::__private::Some(__field4) => __field4,
                                _serde::__private::None => {
                                    _serde::__private::de::missing_field("pgpgout")?
                                }
                            };
                            let __field5 = match __field5 {
                                _serde::__private::Some(__field5) => __field5,
                                _serde::__private::None => {
                                    _serde::__private::de::missing_field("rss")?
                                }
                            };
                            let __field6 = match __field6 {
                                _serde::__private::Some(__field6) => __field6,
                                _serde::__private::None => {
                                    _serde::__private::de::missing_field("total_mapped_file")?
                                }
                            };
                            let __field7 = match __field7 {
                                _serde::__private::Some(__field7) => __field7,
                                _serde::__private::None => {
                                    _serde::__private::de::missing_field("writeback")?
                                }
                            };
                            let __field8 = match __field8 {
                                _serde::__private::Some(__field8) => __field8,
                                _serde::__private::None => {
                                    _serde::__private::de::missing_field("unevictable")?
                                }
                            };
                            let __field9 = match __field9 {
                                _serde::__private::Some(__field9) => __field9,
                                _serde::__private::None => {
                                    _serde::__private::de::missing_field("pgpgin")?
                                }
                            };
                            let __field10 = match __field10 {
                                _serde::__private::Some(__field10) => __field10,
                                _serde::__private::None => {
                                    _serde::__private::de::missing_field("total_unevictable")?
                                }
                            };
                            let __field11 = match __field11 {
                                _serde::__private::Some(__field11) => __field11,
                                _serde::__private::None => {
                                    _serde::__private::de::missing_field("pgmajfault")?
                                }
                            };
                            let __field12 = match __field12 {
                                _serde::__private::Some(__field12) => __field12,
                                _serde::__private::None => {
                                    _serde::__private::de::missing_field("total_rss")?
                                }
                            };
                            let __field13 = match __field13 {
                                _serde::__private::Some(__field13) => __field13,
                                _serde::__private::None => {
                                    _serde::__private::de::missing_field("total_rss_huge")?
                                }
                            };
                            let __field14 = match __field14 {
                                _serde::__private::Some(__field14) => __field14,
                                _serde::__private::None => {
                                    _serde::__private::de::missing_field("total_writeback")?
                                }
                            };
                            let __field15 = match __field15 {
                                _serde::__private::Some(__field15) => __field15,
                                _serde::__private::None => {
                                    _serde::__private::de::missing_field("total_inactive_anon")?
                                }
                            };
                            let __field16 = match __field16 {
                                _serde::__private::Some(__field16) => __field16,
                                _serde::__private::None => {
                                    _serde::__private::de::missing_field("rss_huge")?
                                }
                            };
                            let __field17 = match __field17 {
                                _serde::__private::Some(__field17) => __field17,
                                _serde::__private::None => {
                                    _serde::__private::de::missing_field(
                                        "hierarchical_memory_limit",
                                    )?
                                }
                            };
                            let __field18 = match __field18 {
                                _serde::__private::Some(__field18) => __field18,
                                _serde::__private::None => {
                                    _serde::__private::de::missing_field(
                                        "hierarchical_memsw_limit",
                                    )?
                                }
                            };
                            let __field19 = match __field19 {
                                _serde::__private::Some(__field19) => __field19,
                                _serde::__private::None => {
                                    _serde::__private::de::missing_field("total_pgfault")?
                                }
                            };
                            let __field20 = match __field20 {
                                _serde::__private::Some(__field20) => __field20,
                                _serde::__private::None => {
                                    _serde::__private::de::missing_field("total_active_file")?
                                }
                            };
                            let __field21 = match __field21 {
                                _serde::__private::Some(__field21) => __field21,
                                _serde::__private::None => {
                                    _serde::__private::de::missing_field("active_anon")?
                                }
                            };
                            let __field22 = match __field22 {
                                _serde::__private::Some(__field22) => __field22,
                                _serde::__private::None => {
                                    _serde::__private::de::missing_field("total_active_anon")?
                                }
                            };
                            let __field23 = match __field23 {
                                _serde::__private::Some(__field23) => __field23,
                                _serde::__private::None => {
                                    _serde::__private::de::missing_field("total_pgpgout")?
                                }
                            };
                            let __field24 = match __field24 {
                                _serde::__private::Some(__field24) => __field24,
                                _serde::__private::None => {
                                    _serde::__private::de::missing_field("total_cache")?
                                }
                            };
                            let __field25 = match __field25 {
                                _serde::__private::Some(__field25) => __field25,
                                _serde::__private::None => {
                                    _serde::__private::de::missing_field("inactive_anon")?
                                }
                            };
                            let __field26 = match __field26 {
                                _serde::__private::Some(__field26) => __field26,
                                _serde::__private::None => {
                                    _serde::__private::de::missing_field("active_file")?
                                }
                            };
                            let __field27 = match __field27 {
                                _serde::__private::Some(__field27) => __field27,
                                _serde::__private::None => {
                                    _serde::__private::de::missing_field("pgfault")?
                                }
                            };
                            let __field28 = match __field28 {
                                _serde::__private::Some(__field28) => __field28,
                                _serde::__private::None => {
                                    _serde::__private::de::missing_field("inactive_file")?
                                }
                            };
                            let __field29 = match __field29 {
                                _serde::__private::Some(__field29) => __field29,
                                _serde::__private::None => {
                                    _serde::__private::de::missing_field("total_pgpgin")?
                                }
                            };
                            _serde::__private::Ok(MemoryStat {
                                total_pgmajfault: __field0,
                                cache: __field1,
                                mapped_file: __field2,
                                total_inactive_file: __field3,
                                pgpgout: __field4,
                                rss: __field5,
                                total_mapped_file: __field6,
                                writeback: __field7,
                                unevictable: __field8,
                                pgpgin: __field9,
                                total_unevictable: __field10,
                                pgmajfault: __field11,
                                total_rss: __field12,
                                total_rss_huge: __field13,
                                total_writeback: __field14,
                                total_inactive_anon: __field15,
                                rss_huge: __field16,
                                hierarchical_memory_limit: __field17,
                                hierarchical_memsw_limit: __field18,
                                total_pgfault: __field19,
                                total_active_file: __field20,
                                active_anon: __field21,
                                total_active_anon: __field22,
                                total_pgpgout: __field23,
                                total_cache: __field24,
                                inactive_anon: __field25,
                                active_file: __field26,
                                pgfault: __field27,
                                inactive_file: __field28,
                                total_pgpgin: __field29,
                            })
                        }
                    }
                    #[doc(hidden)]
                    const FIELDS: &'static [&'static str] = &[
                        "total_pgmajfault",
                        "cache",
                        "mapped_file",
                        "total_inactive_file",
                        "pgpgout",
                        "rss",
                        "total_mapped_file",
                        "writeback",
                        "unevictable",
                        "pgpgin",
                        "total_unevictable",
                        "pgmajfault",
                        "total_rss",
                        "total_rss_huge",
                        "total_writeback",
                        "total_inactive_anon",
                        "rss_huge",
                        "hierarchical_memory_limit",
                        "hierarchical_memsw_limit",
                        "total_pgfault",
                        "total_active_file",
                        "active_anon",
                        "total_active_anon",
                        "total_pgpgout",
                        "total_cache",
                        "inactive_anon",
                        "active_file",
                        "pgfault",
                        "inactive_file",
                        "total_pgpgin",
                    ];
                    _serde::Deserializer::deserialize_struct(
                        __deserializer,
                        "MemoryStat",
                        FIELDS,
                        __Visitor {
                            marker: _serde::__private::PhantomData::<MemoryStat>,
                            lifetime: _serde::__private::PhantomData,
                        },
                    )
                }
            }
        };
        pub struct CpuStats {
            pub cpu_usage: CpuUsage,
            pub system_cpu_usage: u64,
            pub throttling_data: ThrottlingData,
        }
        #[automatically_derived]
        impl ::core::clone::Clone for CpuStats {
            #[inline]
            fn clone(&self) -> CpuStats {
                CpuStats {
                    cpu_usage: ::core::clone::Clone::clone(&self.cpu_usage),
                    system_cpu_usage: ::core::clone::Clone::clone(
                        &self.system_cpu_usage,
                    ),
                    throttling_data: ::core::clone::Clone::clone(&self.throttling_data),
                }
            }
        }
        #[automatically_derived]
        impl ::core::fmt::Debug for CpuStats {
            #[inline]
            fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                ::core::fmt::Formatter::debug_struct_field3_finish(
                    f,
                    "CpuStats",
                    "cpu_usage",
                    &self.cpu_usage,
                    "system_cpu_usage",
                    &self.system_cpu_usage,
                    "throttling_data",
                    &&self.throttling_data,
                )
            }
        }
        #[doc(hidden)]
        #[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
        const _: () = {
            #[allow(unused_extern_crates, clippy::useless_attribute)]
            extern crate serde as _serde;
            #[automatically_derived]
            impl _serde::Serialize for CpuStats {
                fn serialize<__S>(
                    &self,
                    __serializer: __S,
                ) -> _serde::__private::Result<__S::Ok, __S::Error>
                where
                    __S: _serde::Serializer,
                {
                    let mut __serde_state = _serde::Serializer::serialize_struct(
                        __serializer,
                        "CpuStats",
                        false as usize + 1 + 1 + 1,
                    )?;
                    _serde::ser::SerializeStruct::serialize_field(
                        &mut __serde_state,
                        "cpu_usage",
                        &self.cpu_usage,
                    )?;
                    _serde::ser::SerializeStruct::serialize_field(
                        &mut __serde_state,
                        "system_cpu_usage",
                        &self.system_cpu_usage,
                    )?;
                    _serde::ser::SerializeStruct::serialize_field(
                        &mut __serde_state,
                        "throttling_data",
                        &self.throttling_data,
                    )?;
                    _serde::ser::SerializeStruct::end(__serde_state)
                }
            }
        };
        #[doc(hidden)]
        #[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
        const _: () = {
            #[allow(unused_extern_crates, clippy::useless_attribute)]
            extern crate serde as _serde;
            #[automatically_derived]
            impl<'de> _serde::Deserialize<'de> for CpuStats {
                fn deserialize<__D>(
                    __deserializer: __D,
                ) -> _serde::__private::Result<Self, __D::Error>
                where
                    __D: _serde::Deserializer<'de>,
                {
                    #[allow(non_camel_case_types)]
                    #[doc(hidden)]
                    enum __Field {
                        __field0,
                        __field1,
                        __field2,
                        __ignore,
                    }
                    #[doc(hidden)]
                    struct __FieldVisitor;
                    impl<'de> _serde::de::Visitor<'de> for __FieldVisitor {
                        type Value = __Field;
                        fn expecting(
                            &self,
                            __formatter: &mut _serde::__private::Formatter,
                        ) -> _serde::__private::fmt::Result {
                            _serde::__private::Formatter::write_str(
                                __formatter,
                                "field identifier",
                            )
                        }
                        fn visit_u64<__E>(
                            self,
                            __value: u64,
                        ) -> _serde::__private::Result<Self::Value, __E>
                        where
                            __E: _serde::de::Error,
                        {
                            match __value {
                                0u64 => _serde::__private::Ok(__Field::__field0),
                                1u64 => _serde::__private::Ok(__Field::__field1),
                                2u64 => _serde::__private::Ok(__Field::__field2),
                                _ => _serde::__private::Ok(__Field::__ignore),
                            }
                        }
                        fn visit_str<__E>(
                            self,
                            __value: &str,
                        ) -> _serde::__private::Result<Self::Value, __E>
                        where
                            __E: _serde::de::Error,
                        {
                            match __value {
                                "cpu_usage" => _serde::__private::Ok(__Field::__field0),
                                "system_cpu_usage" => {
                                    _serde::__private::Ok(__Field::__field1)
                                }
                                "throttling_data" => {
                                    _serde::__private::Ok(__Field::__field2)
                                }
                                _ => _serde::__private::Ok(__Field::__ignore),
                            }
                        }
                        fn visit_bytes<__E>(
                            self,
                            __value: &[u8],
                        ) -> _serde::__private::Result<Self::Value, __E>
                        where
                            __E: _serde::de::Error,
                        {
                            match __value {
                                b"cpu_usage" => _serde::__private::Ok(__Field::__field0),
                                b"system_cpu_usage" => {
                                    _serde::__private::Ok(__Field::__field1)
                                }
                                b"throttling_data" => {
                                    _serde::__private::Ok(__Field::__field2)
                                }
                                _ => _serde::__private::Ok(__Field::__ignore),
                            }
                        }
                    }
                    impl<'de> _serde::Deserialize<'de> for __Field {
                        #[inline]
                        fn deserialize<__D>(
                            __deserializer: __D,
                        ) -> _serde::__private::Result<Self, __D::Error>
                        where
                            __D: _serde::Deserializer<'de>,
                        {
                            _serde::Deserializer::deserialize_identifier(
                                __deserializer,
                                __FieldVisitor,
                            )
                        }
                    }
                    #[doc(hidden)]
                    struct __Visitor<'de> {
                        marker: _serde::__private::PhantomData<CpuStats>,
                        lifetime: _serde::__private::PhantomData<&'de ()>,
                    }
                    impl<'de> _serde::de::Visitor<'de> for __Visitor<'de> {
                        type Value = CpuStats;
                        fn expecting(
                            &self,
                            __formatter: &mut _serde::__private::Formatter,
                        ) -> _serde::__private::fmt::Result {
                            _serde::__private::Formatter::write_str(
                                __formatter,
                                "struct CpuStats",
                            )
                        }
                        #[inline]
                        fn visit_seq<__A>(
                            self,
                            mut __seq: __A,
                        ) -> _serde::__private::Result<Self::Value, __A::Error>
                        where
                            __A: _serde::de::SeqAccess<'de>,
                        {
                            let __field0 = match _serde::de::SeqAccess::next_element::<
                                CpuUsage,
                            >(&mut __seq)? {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            0usize,
                                            &"struct CpuStats with 3 elements",
                                        ),
                                    );
                                }
                            };
                            let __field1 = match _serde::de::SeqAccess::next_element::<
                                u64,
                            >(&mut __seq)? {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            1usize,
                                            &"struct CpuStats with 3 elements",
                                        ),
                                    );
                                }
                            };
                            let __field2 = match _serde::de::SeqAccess::next_element::<
                                ThrottlingData,
                            >(&mut __seq)? {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            2usize,
                                            &"struct CpuStats with 3 elements",
                                        ),
                                    );
                                }
                            };
                            _serde::__private::Ok(CpuStats {
                                cpu_usage: __field0,
                                system_cpu_usage: __field1,
                                throttling_data: __field2,
                            })
                        }
                        #[inline]
                        fn visit_map<__A>(
                            self,
                            mut __map: __A,
                        ) -> _serde::__private::Result<Self::Value, __A::Error>
                        where
                            __A: _serde::de::MapAccess<'de>,
                        {
                            let mut __field0: _serde::__private::Option<CpuUsage> = _serde::__private::None;
                            let mut __field1: _serde::__private::Option<u64> = _serde::__private::None;
                            let mut __field2: _serde::__private::Option<
                                ThrottlingData,
                            > = _serde::__private::None;
                            while let _serde::__private::Some(__key) = _serde::de::MapAccess::next_key::<
                                __Field,
                            >(&mut __map)? {
                                match __key {
                                    __Field::__field0 => {
                                        if _serde::__private::Option::is_some(&__field0) {
                                            return _serde::__private::Err(
                                                <__A::Error as _serde::de::Error>::duplicate_field(
                                                    "cpu_usage",
                                                ),
                                            );
                                        }
                                        __field0 = _serde::__private::Some(
                                            _serde::de::MapAccess::next_value::<CpuUsage>(&mut __map)?,
                                        );
                                    }
                                    __Field::__field1 => {
                                        if _serde::__private::Option::is_some(&__field1) {
                                            return _serde::__private::Err(
                                                <__A::Error as _serde::de::Error>::duplicate_field(
                                                    "system_cpu_usage",
                                                ),
                                            );
                                        }
                                        __field1 = _serde::__private::Some(
                                            _serde::de::MapAccess::next_value::<u64>(&mut __map)?,
                                        );
                                    }
                                    __Field::__field2 => {
                                        if _serde::__private::Option::is_some(&__field2) {
                                            return _serde::__private::Err(
                                                <__A::Error as _serde::de::Error>::duplicate_field(
                                                    "throttling_data",
                                                ),
                                            );
                                        }
                                        __field2 = _serde::__private::Some(
                                            _serde::de::MapAccess::next_value::<
                                                ThrottlingData,
                                            >(&mut __map)?,
                                        );
                                    }
                                    _ => {
                                        let _ = _serde::de::MapAccess::next_value::<
                                            _serde::de::IgnoredAny,
                                        >(&mut __map)?;
                                    }
                                }
                            }
                            let __field0 = match __field0 {
                                _serde::__private::Some(__field0) => __field0,
                                _serde::__private::None => {
                                    _serde::__private::de::missing_field("cpu_usage")?
                                }
                            };
                            let __field1 = match __field1 {
                                _serde::__private::Some(__field1) => __field1,
                                _serde::__private::None => {
                                    _serde::__private::de::missing_field("system_cpu_usage")?
                                }
                            };
                            let __field2 = match __field2 {
                                _serde::__private::Some(__field2) => __field2,
                                _serde::__private::None => {
                                    _serde::__private::de::missing_field("throttling_data")?
                                }
                            };
                            _serde::__private::Ok(CpuStats {
                                cpu_usage: __field0,
                                system_cpu_usage: __field1,
                                throttling_data: __field2,
                            })
                        }
                    }
                    #[doc(hidden)]
                    const FIELDS: &'static [&'static str] = &[
                        "cpu_usage",
                        "system_cpu_usage",
                        "throttling_data",
                    ];
                    _serde::Deserializer::deserialize_struct(
                        __deserializer,
                        "CpuStats",
                        FIELDS,
                        __Visitor {
                            marker: _serde::__private::PhantomData::<CpuStats>,
                            lifetime: _serde::__private::PhantomData,
                        },
                    )
                }
            }
        };
        pub struct CpuUsage {
            pub percpu_usage: Vec<u64>,
            pub usage_in_usermode: u64,
            pub total_usage: u64,
            pub usage_in_kernelmode: u64,
        }
        #[automatically_derived]
        impl ::core::clone::Clone for CpuUsage {
            #[inline]
            fn clone(&self) -> CpuUsage {
                CpuUsage {
                    percpu_usage: ::core::clone::Clone::clone(&self.percpu_usage),
                    usage_in_usermode: ::core::clone::Clone::clone(
                        &self.usage_in_usermode,
                    ),
                    total_usage: ::core::clone::Clone::clone(&self.total_usage),
                    usage_in_kernelmode: ::core::clone::Clone::clone(
                        &self.usage_in_kernelmode,
                    ),
                }
            }
        }
        #[automatically_derived]
        impl ::core::fmt::Debug for CpuUsage {
            #[inline]
            fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                ::core::fmt::Formatter::debug_struct_field4_finish(
                    f,
                    "CpuUsage",
                    "percpu_usage",
                    &self.percpu_usage,
                    "usage_in_usermode",
                    &self.usage_in_usermode,
                    "total_usage",
                    &self.total_usage,
                    "usage_in_kernelmode",
                    &&self.usage_in_kernelmode,
                )
            }
        }
        #[doc(hidden)]
        #[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
        const _: () = {
            #[allow(unused_extern_crates, clippy::useless_attribute)]
            extern crate serde as _serde;
            #[automatically_derived]
            impl _serde::Serialize for CpuUsage {
                fn serialize<__S>(
                    &self,
                    __serializer: __S,
                ) -> _serde::__private::Result<__S::Ok, __S::Error>
                where
                    __S: _serde::Serializer,
                {
                    let mut __serde_state = _serde::Serializer::serialize_struct(
                        __serializer,
                        "CpuUsage",
                        false as usize + 1 + 1 + 1 + 1,
                    )?;
                    _serde::ser::SerializeStruct::serialize_field(
                        &mut __serde_state,
                        "percpu_usage",
                        &self.percpu_usage,
                    )?;
                    _serde::ser::SerializeStruct::serialize_field(
                        &mut __serde_state,
                        "usage_in_usermode",
                        &self.usage_in_usermode,
                    )?;
                    _serde::ser::SerializeStruct::serialize_field(
                        &mut __serde_state,
                        "total_usage",
                        &self.total_usage,
                    )?;
                    _serde::ser::SerializeStruct::serialize_field(
                        &mut __serde_state,
                        "usage_in_kernelmode",
                        &self.usage_in_kernelmode,
                    )?;
                    _serde::ser::SerializeStruct::end(__serde_state)
                }
            }
        };
        #[doc(hidden)]
        #[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
        const _: () = {
            #[allow(unused_extern_crates, clippy::useless_attribute)]
            extern crate serde as _serde;
            #[automatically_derived]
            impl<'de> _serde::Deserialize<'de> for CpuUsage {
                fn deserialize<__D>(
                    __deserializer: __D,
                ) -> _serde::__private::Result<Self, __D::Error>
                where
                    __D: _serde::Deserializer<'de>,
                {
                    #[allow(non_camel_case_types)]
                    #[doc(hidden)]
                    enum __Field {
                        __field0,
                        __field1,
                        __field2,
                        __field3,
                        __ignore,
                    }
                    #[doc(hidden)]
                    struct __FieldVisitor;
                    impl<'de> _serde::de::Visitor<'de> for __FieldVisitor {
                        type Value = __Field;
                        fn expecting(
                            &self,
                            __formatter: &mut _serde::__private::Formatter,
                        ) -> _serde::__private::fmt::Result {
                            _serde::__private::Formatter::write_str(
                                __formatter,
                                "field identifier",
                            )
                        }
                        fn visit_u64<__E>(
                            self,
                            __value: u64,
                        ) -> _serde::__private::Result<Self::Value, __E>
                        where
                            __E: _serde::de::Error,
                        {
                            match __value {
                                0u64 => _serde::__private::Ok(__Field::__field0),
                                1u64 => _serde::__private::Ok(__Field::__field1),
                                2u64 => _serde::__private::Ok(__Field::__field2),
                                3u64 => _serde::__private::Ok(__Field::__field3),
                                _ => _serde::__private::Ok(__Field::__ignore),
                            }
                        }
                        fn visit_str<__E>(
                            self,
                            __value: &str,
                        ) -> _serde::__private::Result<Self::Value, __E>
                        where
                            __E: _serde::de::Error,
                        {
                            match __value {
                                "percpu_usage" => _serde::__private::Ok(__Field::__field0),
                                "usage_in_usermode" => {
                                    _serde::__private::Ok(__Field::__field1)
                                }
                                "total_usage" => _serde::__private::Ok(__Field::__field2),
                                "usage_in_kernelmode" => {
                                    _serde::__private::Ok(__Field::__field3)
                                }
                                _ => _serde::__private::Ok(__Field::__ignore),
                            }
                        }
                        fn visit_bytes<__E>(
                            self,
                            __value: &[u8],
                        ) -> _serde::__private::Result<Self::Value, __E>
                        where
                            __E: _serde::de::Error,
                        {
                            match __value {
                                b"percpu_usage" => _serde::__private::Ok(__Field::__field0),
                                b"usage_in_usermode" => {
                                    _serde::__private::Ok(__Field::__field1)
                                }
                                b"total_usage" => _serde::__private::Ok(__Field::__field2),
                                b"usage_in_kernelmode" => {
                                    _serde::__private::Ok(__Field::__field3)
                                }
                                _ => _serde::__private::Ok(__Field::__ignore),
                            }
                        }
                    }
                    impl<'de> _serde::Deserialize<'de> for __Field {
                        #[inline]
                        fn deserialize<__D>(
                            __deserializer: __D,
                        ) -> _serde::__private::Result<Self, __D::Error>
                        where
                            __D: _serde::Deserializer<'de>,
                        {
                            _serde::Deserializer::deserialize_identifier(
                                __deserializer,
                                __FieldVisitor,
                            )
                        }
                    }
                    #[doc(hidden)]
                    struct __Visitor<'de> {
                        marker: _serde::__private::PhantomData<CpuUsage>,
                        lifetime: _serde::__private::PhantomData<&'de ()>,
                    }
                    impl<'de> _serde::de::Visitor<'de> for __Visitor<'de> {
                        type Value = CpuUsage;
                        fn expecting(
                            &self,
                            __formatter: &mut _serde::__private::Formatter,
                        ) -> _serde::__private::fmt::Result {
                            _serde::__private::Formatter::write_str(
                                __formatter,
                                "struct CpuUsage",
                            )
                        }
                        #[inline]
                        fn visit_seq<__A>(
                            self,
                            mut __seq: __A,
                        ) -> _serde::__private::Result<Self::Value, __A::Error>
                        where
                            __A: _serde::de::SeqAccess<'de>,
                        {
                            let __field0 = match _serde::de::SeqAccess::next_element::<
                                Vec<u64>,
                            >(&mut __seq)? {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            0usize,
                                            &"struct CpuUsage with 4 elements",
                                        ),
                                    );
                                }
                            };
                            let __field1 = match _serde::de::SeqAccess::next_element::<
                                u64,
                            >(&mut __seq)? {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            1usize,
                                            &"struct CpuUsage with 4 elements",
                                        ),
                                    );
                                }
                            };
                            let __field2 = match _serde::de::SeqAccess::next_element::<
                                u64,
                            >(&mut __seq)? {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            2usize,
                                            &"struct CpuUsage with 4 elements",
                                        ),
                                    );
                                }
                            };
                            let __field3 = match _serde::de::SeqAccess::next_element::<
                                u64,
                            >(&mut __seq)? {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            3usize,
                                            &"struct CpuUsage with 4 elements",
                                        ),
                                    );
                                }
                            };
                            _serde::__private::Ok(CpuUsage {
                                percpu_usage: __field0,
                                usage_in_usermode: __field1,
                                total_usage: __field2,
                                usage_in_kernelmode: __field3,
                            })
                        }
                        #[inline]
                        fn visit_map<__A>(
                            self,
                            mut __map: __A,
                        ) -> _serde::__private::Result<Self::Value, __A::Error>
                        where
                            __A: _serde::de::MapAccess<'de>,
                        {
                            let mut __field0: _serde::__private::Option<Vec<u64>> = _serde::__private::None;
                            let mut __field1: _serde::__private::Option<u64> = _serde::__private::None;
                            let mut __field2: _serde::__private::Option<u64> = _serde::__private::None;
                            let mut __field3: _serde::__private::Option<u64> = _serde::__private::None;
                            while let _serde::__private::Some(__key) = _serde::de::MapAccess::next_key::<
                                __Field,
                            >(&mut __map)? {
                                match __key {
                                    __Field::__field0 => {
                                        if _serde::__private::Option::is_some(&__field0) {
                                            return _serde::__private::Err(
                                                <__A::Error as _serde::de::Error>::duplicate_field(
                                                    "percpu_usage",
                                                ),
                                            );
                                        }
                                        __field0 = _serde::__private::Some(
                                            _serde::de::MapAccess::next_value::<Vec<u64>>(&mut __map)?,
                                        );
                                    }
                                    __Field::__field1 => {
                                        if _serde::__private::Option::is_some(&__field1) {
                                            return _serde::__private::Err(
                                                <__A::Error as _serde::de::Error>::duplicate_field(
                                                    "usage_in_usermode",
                                                ),
                                            );
                                        }
                                        __field1 = _serde::__private::Some(
                                            _serde::de::MapAccess::next_value::<u64>(&mut __map)?,
                                        );
                                    }
                                    __Field::__field2 => {
                                        if _serde::__private::Option::is_some(&__field2) {
                                            return _serde::__private::Err(
                                                <__A::Error as _serde::de::Error>::duplicate_field(
                                                    "total_usage",
                                                ),
                                            );
                                        }
                                        __field2 = _serde::__private::Some(
                                            _serde::de::MapAccess::next_value::<u64>(&mut __map)?,
                                        );
                                    }
                                    __Field::__field3 => {
                                        if _serde::__private::Option::is_some(&__field3) {
                                            return _serde::__private::Err(
                                                <__A::Error as _serde::de::Error>::duplicate_field(
                                                    "usage_in_kernelmode",
                                                ),
                                            );
                                        }
                                        __field3 = _serde::__private::Some(
                                            _serde::de::MapAccess::next_value::<u64>(&mut __map)?,
                                        );
                                    }
                                    _ => {
                                        let _ = _serde::de::MapAccess::next_value::<
                                            _serde::de::IgnoredAny,
                                        >(&mut __map)?;
                                    }
                                }
                            }
                            let __field0 = match __field0 {
                                _serde::__private::Some(__field0) => __field0,
                                _serde::__private::None => {
                                    _serde::__private::de::missing_field("percpu_usage")?
                                }
                            };
                            let __field1 = match __field1 {
                                _serde::__private::Some(__field1) => __field1,
                                _serde::__private::None => {
                                    _serde::__private::de::missing_field("usage_in_usermode")?
                                }
                            };
                            let __field2 = match __field2 {
                                _serde::__private::Some(__field2) => __field2,
                                _serde::__private::None => {
                                    _serde::__private::de::missing_field("total_usage")?
                                }
                            };
                            let __field3 = match __field3 {
                                _serde::__private::Some(__field3) => __field3,
                                _serde::__private::None => {
                                    _serde::__private::de::missing_field("usage_in_kernelmode")?
                                }
                            };
                            _serde::__private::Ok(CpuUsage {
                                percpu_usage: __field0,
                                usage_in_usermode: __field1,
                                total_usage: __field2,
                                usage_in_kernelmode: __field3,
                            })
                        }
                    }
                    #[doc(hidden)]
                    const FIELDS: &'static [&'static str] = &[
                        "percpu_usage",
                        "usage_in_usermode",
                        "total_usage",
                        "usage_in_kernelmode",
                    ];
                    _serde::Deserializer::deserialize_struct(
                        __deserializer,
                        "CpuUsage",
                        FIELDS,
                        __Visitor {
                            marker: _serde::__private::PhantomData::<CpuUsage>,
                            lifetime: _serde::__private::PhantomData,
                        },
                    )
                }
            }
        };
        pub struct ThrottlingData {
            pub periods: u64,
            pub throttled_periods: u64,
            pub throttled_time: u64,
        }
        #[automatically_derived]
        impl ::core::clone::Clone for ThrottlingData {
            #[inline]
            fn clone(&self) -> ThrottlingData {
                ThrottlingData {
                    periods: ::core::clone::Clone::clone(&self.periods),
                    throttled_periods: ::core::clone::Clone::clone(
                        &self.throttled_periods,
                    ),
                    throttled_time: ::core::clone::Clone::clone(&self.throttled_time),
                }
            }
        }
        #[automatically_derived]
        impl ::core::fmt::Debug for ThrottlingData {
            #[inline]
            fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                ::core::fmt::Formatter::debug_struct_field3_finish(
                    f,
                    "ThrottlingData",
                    "periods",
                    &self.periods,
                    "throttled_periods",
                    &self.throttled_periods,
                    "throttled_time",
                    &&self.throttled_time,
                )
            }
        }
        #[doc(hidden)]
        #[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
        const _: () = {
            #[allow(unused_extern_crates, clippy::useless_attribute)]
            extern crate serde as _serde;
            #[automatically_derived]
            impl _serde::Serialize for ThrottlingData {
                fn serialize<__S>(
                    &self,
                    __serializer: __S,
                ) -> _serde::__private::Result<__S::Ok, __S::Error>
                where
                    __S: _serde::Serializer,
                {
                    let mut __serde_state = _serde::Serializer::serialize_struct(
                        __serializer,
                        "ThrottlingData",
                        false as usize + 1 + 1 + 1,
                    )?;
                    _serde::ser::SerializeStruct::serialize_field(
                        &mut __serde_state,
                        "periods",
                        &self.periods,
                    )?;
                    _serde::ser::SerializeStruct::serialize_field(
                        &mut __serde_state,
                        "throttled_periods",
                        &self.throttled_periods,
                    )?;
                    _serde::ser::SerializeStruct::serialize_field(
                        &mut __serde_state,
                        "throttled_time",
                        &self.throttled_time,
                    )?;
                    _serde::ser::SerializeStruct::end(__serde_state)
                }
            }
        };
        #[doc(hidden)]
        #[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
        const _: () = {
            #[allow(unused_extern_crates, clippy::useless_attribute)]
            extern crate serde as _serde;
            #[automatically_derived]
            impl<'de> _serde::Deserialize<'de> for ThrottlingData {
                fn deserialize<__D>(
                    __deserializer: __D,
                ) -> _serde::__private::Result<Self, __D::Error>
                where
                    __D: _serde::Deserializer<'de>,
                {
                    #[allow(non_camel_case_types)]
                    #[doc(hidden)]
                    enum __Field {
                        __field0,
                        __field1,
                        __field2,
                        __ignore,
                    }
                    #[doc(hidden)]
                    struct __FieldVisitor;
                    impl<'de> _serde::de::Visitor<'de> for __FieldVisitor {
                        type Value = __Field;
                        fn expecting(
                            &self,
                            __formatter: &mut _serde::__private::Formatter,
                        ) -> _serde::__private::fmt::Result {
                            _serde::__private::Formatter::write_str(
                                __formatter,
                                "field identifier",
                            )
                        }
                        fn visit_u64<__E>(
                            self,
                            __value: u64,
                        ) -> _serde::__private::Result<Self::Value, __E>
                        where
                            __E: _serde::de::Error,
                        {
                            match __value {
                                0u64 => _serde::__private::Ok(__Field::__field0),
                                1u64 => _serde::__private::Ok(__Field::__field1),
                                2u64 => _serde::__private::Ok(__Field::__field2),
                                _ => _serde::__private::Ok(__Field::__ignore),
                            }
                        }
                        fn visit_str<__E>(
                            self,
                            __value: &str,
                        ) -> _serde::__private::Result<Self::Value, __E>
                        where
                            __E: _serde::de::Error,
                        {
                            match __value {
                                "periods" => _serde::__private::Ok(__Field::__field0),
                                "throttled_periods" => {
                                    _serde::__private::Ok(__Field::__field1)
                                }
                                "throttled_time" => _serde::__private::Ok(__Field::__field2),
                                _ => _serde::__private::Ok(__Field::__ignore),
                            }
                        }
                        fn visit_bytes<__E>(
                            self,
                            __value: &[u8],
                        ) -> _serde::__private::Result<Self::Value, __E>
                        where
                            __E: _serde::de::Error,
                        {
                            match __value {
                                b"periods" => _serde::__private::Ok(__Field::__field0),
                                b"throttled_periods" => {
                                    _serde::__private::Ok(__Field::__field1)
                                }
                                b"throttled_time" => {
                                    _serde::__private::Ok(__Field::__field2)
                                }
                                _ => _serde::__private::Ok(__Field::__ignore),
                            }
                        }
                    }
                    impl<'de> _serde::Deserialize<'de> for __Field {
                        #[inline]
                        fn deserialize<__D>(
                            __deserializer: __D,
                        ) -> _serde::__private::Result<Self, __D::Error>
                        where
                            __D: _serde::Deserializer<'de>,
                        {
                            _serde::Deserializer::deserialize_identifier(
                                __deserializer,
                                __FieldVisitor,
                            )
                        }
                    }
                    #[doc(hidden)]
                    struct __Visitor<'de> {
                        marker: _serde::__private::PhantomData<ThrottlingData>,
                        lifetime: _serde::__private::PhantomData<&'de ()>,
                    }
                    impl<'de> _serde::de::Visitor<'de> for __Visitor<'de> {
                        type Value = ThrottlingData;
                        fn expecting(
                            &self,
                            __formatter: &mut _serde::__private::Formatter,
                        ) -> _serde::__private::fmt::Result {
                            _serde::__private::Formatter::write_str(
                                __formatter,
                                "struct ThrottlingData",
                            )
                        }
                        #[inline]
                        fn visit_seq<__A>(
                            self,
                            mut __seq: __A,
                        ) -> _serde::__private::Result<Self::Value, __A::Error>
                        where
                            __A: _serde::de::SeqAccess<'de>,
                        {
                            let __field0 = match _serde::de::SeqAccess::next_element::<
                                u64,
                            >(&mut __seq)? {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            0usize,
                                            &"struct ThrottlingData with 3 elements",
                                        ),
                                    );
                                }
                            };
                            let __field1 = match _serde::de::SeqAccess::next_element::<
                                u64,
                            >(&mut __seq)? {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            1usize,
                                            &"struct ThrottlingData with 3 elements",
                                        ),
                                    );
                                }
                            };
                            let __field2 = match _serde::de::SeqAccess::next_element::<
                                u64,
                            >(&mut __seq)? {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            2usize,
                                            &"struct ThrottlingData with 3 elements",
                                        ),
                                    );
                                }
                            };
                            _serde::__private::Ok(ThrottlingData {
                                periods: __field0,
                                throttled_periods: __field1,
                                throttled_time: __field2,
                            })
                        }
                        #[inline]
                        fn visit_map<__A>(
                            self,
                            mut __map: __A,
                        ) -> _serde::__private::Result<Self::Value, __A::Error>
                        where
                            __A: _serde::de::MapAccess<'de>,
                        {
                            let mut __field0: _serde::__private::Option<u64> = _serde::__private::None;
                            let mut __field1: _serde::__private::Option<u64> = _serde::__private::None;
                            let mut __field2: _serde::__private::Option<u64> = _serde::__private::None;
                            while let _serde::__private::Some(__key) = _serde::de::MapAccess::next_key::<
                                __Field,
                            >(&mut __map)? {
                                match __key {
                                    __Field::__field0 => {
                                        if _serde::__private::Option::is_some(&__field0) {
                                            return _serde::__private::Err(
                                                <__A::Error as _serde::de::Error>::duplicate_field(
                                                    "periods",
                                                ),
                                            );
                                        }
                                        __field0 = _serde::__private::Some(
                                            _serde::de::MapAccess::next_value::<u64>(&mut __map)?,
                                        );
                                    }
                                    __Field::__field1 => {
                                        if _serde::__private::Option::is_some(&__field1) {
                                            return _serde::__private::Err(
                                                <__A::Error as _serde::de::Error>::duplicate_field(
                                                    "throttled_periods",
                                                ),
                                            );
                                        }
                                        __field1 = _serde::__private::Some(
                                            _serde::de::MapAccess::next_value::<u64>(&mut __map)?,
                                        );
                                    }
                                    __Field::__field2 => {
                                        if _serde::__private::Option::is_some(&__field2) {
                                            return _serde::__private::Err(
                                                <__A::Error as _serde::de::Error>::duplicate_field(
                                                    "throttled_time",
                                                ),
                                            );
                                        }
                                        __field2 = _serde::__private::Some(
                                            _serde::de::MapAccess::next_value::<u64>(&mut __map)?,
                                        );
                                    }
                                    _ => {
                                        let _ = _serde::de::MapAccess::next_value::<
                                            _serde::de::IgnoredAny,
                                        >(&mut __map)?;
                                    }
                                }
                            }
                            let __field0 = match __field0 {
                                _serde::__private::Some(__field0) => __field0,
                                _serde::__private::None => {
                                    _serde::__private::de::missing_field("periods")?
                                }
                            };
                            let __field1 = match __field1 {
                                _serde::__private::Some(__field1) => __field1,
                                _serde::__private::None => {
                                    _serde::__private::de::missing_field("throttled_periods")?
                                }
                            };
                            let __field2 = match __field2 {
                                _serde::__private::Some(__field2) => __field2,
                                _serde::__private::None => {
                                    _serde::__private::de::missing_field("throttled_time")?
                                }
                            };
                            _serde::__private::Ok(ThrottlingData {
                                periods: __field0,
                                throttled_periods: __field1,
                                throttled_time: __field2,
                            })
                        }
                    }
                    #[doc(hidden)]
                    const FIELDS: &'static [&'static str] = &[
                        "periods",
                        "throttled_periods",
                        "throttled_time",
                    ];
                    _serde::Deserializer::deserialize_struct(
                        __deserializer,
                        "ThrottlingData",
                        FIELDS,
                        __Visitor {
                            marker: _serde::__private::PhantomData::<ThrottlingData>,
                            lifetime: _serde::__private::PhantomData,
                        },
                    )
                }
            }
        };
        pub struct BlkioStats {
            pub io_service_bytes_recursive: Vec<BlkioStat>,
            pub io_serviced_recursive: Vec<BlkioStat>,
            pub io_queue_recursive: Vec<BlkioStat>,
            pub io_service_time_recursive: Vec<BlkioStat>,
            pub io_wait_time_recursive: Vec<BlkioStat>,
            pub io_merged_recursive: Vec<BlkioStat>,
            pub io_time_recursive: Vec<BlkioStat>,
            pub sectors_recursive: Vec<BlkioStat>,
        }
        #[automatically_derived]
        impl ::core::clone::Clone for BlkioStats {
            #[inline]
            fn clone(&self) -> BlkioStats {
                BlkioStats {
                    io_service_bytes_recursive: ::core::clone::Clone::clone(
                        &self.io_service_bytes_recursive,
                    ),
                    io_serviced_recursive: ::core::clone::Clone::clone(
                        &self.io_serviced_recursive,
                    ),
                    io_queue_recursive: ::core::clone::Clone::clone(
                        &self.io_queue_recursive,
                    ),
                    io_service_time_recursive: ::core::clone::Clone::clone(
                        &self.io_service_time_recursive,
                    ),
                    io_wait_time_recursive: ::core::clone::Clone::clone(
                        &self.io_wait_time_recursive,
                    ),
                    io_merged_recursive: ::core::clone::Clone::clone(
                        &self.io_merged_recursive,
                    ),
                    io_time_recursive: ::core::clone::Clone::clone(
                        &self.io_time_recursive,
                    ),
                    sectors_recursive: ::core::clone::Clone::clone(
                        &self.sectors_recursive,
                    ),
                }
            }
        }
        #[automatically_derived]
        impl ::core::fmt::Debug for BlkioStats {
            #[inline]
            fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                let names: &'static _ = &[
                    "io_service_bytes_recursive",
                    "io_serviced_recursive",
                    "io_queue_recursive",
                    "io_service_time_recursive",
                    "io_wait_time_recursive",
                    "io_merged_recursive",
                    "io_time_recursive",
                    "sectors_recursive",
                ];
                let values: &[&dyn ::core::fmt::Debug] = &[
                    &self.io_service_bytes_recursive,
                    &self.io_serviced_recursive,
                    &self.io_queue_recursive,
                    &self.io_service_time_recursive,
                    &self.io_wait_time_recursive,
                    &self.io_merged_recursive,
                    &self.io_time_recursive,
                    &&self.sectors_recursive,
                ];
                ::core::fmt::Formatter::debug_struct_fields_finish(
                    f,
                    "BlkioStats",
                    names,
                    values,
                )
            }
        }
        #[doc(hidden)]
        #[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
        const _: () = {
            #[allow(unused_extern_crates, clippy::useless_attribute)]
            extern crate serde as _serde;
            #[automatically_derived]
            impl _serde::Serialize for BlkioStats {
                fn serialize<__S>(
                    &self,
                    __serializer: __S,
                ) -> _serde::__private::Result<__S::Ok, __S::Error>
                where
                    __S: _serde::Serializer,
                {
                    let mut __serde_state = _serde::Serializer::serialize_struct(
                        __serializer,
                        "BlkioStats",
                        false as usize + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1,
                    )?;
                    _serde::ser::SerializeStruct::serialize_field(
                        &mut __serde_state,
                        "io_service_bytes_recursive",
                        &self.io_service_bytes_recursive,
                    )?;
                    _serde::ser::SerializeStruct::serialize_field(
                        &mut __serde_state,
                        "io_serviced_recursive",
                        &self.io_serviced_recursive,
                    )?;
                    _serde::ser::SerializeStruct::serialize_field(
                        &mut __serde_state,
                        "io_queue_recursive",
                        &self.io_queue_recursive,
                    )?;
                    _serde::ser::SerializeStruct::serialize_field(
                        &mut __serde_state,
                        "io_service_time_recursive",
                        &self.io_service_time_recursive,
                    )?;
                    _serde::ser::SerializeStruct::serialize_field(
                        &mut __serde_state,
                        "io_wait_time_recursive",
                        &self.io_wait_time_recursive,
                    )?;
                    _serde::ser::SerializeStruct::serialize_field(
                        &mut __serde_state,
                        "io_merged_recursive",
                        &self.io_merged_recursive,
                    )?;
                    _serde::ser::SerializeStruct::serialize_field(
                        &mut __serde_state,
                        "io_time_recursive",
                        &self.io_time_recursive,
                    )?;
                    _serde::ser::SerializeStruct::serialize_field(
                        &mut __serde_state,
                        "sectors_recursive",
                        &self.sectors_recursive,
                    )?;
                    _serde::ser::SerializeStruct::end(__serde_state)
                }
            }
        };
        #[doc(hidden)]
        #[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
        const _: () = {
            #[allow(unused_extern_crates, clippy::useless_attribute)]
            extern crate serde as _serde;
            #[automatically_derived]
            impl<'de> _serde::Deserialize<'de> for BlkioStats {
                fn deserialize<__D>(
                    __deserializer: __D,
                ) -> _serde::__private::Result<Self, __D::Error>
                where
                    __D: _serde::Deserializer<'de>,
                {
                    #[allow(non_camel_case_types)]
                    #[doc(hidden)]
                    enum __Field {
                        __field0,
                        __field1,
                        __field2,
                        __field3,
                        __field4,
                        __field5,
                        __field6,
                        __field7,
                        __ignore,
                    }
                    #[doc(hidden)]
                    struct __FieldVisitor;
                    impl<'de> _serde::de::Visitor<'de> for __FieldVisitor {
                        type Value = __Field;
                        fn expecting(
                            &self,
                            __formatter: &mut _serde::__private::Formatter,
                        ) -> _serde::__private::fmt::Result {
                            _serde::__private::Formatter::write_str(
                                __formatter,
                                "field identifier",
                            )
                        }
                        fn visit_u64<__E>(
                            self,
                            __value: u64,
                        ) -> _serde::__private::Result<Self::Value, __E>
                        where
                            __E: _serde::de::Error,
                        {
                            match __value {
                                0u64 => _serde::__private::Ok(__Field::__field0),
                                1u64 => _serde::__private::Ok(__Field::__field1),
                                2u64 => _serde::__private::Ok(__Field::__field2),
                                3u64 => _serde::__private::Ok(__Field::__field3),
                                4u64 => _serde::__private::Ok(__Field::__field4),
                                5u64 => _serde::__private::Ok(__Field::__field5),
                                6u64 => _serde::__private::Ok(__Field::__field6),
                                7u64 => _serde::__private::Ok(__Field::__field7),
                                _ => _serde::__private::Ok(__Field::__ignore),
                            }
                        }
                        fn visit_str<__E>(
                            self,
                            __value: &str,
                        ) -> _serde::__private::Result<Self::Value, __E>
                        where
                            __E: _serde::de::Error,
                        {
                            match __value {
                                "io_service_bytes_recursive" => {
                                    _serde::__private::Ok(__Field::__field0)
                                }
                                "io_serviced_recursive" => {
                                    _serde::__private::Ok(__Field::__field1)
                                }
                                "io_queue_recursive" => {
                                    _serde::__private::Ok(__Field::__field2)
                                }
                                "io_service_time_recursive" => {
                                    _serde::__private::Ok(__Field::__field3)
                                }
                                "io_wait_time_recursive" => {
                                    _serde::__private::Ok(__Field::__field4)
                                }
                                "io_merged_recursive" => {
                                    _serde::__private::Ok(__Field::__field5)
                                }
                                "io_time_recursive" => {
                                    _serde::__private::Ok(__Field::__field6)
                                }
                                "sectors_recursive" => {
                                    _serde::__private::Ok(__Field::__field7)
                                }
                                _ => _serde::__private::Ok(__Field::__ignore),
                            }
                        }
                        fn visit_bytes<__E>(
                            self,
                            __value: &[u8],
                        ) -> _serde::__private::Result<Self::Value, __E>
                        where
                            __E: _serde::de::Error,
                        {
                            match __value {
                                b"io_service_bytes_recursive" => {
                                    _serde::__private::Ok(__Field::__field0)
                                }
                                b"io_serviced_recursive" => {
                                    _serde::__private::Ok(__Field::__field1)
                                }
                                b"io_queue_recursive" => {
                                    _serde::__private::Ok(__Field::__field2)
                                }
                                b"io_service_time_recursive" => {
                                    _serde::__private::Ok(__Field::__field3)
                                }
                                b"io_wait_time_recursive" => {
                                    _serde::__private::Ok(__Field::__field4)
                                }
                                b"io_merged_recursive" => {
                                    _serde::__private::Ok(__Field::__field5)
                                }
                                b"io_time_recursive" => {
                                    _serde::__private::Ok(__Field::__field6)
                                }
                                b"sectors_recursive" => {
                                    _serde::__private::Ok(__Field::__field7)
                                }
                                _ => _serde::__private::Ok(__Field::__ignore),
                            }
                        }
                    }
                    impl<'de> _serde::Deserialize<'de> for __Field {
                        #[inline]
                        fn deserialize<__D>(
                            __deserializer: __D,
                        ) -> _serde::__private::Result<Self, __D::Error>
                        where
                            __D: _serde::Deserializer<'de>,
                        {
                            _serde::Deserializer::deserialize_identifier(
                                __deserializer,
                                __FieldVisitor,
                            )
                        }
                    }
                    #[doc(hidden)]
                    struct __Visitor<'de> {
                        marker: _serde::__private::PhantomData<BlkioStats>,
                        lifetime: _serde::__private::PhantomData<&'de ()>,
                    }
                    impl<'de> _serde::de::Visitor<'de> for __Visitor<'de> {
                        type Value = BlkioStats;
                        fn expecting(
                            &self,
                            __formatter: &mut _serde::__private::Formatter,
                        ) -> _serde::__private::fmt::Result {
                            _serde::__private::Formatter::write_str(
                                __formatter,
                                "struct BlkioStats",
                            )
                        }
                        #[inline]
                        fn visit_seq<__A>(
                            self,
                            mut __seq: __A,
                        ) -> _serde::__private::Result<Self::Value, __A::Error>
                        where
                            __A: _serde::de::SeqAccess<'de>,
                        {
                            let __field0 = match _serde::de::SeqAccess::next_element::<
                                Vec<BlkioStat>,
                            >(&mut __seq)? {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            0usize,
                                            &"struct BlkioStats with 8 elements",
                                        ),
                                    );
                                }
                            };
                            let __field1 = match _serde::de::SeqAccess::next_element::<
                                Vec<BlkioStat>,
                            >(&mut __seq)? {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            1usize,
                                            &"struct BlkioStats with 8 elements",
                                        ),
                                    );
                                }
                            };
                            let __field2 = match _serde::de::SeqAccess::next_element::<
                                Vec<BlkioStat>,
                            >(&mut __seq)? {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            2usize,
                                            &"struct BlkioStats with 8 elements",
                                        ),
                                    );
                                }
                            };
                            let __field3 = match _serde::de::SeqAccess::next_element::<
                                Vec<BlkioStat>,
                            >(&mut __seq)? {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            3usize,
                                            &"struct BlkioStats with 8 elements",
                                        ),
                                    );
                                }
                            };
                            let __field4 = match _serde::de::SeqAccess::next_element::<
                                Vec<BlkioStat>,
                            >(&mut __seq)? {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            4usize,
                                            &"struct BlkioStats with 8 elements",
                                        ),
                                    );
                                }
                            };
                            let __field5 = match _serde::de::SeqAccess::next_element::<
                                Vec<BlkioStat>,
                            >(&mut __seq)? {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            5usize,
                                            &"struct BlkioStats with 8 elements",
                                        ),
                                    );
                                }
                            };
                            let __field6 = match _serde::de::SeqAccess::next_element::<
                                Vec<BlkioStat>,
                            >(&mut __seq)? {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            6usize,
                                            &"struct BlkioStats with 8 elements",
                                        ),
                                    );
                                }
                            };
                            let __field7 = match _serde::de::SeqAccess::next_element::<
                                Vec<BlkioStat>,
                            >(&mut __seq)? {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            7usize,
                                            &"struct BlkioStats with 8 elements",
                                        ),
                                    );
                                }
                            };
                            _serde::__private::Ok(BlkioStats {
                                io_service_bytes_recursive: __field0,
                                io_serviced_recursive: __field1,
                                io_queue_recursive: __field2,
                                io_service_time_recursive: __field3,
                                io_wait_time_recursive: __field4,
                                io_merged_recursive: __field5,
                                io_time_recursive: __field6,
                                sectors_recursive: __field7,
                            })
                        }
                        #[inline]
                        fn visit_map<__A>(
                            self,
                            mut __map: __A,
                        ) -> _serde::__private::Result<Self::Value, __A::Error>
                        where
                            __A: _serde::de::MapAccess<'de>,
                        {
                            let mut __field0: _serde::__private::Option<
                                Vec<BlkioStat>,
                            > = _serde::__private::None;
                            let mut __field1: _serde::__private::Option<
                                Vec<BlkioStat>,
                            > = _serde::__private::None;
                            let mut __field2: _serde::__private::Option<
                                Vec<BlkioStat>,
                            > = _serde::__private::None;
                            let mut __field3: _serde::__private::Option<
                                Vec<BlkioStat>,
                            > = _serde::__private::None;
                            let mut __field4: _serde::__private::Option<
                                Vec<BlkioStat>,
                            > = _serde::__private::None;
                            let mut __field5: _serde::__private::Option<
                                Vec<BlkioStat>,
                            > = _serde::__private::None;
                            let mut __field6: _serde::__private::Option<
                                Vec<BlkioStat>,
                            > = _serde::__private::None;
                            let mut __field7: _serde::__private::Option<
                                Vec<BlkioStat>,
                            > = _serde::__private::None;
                            while let _serde::__private::Some(__key) = _serde::de::MapAccess::next_key::<
                                __Field,
                            >(&mut __map)? {
                                match __key {
                                    __Field::__field0 => {
                                        if _serde::__private::Option::is_some(&__field0) {
                                            return _serde::__private::Err(
                                                <__A::Error as _serde::de::Error>::duplicate_field(
                                                    "io_service_bytes_recursive",
                                                ),
                                            );
                                        }
                                        __field0 = _serde::__private::Some(
                                            _serde::de::MapAccess::next_value::<
                                                Vec<BlkioStat>,
                                            >(&mut __map)?,
                                        );
                                    }
                                    __Field::__field1 => {
                                        if _serde::__private::Option::is_some(&__field1) {
                                            return _serde::__private::Err(
                                                <__A::Error as _serde::de::Error>::duplicate_field(
                                                    "io_serviced_recursive",
                                                ),
                                            );
                                        }
                                        __field1 = _serde::__private::Some(
                                            _serde::de::MapAccess::next_value::<
                                                Vec<BlkioStat>,
                                            >(&mut __map)?,
                                        );
                                    }
                                    __Field::__field2 => {
                                        if _serde::__private::Option::is_some(&__field2) {
                                            return _serde::__private::Err(
                                                <__A::Error as _serde::de::Error>::duplicate_field(
                                                    "io_queue_recursive",
                                                ),
                                            );
                                        }
                                        __field2 = _serde::__private::Some(
                                            _serde::de::MapAccess::next_value::<
                                                Vec<BlkioStat>,
                                            >(&mut __map)?,
                                        );
                                    }
                                    __Field::__field3 => {
                                        if _serde::__private::Option::is_some(&__field3) {
                                            return _serde::__private::Err(
                                                <__A::Error as _serde::de::Error>::duplicate_field(
                                                    "io_service_time_recursive",
                                                ),
                                            );
                                        }
                                        __field3 = _serde::__private::Some(
                                            _serde::de::MapAccess::next_value::<
                                                Vec<BlkioStat>,
                                            >(&mut __map)?,
                                        );
                                    }
                                    __Field::__field4 => {
                                        if _serde::__private::Option::is_some(&__field4) {
                                            return _serde::__private::Err(
                                                <__A::Error as _serde::de::Error>::duplicate_field(
                                                    "io_wait_time_recursive",
                                                ),
                                            );
                                        }
                                        __field4 = _serde::__private::Some(
                                            _serde::de::MapAccess::next_value::<
                                                Vec<BlkioStat>,
                                            >(&mut __map)?,
                                        );
                                    }
                                    __Field::__field5 => {
                                        if _serde::__private::Option::is_some(&__field5) {
                                            return _serde::__private::Err(
                                                <__A::Error as _serde::de::Error>::duplicate_field(
                                                    "io_merged_recursive",
                                                ),
                                            );
                                        }
                                        __field5 = _serde::__private::Some(
                                            _serde::de::MapAccess::next_value::<
                                                Vec<BlkioStat>,
                                            >(&mut __map)?,
                                        );
                                    }
                                    __Field::__field6 => {
                                        if _serde::__private::Option::is_some(&__field6) {
                                            return _serde::__private::Err(
                                                <__A::Error as _serde::de::Error>::duplicate_field(
                                                    "io_time_recursive",
                                                ),
                                            );
                                        }
                                        __field6 = _serde::__private::Some(
                                            _serde::de::MapAccess::next_value::<
                                                Vec<BlkioStat>,
                                            >(&mut __map)?,
                                        );
                                    }
                                    __Field::__field7 => {
                                        if _serde::__private::Option::is_some(&__field7) {
                                            return _serde::__private::Err(
                                                <__A::Error as _serde::de::Error>::duplicate_field(
                                                    "sectors_recursive",
                                                ),
                                            );
                                        }
                                        __field7 = _serde::__private::Some(
                                            _serde::de::MapAccess::next_value::<
                                                Vec<BlkioStat>,
                                            >(&mut __map)?,
                                        );
                                    }
                                    _ => {
                                        let _ = _serde::de::MapAccess::next_value::<
                                            _serde::de::IgnoredAny,
                                        >(&mut __map)?;
                                    }
                                }
                            }
                            let __field0 = match __field0 {
                                _serde::__private::Some(__field0) => __field0,
                                _serde::__private::None => {
                                    _serde::__private::de::missing_field(
                                        "io_service_bytes_recursive",
                                    )?
                                }
                            };
                            let __field1 = match __field1 {
                                _serde::__private::Some(__field1) => __field1,
                                _serde::__private::None => {
                                    _serde::__private::de::missing_field(
                                        "io_serviced_recursive",
                                    )?
                                }
                            };
                            let __field2 = match __field2 {
                                _serde::__private::Some(__field2) => __field2,
                                _serde::__private::None => {
                                    _serde::__private::de::missing_field("io_queue_recursive")?
                                }
                            };
                            let __field3 = match __field3 {
                                _serde::__private::Some(__field3) => __field3,
                                _serde::__private::None => {
                                    _serde::__private::de::missing_field(
                                        "io_service_time_recursive",
                                    )?
                                }
                            };
                            let __field4 = match __field4 {
                                _serde::__private::Some(__field4) => __field4,
                                _serde::__private::None => {
                                    _serde::__private::de::missing_field(
                                        "io_wait_time_recursive",
                                    )?
                                }
                            };
                            let __field5 = match __field5 {
                                _serde::__private::Some(__field5) => __field5,
                                _serde::__private::None => {
                                    _serde::__private::de::missing_field("io_merged_recursive")?
                                }
                            };
                            let __field6 = match __field6 {
                                _serde::__private::Some(__field6) => __field6,
                                _serde::__private::None => {
                                    _serde::__private::de::missing_field("io_time_recursive")?
                                }
                            };
                            let __field7 = match __field7 {
                                _serde::__private::Some(__field7) => __field7,
                                _serde::__private::None => {
                                    _serde::__private::de::missing_field("sectors_recursive")?
                                }
                            };
                            _serde::__private::Ok(BlkioStats {
                                io_service_bytes_recursive: __field0,
                                io_serviced_recursive: __field1,
                                io_queue_recursive: __field2,
                                io_service_time_recursive: __field3,
                                io_wait_time_recursive: __field4,
                                io_merged_recursive: __field5,
                                io_time_recursive: __field6,
                                sectors_recursive: __field7,
                            })
                        }
                    }
                    #[doc(hidden)]
                    const FIELDS: &'static [&'static str] = &[
                        "io_service_bytes_recursive",
                        "io_serviced_recursive",
                        "io_queue_recursive",
                        "io_service_time_recursive",
                        "io_wait_time_recursive",
                        "io_merged_recursive",
                        "io_time_recursive",
                        "sectors_recursive",
                    ];
                    _serde::Deserializer::deserialize_struct(
                        __deserializer,
                        "BlkioStats",
                        FIELDS,
                        __Visitor {
                            marker: _serde::__private::PhantomData::<BlkioStats>,
                            lifetime: _serde::__private::PhantomData,
                        },
                    )
                }
            }
        };
        pub struct BlkioStat {
            pub major: u64,
            pub minor: u64,
            pub op: String,
            pub value: u64,
        }
        #[automatically_derived]
        impl ::core::clone::Clone for BlkioStat {
            #[inline]
            fn clone(&self) -> BlkioStat {
                BlkioStat {
                    major: ::core::clone::Clone::clone(&self.major),
                    minor: ::core::clone::Clone::clone(&self.minor),
                    op: ::core::clone::Clone::clone(&self.op),
                    value: ::core::clone::Clone::clone(&self.value),
                }
            }
        }
        #[automatically_derived]
        impl ::core::fmt::Debug for BlkioStat {
            #[inline]
            fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                ::core::fmt::Formatter::debug_struct_field4_finish(
                    f,
                    "BlkioStat",
                    "major",
                    &self.major,
                    "minor",
                    &self.minor,
                    "op",
                    &self.op,
                    "value",
                    &&self.value,
                )
            }
        }
        #[doc(hidden)]
        #[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
        const _: () = {
            #[allow(unused_extern_crates, clippy::useless_attribute)]
            extern crate serde as _serde;
            #[automatically_derived]
            impl _serde::Serialize for BlkioStat {
                fn serialize<__S>(
                    &self,
                    __serializer: __S,
                ) -> _serde::__private::Result<__S::Ok, __S::Error>
                where
                    __S: _serde::Serializer,
                {
                    let mut __serde_state = _serde::Serializer::serialize_struct(
                        __serializer,
                        "BlkioStat",
                        false as usize + 1 + 1 + 1 + 1,
                    )?;
                    _serde::ser::SerializeStruct::serialize_field(
                        &mut __serde_state,
                        "major",
                        &self.major,
                    )?;
                    _serde::ser::SerializeStruct::serialize_field(
                        &mut __serde_state,
                        "minor",
                        &self.minor,
                    )?;
                    _serde::ser::SerializeStruct::serialize_field(
                        &mut __serde_state,
                        "op",
                        &self.op,
                    )?;
                    _serde::ser::SerializeStruct::serialize_field(
                        &mut __serde_state,
                        "value",
                        &self.value,
                    )?;
                    _serde::ser::SerializeStruct::end(__serde_state)
                }
            }
        };
        #[doc(hidden)]
        #[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
        const _: () = {
            #[allow(unused_extern_crates, clippy::useless_attribute)]
            extern crate serde as _serde;
            #[automatically_derived]
            impl<'de> _serde::Deserialize<'de> for BlkioStat {
                fn deserialize<__D>(
                    __deserializer: __D,
                ) -> _serde::__private::Result<Self, __D::Error>
                where
                    __D: _serde::Deserializer<'de>,
                {
                    #[allow(non_camel_case_types)]
                    #[doc(hidden)]
                    enum __Field {
                        __field0,
                        __field1,
                        __field2,
                        __field3,
                        __ignore,
                    }
                    #[doc(hidden)]
                    struct __FieldVisitor;
                    impl<'de> _serde::de::Visitor<'de> for __FieldVisitor {
                        type Value = __Field;
                        fn expecting(
                            &self,
                            __formatter: &mut _serde::__private::Formatter,
                        ) -> _serde::__private::fmt::Result {
                            _serde::__private::Formatter::write_str(
                                __formatter,
                                "field identifier",
                            )
                        }
                        fn visit_u64<__E>(
                            self,
                            __value: u64,
                        ) -> _serde::__private::Result<Self::Value, __E>
                        where
                            __E: _serde::de::Error,
                        {
                            match __value {
                                0u64 => _serde::__private::Ok(__Field::__field0),
                                1u64 => _serde::__private::Ok(__Field::__field1),
                                2u64 => _serde::__private::Ok(__Field::__field2),
                                3u64 => _serde::__private::Ok(__Field::__field3),
                                _ => _serde::__private::Ok(__Field::__ignore),
                            }
                        }
                        fn visit_str<__E>(
                            self,
                            __value: &str,
                        ) -> _serde::__private::Result<Self::Value, __E>
                        where
                            __E: _serde::de::Error,
                        {
                            match __value {
                                "major" => _serde::__private::Ok(__Field::__field0),
                                "minor" => _serde::__private::Ok(__Field::__field1),
                                "op" => _serde::__private::Ok(__Field::__field2),
                                "value" => _serde::__private::Ok(__Field::__field3),
                                _ => _serde::__private::Ok(__Field::__ignore),
                            }
                        }
                        fn visit_bytes<__E>(
                            self,
                            __value: &[u8],
                        ) -> _serde::__private::Result<Self::Value, __E>
                        where
                            __E: _serde::de::Error,
                        {
                            match __value {
                                b"major" => _serde::__private::Ok(__Field::__field0),
                                b"minor" => _serde::__private::Ok(__Field::__field1),
                                b"op" => _serde::__private::Ok(__Field::__field2),
                                b"value" => _serde::__private::Ok(__Field::__field3),
                                _ => _serde::__private::Ok(__Field::__ignore),
                            }
                        }
                    }
                    impl<'de> _serde::Deserialize<'de> for __Field {
                        #[inline]
                        fn deserialize<__D>(
                            __deserializer: __D,
                        ) -> _serde::__private::Result<Self, __D::Error>
                        where
                            __D: _serde::Deserializer<'de>,
                        {
                            _serde::Deserializer::deserialize_identifier(
                                __deserializer,
                                __FieldVisitor,
                            )
                        }
                    }
                    #[doc(hidden)]
                    struct __Visitor<'de> {
                        marker: _serde::__private::PhantomData<BlkioStat>,
                        lifetime: _serde::__private::PhantomData<&'de ()>,
                    }
                    impl<'de> _serde::de::Visitor<'de> for __Visitor<'de> {
                        type Value = BlkioStat;
                        fn expecting(
                            &self,
                            __formatter: &mut _serde::__private::Formatter,
                        ) -> _serde::__private::fmt::Result {
                            _serde::__private::Formatter::write_str(
                                __formatter,
                                "struct BlkioStat",
                            )
                        }
                        #[inline]
                        fn visit_seq<__A>(
                            self,
                            mut __seq: __A,
                        ) -> _serde::__private::Result<Self::Value, __A::Error>
                        where
                            __A: _serde::de::SeqAccess<'de>,
                        {
                            let __field0 = match _serde::de::SeqAccess::next_element::<
                                u64,
                            >(&mut __seq)? {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            0usize,
                                            &"struct BlkioStat with 4 elements",
                                        ),
                                    );
                                }
                            };
                            let __field1 = match _serde::de::SeqAccess::next_element::<
                                u64,
                            >(&mut __seq)? {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            1usize,
                                            &"struct BlkioStat with 4 elements",
                                        ),
                                    );
                                }
                            };
                            let __field2 = match _serde::de::SeqAccess::next_element::<
                                String,
                            >(&mut __seq)? {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            2usize,
                                            &"struct BlkioStat with 4 elements",
                                        ),
                                    );
                                }
                            };
                            let __field3 = match _serde::de::SeqAccess::next_element::<
                                u64,
                            >(&mut __seq)? {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            3usize,
                                            &"struct BlkioStat with 4 elements",
                                        ),
                                    );
                                }
                            };
                            _serde::__private::Ok(BlkioStat {
                                major: __field0,
                                minor: __field1,
                                op: __field2,
                                value: __field3,
                            })
                        }
                        #[inline]
                        fn visit_map<__A>(
                            self,
                            mut __map: __A,
                        ) -> _serde::__private::Result<Self::Value, __A::Error>
                        where
                            __A: _serde::de::MapAccess<'de>,
                        {
                            let mut __field0: _serde::__private::Option<u64> = _serde::__private::None;
                            let mut __field1: _serde::__private::Option<u64> = _serde::__private::None;
                            let mut __field2: _serde::__private::Option<String> = _serde::__private::None;
                            let mut __field3: _serde::__private::Option<u64> = _serde::__private::None;
                            while let _serde::__private::Some(__key) = _serde::de::MapAccess::next_key::<
                                __Field,
                            >(&mut __map)? {
                                match __key {
                                    __Field::__field0 => {
                                        if _serde::__private::Option::is_some(&__field0) {
                                            return _serde::__private::Err(
                                                <__A::Error as _serde::de::Error>::duplicate_field("major"),
                                            );
                                        }
                                        __field0 = _serde::__private::Some(
                                            _serde::de::MapAccess::next_value::<u64>(&mut __map)?,
                                        );
                                    }
                                    __Field::__field1 => {
                                        if _serde::__private::Option::is_some(&__field1) {
                                            return _serde::__private::Err(
                                                <__A::Error as _serde::de::Error>::duplicate_field("minor"),
                                            );
                                        }
                                        __field1 = _serde::__private::Some(
                                            _serde::de::MapAccess::next_value::<u64>(&mut __map)?,
                                        );
                                    }
                                    __Field::__field2 => {
                                        if _serde::__private::Option::is_some(&__field2) {
                                            return _serde::__private::Err(
                                                <__A::Error as _serde::de::Error>::duplicate_field("op"),
                                            );
                                        }
                                        __field2 = _serde::__private::Some(
                                            _serde::de::MapAccess::next_value::<String>(&mut __map)?,
                                        );
                                    }
                                    __Field::__field3 => {
                                        if _serde::__private::Option::is_some(&__field3) {
                                            return _serde::__private::Err(
                                                <__A::Error as _serde::de::Error>::duplicate_field("value"),
                                            );
                                        }
                                        __field3 = _serde::__private::Some(
                                            _serde::de::MapAccess::next_value::<u64>(&mut __map)?,
                                        );
                                    }
                                    _ => {
                                        let _ = _serde::de::MapAccess::next_value::<
                                            _serde::de::IgnoredAny,
                                        >(&mut __map)?;
                                    }
                                }
                            }
                            let __field0 = match __field0 {
                                _serde::__private::Some(__field0) => __field0,
                                _serde::__private::None => {
                                    _serde::__private::de::missing_field("major")?
                                }
                            };
                            let __field1 = match __field1 {
                                _serde::__private::Some(__field1) => __field1,
                                _serde::__private::None => {
                                    _serde::__private::de::missing_field("minor")?
                                }
                            };
                            let __field2 = match __field2 {
                                _serde::__private::Some(__field2) => __field2,
                                _serde::__private::None => {
                                    _serde::__private::de::missing_field("op")?
                                }
                            };
                            let __field3 = match __field3 {
                                _serde::__private::Some(__field3) => __field3,
                                _serde::__private::None => {
                                    _serde::__private::de::missing_field("value")?
                                }
                            };
                            _serde::__private::Ok(BlkioStat {
                                major: __field0,
                                minor: __field1,
                                op: __field2,
                                value: __field3,
                            })
                        }
                    }
                    #[doc(hidden)]
                    const FIELDS: &'static [&'static str] = &[
                        "major",
                        "minor",
                        "op",
                        "value",
                    ];
                    _serde::Deserializer::deserialize_struct(
                        __deserializer,
                        "BlkioStat",
                        FIELDS,
                        __Visitor {
                            marker: _serde::__private::PhantomData::<BlkioStat>,
                            lifetime: _serde::__private::PhantomData,
                        },
                    )
                }
            }
        };
        #[serde(rename_all = "PascalCase")]
        pub struct Change {
            pub kind: u64,
            pub path: String,
        }
        #[automatically_derived]
        impl ::core::clone::Clone for Change {
            #[inline]
            fn clone(&self) -> Change {
                Change {
                    kind: ::core::clone::Clone::clone(&self.kind),
                    path: ::core::clone::Clone::clone(&self.path),
                }
            }
        }
        #[automatically_derived]
        impl ::core::fmt::Debug for Change {
            #[inline]
            fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                ::core::fmt::Formatter::debug_struct_field2_finish(
                    f,
                    "Change",
                    "kind",
                    &self.kind,
                    "path",
                    &&self.path,
                )
            }
        }
        #[doc(hidden)]
        #[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
        const _: () = {
            #[allow(unused_extern_crates, clippy::useless_attribute)]
            extern crate serde as _serde;
            #[automatically_derived]
            impl _serde::Serialize for Change {
                fn serialize<__S>(
                    &self,
                    __serializer: __S,
                ) -> _serde::__private::Result<__S::Ok, __S::Error>
                where
                    __S: _serde::Serializer,
                {
                    let mut __serde_state = _serde::Serializer::serialize_struct(
                        __serializer,
                        "Change",
                        false as usize + 1 + 1,
                    )?;
                    _serde::ser::SerializeStruct::serialize_field(
                        &mut __serde_state,
                        "Kind",
                        &self.kind,
                    )?;
                    _serde::ser::SerializeStruct::serialize_field(
                        &mut __serde_state,
                        "Path",
                        &self.path,
                    )?;
                    _serde::ser::SerializeStruct::end(__serde_state)
                }
            }
        };
        #[doc(hidden)]
        #[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
        const _: () = {
            #[allow(unused_extern_crates, clippy::useless_attribute)]
            extern crate serde as _serde;
            #[automatically_derived]
            impl<'de> _serde::Deserialize<'de> for Change {
                fn deserialize<__D>(
                    __deserializer: __D,
                ) -> _serde::__private::Result<Self, __D::Error>
                where
                    __D: _serde::Deserializer<'de>,
                {
                    #[allow(non_camel_case_types)]
                    #[doc(hidden)]
                    enum __Field {
                        __field0,
                        __field1,
                        __ignore,
                    }
                    #[doc(hidden)]
                    struct __FieldVisitor;
                    impl<'de> _serde::de::Visitor<'de> for __FieldVisitor {
                        type Value = __Field;
                        fn expecting(
                            &self,
                            __formatter: &mut _serde::__private::Formatter,
                        ) -> _serde::__private::fmt::Result {
                            _serde::__private::Formatter::write_str(
                                __formatter,
                                "field identifier",
                            )
                        }
                        fn visit_u64<__E>(
                            self,
                            __value: u64,
                        ) -> _serde::__private::Result<Self::Value, __E>
                        where
                            __E: _serde::de::Error,
                        {
                            match __value {
                                0u64 => _serde::__private::Ok(__Field::__field0),
                                1u64 => _serde::__private::Ok(__Field::__field1),
                                _ => _serde::__private::Ok(__Field::__ignore),
                            }
                        }
                        fn visit_str<__E>(
                            self,
                            __value: &str,
                        ) -> _serde::__private::Result<Self::Value, __E>
                        where
                            __E: _serde::de::Error,
                        {
                            match __value {
                                "Kind" => _serde::__private::Ok(__Field::__field0),
                                "Path" => _serde::__private::Ok(__Field::__field1),
                                _ => _serde::__private::Ok(__Field::__ignore),
                            }
                        }
                        fn visit_bytes<__E>(
                            self,
                            __value: &[u8],
                        ) -> _serde::__private::Result<Self::Value, __E>
                        where
                            __E: _serde::de::Error,
                        {
                            match __value {
                                b"Kind" => _serde::__private::Ok(__Field::__field0),
                                b"Path" => _serde::__private::Ok(__Field::__field1),
                                _ => _serde::__private::Ok(__Field::__ignore),
                            }
                        }
                    }
                    impl<'de> _serde::Deserialize<'de> for __Field {
                        #[inline]
                        fn deserialize<__D>(
                            __deserializer: __D,
                        ) -> _serde::__private::Result<Self, __D::Error>
                        where
                            __D: _serde::Deserializer<'de>,
                        {
                            _serde::Deserializer::deserialize_identifier(
                                __deserializer,
                                __FieldVisitor,
                            )
                        }
                    }
                    #[doc(hidden)]
                    struct __Visitor<'de> {
                        marker: _serde::__private::PhantomData<Change>,
                        lifetime: _serde::__private::PhantomData<&'de ()>,
                    }
                    impl<'de> _serde::de::Visitor<'de> for __Visitor<'de> {
                        type Value = Change;
                        fn expecting(
                            &self,
                            __formatter: &mut _serde::__private::Formatter,
                        ) -> _serde::__private::fmt::Result {
                            _serde::__private::Formatter::write_str(
                                __formatter,
                                "struct Change",
                            )
                        }
                        #[inline]
                        fn visit_seq<__A>(
                            self,
                            mut __seq: __A,
                        ) -> _serde::__private::Result<Self::Value, __A::Error>
                        where
                            __A: _serde::de::SeqAccess<'de>,
                        {
                            let __field0 = match _serde::de::SeqAccess::next_element::<
                                u64,
                            >(&mut __seq)? {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            0usize,
                                            &"struct Change with 2 elements",
                                        ),
                                    );
                                }
                            };
                            let __field1 = match _serde::de::SeqAccess::next_element::<
                                String,
                            >(&mut __seq)? {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            1usize,
                                            &"struct Change with 2 elements",
                                        ),
                                    );
                                }
                            };
                            _serde::__private::Ok(Change {
                                kind: __field0,
                                path: __field1,
                            })
                        }
                        #[inline]
                        fn visit_map<__A>(
                            self,
                            mut __map: __A,
                        ) -> _serde::__private::Result<Self::Value, __A::Error>
                        where
                            __A: _serde::de::MapAccess<'de>,
                        {
                            let mut __field0: _serde::__private::Option<u64> = _serde::__private::None;
                            let mut __field1: _serde::__private::Option<String> = _serde::__private::None;
                            while let _serde::__private::Some(__key) = _serde::de::MapAccess::next_key::<
                                __Field,
                            >(&mut __map)? {
                                match __key {
                                    __Field::__field0 => {
                                        if _serde::__private::Option::is_some(&__field0) {
                                            return _serde::__private::Err(
                                                <__A::Error as _serde::de::Error>::duplicate_field("Kind"),
                                            );
                                        }
                                        __field0 = _serde::__private::Some(
                                            _serde::de::MapAccess::next_value::<u64>(&mut __map)?,
                                        );
                                    }
                                    __Field::__field1 => {
                                        if _serde::__private::Option::is_some(&__field1) {
                                            return _serde::__private::Err(
                                                <__A::Error as _serde::de::Error>::duplicate_field("Path"),
                                            );
                                        }
                                        __field1 = _serde::__private::Some(
                                            _serde::de::MapAccess::next_value::<String>(&mut __map)?,
                                        );
                                    }
                                    _ => {
                                        let _ = _serde::de::MapAccess::next_value::<
                                            _serde::de::IgnoredAny,
                                        >(&mut __map)?;
                                    }
                                }
                            }
                            let __field0 = match __field0 {
                                _serde::__private::Some(__field0) => __field0,
                                _serde::__private::None => {
                                    _serde::__private::de::missing_field("Kind")?
                                }
                            };
                            let __field1 = match __field1 {
                                _serde::__private::Some(__field1) => __field1,
                                _serde::__private::None => {
                                    _serde::__private::de::missing_field("Path")?
                                }
                            };
                            _serde::__private::Ok(Change {
                                kind: __field0,
                                path: __field1,
                            })
                        }
                    }
                    #[doc(hidden)]
                    const FIELDS: &'static [&'static str] = &["Kind", "Path"];
                    _serde::Deserializer::deserialize_struct(
                        __deserializer,
                        "Change",
                        FIELDS,
                        __Visitor {
                            marker: _serde::__private::PhantomData::<Change>,
                            lifetime: _serde::__private::PhantomData,
                        },
                    )
                }
            }
        };
        #[serde(rename_all = "PascalCase")]
        pub struct Top {
            pub titles: Vec<String>,
            pub processes: Vec<Vec<String>>,
        }
        #[automatically_derived]
        impl ::core::clone::Clone for Top {
            #[inline]
            fn clone(&self) -> Top {
                Top {
                    titles: ::core::clone::Clone::clone(&self.titles),
                    processes: ::core::clone::Clone::clone(&self.processes),
                }
            }
        }
        #[automatically_derived]
        impl ::core::fmt::Debug for Top {
            #[inline]
            fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                ::core::fmt::Formatter::debug_struct_field2_finish(
                    f,
                    "Top",
                    "titles",
                    &self.titles,
                    "processes",
                    &&self.processes,
                )
            }
        }
        #[doc(hidden)]
        #[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
        const _: () = {
            #[allow(unused_extern_crates, clippy::useless_attribute)]
            extern crate serde as _serde;
            #[automatically_derived]
            impl _serde::Serialize for Top {
                fn serialize<__S>(
                    &self,
                    __serializer: __S,
                ) -> _serde::__private::Result<__S::Ok, __S::Error>
                where
                    __S: _serde::Serializer,
                {
                    let mut __serde_state = _serde::Serializer::serialize_struct(
                        __serializer,
                        "Top",
                        false as usize + 1 + 1,
                    )?;
                    _serde::ser::SerializeStruct::serialize_field(
                        &mut __serde_state,
                        "Titles",
                        &self.titles,
                    )?;
                    _serde::ser::SerializeStruct::serialize_field(
                        &mut __serde_state,
                        "Processes",
                        &self.processes,
                    )?;
                    _serde::ser::SerializeStruct::end(__serde_state)
                }
            }
        };
        #[doc(hidden)]
        #[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
        const _: () = {
            #[allow(unused_extern_crates, clippy::useless_attribute)]
            extern crate serde as _serde;
            #[automatically_derived]
            impl<'de> _serde::Deserialize<'de> for Top {
                fn deserialize<__D>(
                    __deserializer: __D,
                ) -> _serde::__private::Result<Self, __D::Error>
                where
                    __D: _serde::Deserializer<'de>,
                {
                    #[allow(non_camel_case_types)]
                    #[doc(hidden)]
                    enum __Field {
                        __field0,
                        __field1,
                        __ignore,
                    }
                    #[doc(hidden)]
                    struct __FieldVisitor;
                    impl<'de> _serde::de::Visitor<'de> for __FieldVisitor {
                        type Value = __Field;
                        fn expecting(
                            &self,
                            __formatter: &mut _serde::__private::Formatter,
                        ) -> _serde::__private::fmt::Result {
                            _serde::__private::Formatter::write_str(
                                __formatter,
                                "field identifier",
                            )
                        }
                        fn visit_u64<__E>(
                            self,
                            __value: u64,
                        ) -> _serde::__private::Result<Self::Value, __E>
                        where
                            __E: _serde::de::Error,
                        {
                            match __value {
                                0u64 => _serde::__private::Ok(__Field::__field0),
                                1u64 => _serde::__private::Ok(__Field::__field1),
                                _ => _serde::__private::Ok(__Field::__ignore),
                            }
                        }
                        fn visit_str<__E>(
                            self,
                            __value: &str,
                        ) -> _serde::__private::Result<Self::Value, __E>
                        where
                            __E: _serde::de::Error,
                        {
                            match __value {
                                "Titles" => _serde::__private::Ok(__Field::__field0),
                                "Processes" => _serde::__private::Ok(__Field::__field1),
                                _ => _serde::__private::Ok(__Field::__ignore),
                            }
                        }
                        fn visit_bytes<__E>(
                            self,
                            __value: &[u8],
                        ) -> _serde::__private::Result<Self::Value, __E>
                        where
                            __E: _serde::de::Error,
                        {
                            match __value {
                                b"Titles" => _serde::__private::Ok(__Field::__field0),
                                b"Processes" => _serde::__private::Ok(__Field::__field1),
                                _ => _serde::__private::Ok(__Field::__ignore),
                            }
                        }
                    }
                    impl<'de> _serde::Deserialize<'de> for __Field {
                        #[inline]
                        fn deserialize<__D>(
                            __deserializer: __D,
                        ) -> _serde::__private::Result<Self, __D::Error>
                        where
                            __D: _serde::Deserializer<'de>,
                        {
                            _serde::Deserializer::deserialize_identifier(
                                __deserializer,
                                __FieldVisitor,
                            )
                        }
                    }
                    #[doc(hidden)]
                    struct __Visitor<'de> {
                        marker: _serde::__private::PhantomData<Top>,
                        lifetime: _serde::__private::PhantomData<&'de ()>,
                    }
                    impl<'de> _serde::de::Visitor<'de> for __Visitor<'de> {
                        type Value = Top;
                        fn expecting(
                            &self,
                            __formatter: &mut _serde::__private::Formatter,
                        ) -> _serde::__private::fmt::Result {
                            _serde::__private::Formatter::write_str(
                                __formatter,
                                "struct Top",
                            )
                        }
                        #[inline]
                        fn visit_seq<__A>(
                            self,
                            mut __seq: __A,
                        ) -> _serde::__private::Result<Self::Value, __A::Error>
                        where
                            __A: _serde::de::SeqAccess<'de>,
                        {
                            let __field0 = match _serde::de::SeqAccess::next_element::<
                                Vec<String>,
                            >(&mut __seq)? {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            0usize,
                                            &"struct Top with 2 elements",
                                        ),
                                    );
                                }
                            };
                            let __field1 = match _serde::de::SeqAccess::next_element::<
                                Vec<Vec<String>>,
                            >(&mut __seq)? {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            1usize,
                                            &"struct Top with 2 elements",
                                        ),
                                    );
                                }
                            };
                            _serde::__private::Ok(Top {
                                titles: __field0,
                                processes: __field1,
                            })
                        }
                        #[inline]
                        fn visit_map<__A>(
                            self,
                            mut __map: __A,
                        ) -> _serde::__private::Result<Self::Value, __A::Error>
                        where
                            __A: _serde::de::MapAccess<'de>,
                        {
                            let mut __field0: _serde::__private::Option<Vec<String>> = _serde::__private::None;
                            let mut __field1: _serde::__private::Option<
                                Vec<Vec<String>>,
                            > = _serde::__private::None;
                            while let _serde::__private::Some(__key) = _serde::de::MapAccess::next_key::<
                                __Field,
                            >(&mut __map)? {
                                match __key {
                                    __Field::__field0 => {
                                        if _serde::__private::Option::is_some(&__field0) {
                                            return _serde::__private::Err(
                                                <__A::Error as _serde::de::Error>::duplicate_field("Titles"),
                                            );
                                        }
                                        __field0 = _serde::__private::Some(
                                            _serde::de::MapAccess::next_value::<
                                                Vec<String>,
                                            >(&mut __map)?,
                                        );
                                    }
                                    __Field::__field1 => {
                                        if _serde::__private::Option::is_some(&__field1) {
                                            return _serde::__private::Err(
                                                <__A::Error as _serde::de::Error>::duplicate_field(
                                                    "Processes",
                                                ),
                                            );
                                        }
                                        __field1 = _serde::__private::Some(
                                            _serde::de::MapAccess::next_value::<
                                                Vec<Vec<String>>,
                                            >(&mut __map)?,
                                        );
                                    }
                                    _ => {
                                        let _ = _serde::de::MapAccess::next_value::<
                                            _serde::de::IgnoredAny,
                                        >(&mut __map)?;
                                    }
                                }
                            }
                            let __field0 = match __field0 {
                                _serde::__private::Some(__field0) => __field0,
                                _serde::__private::None => {
                                    _serde::__private::de::missing_field("Titles")?
                                }
                            };
                            let __field1 = match __field1 {
                                _serde::__private::Some(__field1) => __field1,
                                _serde::__private::None => {
                                    _serde::__private::de::missing_field("Processes")?
                                }
                            };
                            _serde::__private::Ok(Top {
                                titles: __field0,
                                processes: __field1,
                            })
                        }
                    }
                    #[doc(hidden)]
                    const FIELDS: &'static [&'static str] = &["Titles", "Processes"];
                    _serde::Deserializer::deserialize_struct(
                        __deserializer,
                        "Top",
                        FIELDS,
                        __Visitor {
                            marker: _serde::__private::PhantomData::<Top>,
                            lifetime: _serde::__private::PhantomData,
                        },
                    )
                }
            }
        };
        #[serde(rename_all = "PascalCase")]
        pub struct ContainerCreateInfo {
            pub id: String,
            pub warnings: Option<Vec<String>>,
        }
        #[automatically_derived]
        impl ::core::clone::Clone for ContainerCreateInfo {
            #[inline]
            fn clone(&self) -> ContainerCreateInfo {
                ContainerCreateInfo {
                    id: ::core::clone::Clone::clone(&self.id),
                    warnings: ::core::clone::Clone::clone(&self.warnings),
                }
            }
        }
        #[automatically_derived]
        impl ::core::fmt::Debug for ContainerCreateInfo {
            #[inline]
            fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                ::core::fmt::Formatter::debug_struct_field2_finish(
                    f,
                    "ContainerCreateInfo",
                    "id",
                    &self.id,
                    "warnings",
                    &&self.warnings,
                )
            }
        }
        #[doc(hidden)]
        #[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
        const _: () = {
            #[allow(unused_extern_crates, clippy::useless_attribute)]
            extern crate serde as _serde;
            #[automatically_derived]
            impl _serde::Serialize for ContainerCreateInfo {
                fn serialize<__S>(
                    &self,
                    __serializer: __S,
                ) -> _serde::__private::Result<__S::Ok, __S::Error>
                where
                    __S: _serde::Serializer,
                {
                    let mut __serde_state = _serde::Serializer::serialize_struct(
                        __serializer,
                        "ContainerCreateInfo",
                        false as usize + 1 + 1,
                    )?;
                    _serde::ser::SerializeStruct::serialize_field(
                        &mut __serde_state,
                        "Id",
                        &self.id,
                    )?;
                    _serde::ser::SerializeStruct::serialize_field(
                        &mut __serde_state,
                        "Warnings",
                        &self.warnings,
                    )?;
                    _serde::ser::SerializeStruct::end(__serde_state)
                }
            }
        };
        #[doc(hidden)]
        #[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
        const _: () = {
            #[allow(unused_extern_crates, clippy::useless_attribute)]
            extern crate serde as _serde;
            #[automatically_derived]
            impl<'de> _serde::Deserialize<'de> for ContainerCreateInfo {
                fn deserialize<__D>(
                    __deserializer: __D,
                ) -> _serde::__private::Result<Self, __D::Error>
                where
                    __D: _serde::Deserializer<'de>,
                {
                    #[allow(non_camel_case_types)]
                    #[doc(hidden)]
                    enum __Field {
                        __field0,
                        __field1,
                        __ignore,
                    }
                    #[doc(hidden)]
                    struct __FieldVisitor;
                    impl<'de> _serde::de::Visitor<'de> for __FieldVisitor {
                        type Value = __Field;
                        fn expecting(
                            &self,
                            __formatter: &mut _serde::__private::Formatter,
                        ) -> _serde::__private::fmt::Result {
                            _serde::__private::Formatter::write_str(
                                __formatter,
                                "field identifier",
                            )
                        }
                        fn visit_u64<__E>(
                            self,
                            __value: u64,
                        ) -> _serde::__private::Result<Self::Value, __E>
                        where
                            __E: _serde::de::Error,
                        {
                            match __value {
                                0u64 => _serde::__private::Ok(__Field::__field0),
                                1u64 => _serde::__private::Ok(__Field::__field1),
                                _ => _serde::__private::Ok(__Field::__ignore),
                            }
                        }
                        fn visit_str<__E>(
                            self,
                            __value: &str,
                        ) -> _serde::__private::Result<Self::Value, __E>
                        where
                            __E: _serde::de::Error,
                        {
                            match __value {
                                "Id" => _serde::__private::Ok(__Field::__field0),
                                "Warnings" => _serde::__private::Ok(__Field::__field1),
                                _ => _serde::__private::Ok(__Field::__ignore),
                            }
                        }
                        fn visit_bytes<__E>(
                            self,
                            __value: &[u8],
                        ) -> _serde::__private::Result<Self::Value, __E>
                        where
                            __E: _serde::de::Error,
                        {
                            match __value {
                                b"Id" => _serde::__private::Ok(__Field::__field0),
                                b"Warnings" => _serde::__private::Ok(__Field::__field1),
                                _ => _serde::__private::Ok(__Field::__ignore),
                            }
                        }
                    }
                    impl<'de> _serde::Deserialize<'de> for __Field {
                        #[inline]
                        fn deserialize<__D>(
                            __deserializer: __D,
                        ) -> _serde::__private::Result<Self, __D::Error>
                        where
                            __D: _serde::Deserializer<'de>,
                        {
                            _serde::Deserializer::deserialize_identifier(
                                __deserializer,
                                __FieldVisitor,
                            )
                        }
                    }
                    #[doc(hidden)]
                    struct __Visitor<'de> {
                        marker: _serde::__private::PhantomData<ContainerCreateInfo>,
                        lifetime: _serde::__private::PhantomData<&'de ()>,
                    }
                    impl<'de> _serde::de::Visitor<'de> for __Visitor<'de> {
                        type Value = ContainerCreateInfo;
                        fn expecting(
                            &self,
                            __formatter: &mut _serde::__private::Formatter,
                        ) -> _serde::__private::fmt::Result {
                            _serde::__private::Formatter::write_str(
                                __formatter,
                                "struct ContainerCreateInfo",
                            )
                        }
                        #[inline]
                        fn visit_seq<__A>(
                            self,
                            mut __seq: __A,
                        ) -> _serde::__private::Result<Self::Value, __A::Error>
                        where
                            __A: _serde::de::SeqAccess<'de>,
                        {
                            let __field0 = match _serde::de::SeqAccess::next_element::<
                                String,
                            >(&mut __seq)? {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            0usize,
                                            &"struct ContainerCreateInfo with 2 elements",
                                        ),
                                    );
                                }
                            };
                            let __field1 = match _serde::de::SeqAccess::next_element::<
                                Option<Vec<String>>,
                            >(&mut __seq)? {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            1usize,
                                            &"struct ContainerCreateInfo with 2 elements",
                                        ),
                                    );
                                }
                            };
                            _serde::__private::Ok(ContainerCreateInfo {
                                id: __field0,
                                warnings: __field1,
                            })
                        }
                        #[inline]
                        fn visit_map<__A>(
                            self,
                            mut __map: __A,
                        ) -> _serde::__private::Result<Self::Value, __A::Error>
                        where
                            __A: _serde::de::MapAccess<'de>,
                        {
                            let mut __field0: _serde::__private::Option<String> = _serde::__private::None;
                            let mut __field1: _serde::__private::Option<
                                Option<Vec<String>>,
                            > = _serde::__private::None;
                            while let _serde::__private::Some(__key) = _serde::de::MapAccess::next_key::<
                                __Field,
                            >(&mut __map)? {
                                match __key {
                                    __Field::__field0 => {
                                        if _serde::__private::Option::is_some(&__field0) {
                                            return _serde::__private::Err(
                                                <__A::Error as _serde::de::Error>::duplicate_field("Id"),
                                            );
                                        }
                                        __field0 = _serde::__private::Some(
                                            _serde::de::MapAccess::next_value::<String>(&mut __map)?,
                                        );
                                    }
                                    __Field::__field1 => {
                                        if _serde::__private::Option::is_some(&__field1) {
                                            return _serde::__private::Err(
                                                <__A::Error as _serde::de::Error>::duplicate_field(
                                                    "Warnings",
                                                ),
                                            );
                                        }
                                        __field1 = _serde::__private::Some(
                                            _serde::de::MapAccess::next_value::<
                                                Option<Vec<String>>,
                                            >(&mut __map)?,
                                        );
                                    }
                                    _ => {
                                        let _ = _serde::de::MapAccess::next_value::<
                                            _serde::de::IgnoredAny,
                                        >(&mut __map)?;
                                    }
                                }
                            }
                            let __field0 = match __field0 {
                                _serde::__private::Some(__field0) => __field0,
                                _serde::__private::None => {
                                    _serde::__private::de::missing_field("Id")?
                                }
                            };
                            let __field1 = match __field1 {
                                _serde::__private::Some(__field1) => __field1,
                                _serde::__private::None => {
                                    _serde::__private::de::missing_field("Warnings")?
                                }
                            };
                            _serde::__private::Ok(ContainerCreateInfo {
                                id: __field0,
                                warnings: __field1,
                            })
                        }
                    }
                    #[doc(hidden)]
                    const FIELDS: &'static [&'static str] = &["Id", "Warnings"];
                    _serde::Deserializer::deserialize_struct(
                        __deserializer,
                        "ContainerCreateInfo",
                        FIELDS,
                        __Visitor {
                            marker: _serde::__private::PhantomData::<
                                ContainerCreateInfo,
                            >,
                            lifetime: _serde::__private::PhantomData,
                        },
                    )
                }
            }
        };
        #[serde(rename_all = "PascalCase")]
        pub struct Exit {
            pub status_code: u64,
        }
        #[automatically_derived]
        impl ::core::clone::Clone for Exit {
            #[inline]
            fn clone(&self) -> Exit {
                Exit {
                    status_code: ::core::clone::Clone::clone(&self.status_code),
                }
            }
        }
        #[automatically_derived]
        impl ::core::fmt::Debug for Exit {
            #[inline]
            fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                ::core::fmt::Formatter::debug_struct_field1_finish(
                    f,
                    "Exit",
                    "status_code",
                    &&self.status_code,
                )
            }
        }
        #[doc(hidden)]
        #[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
        const _: () = {
            #[allow(unused_extern_crates, clippy::useless_attribute)]
            extern crate serde as _serde;
            #[automatically_derived]
            impl _serde::Serialize for Exit {
                fn serialize<__S>(
                    &self,
                    __serializer: __S,
                ) -> _serde::__private::Result<__S::Ok, __S::Error>
                where
                    __S: _serde::Serializer,
                {
                    let mut __serde_state = _serde::Serializer::serialize_struct(
                        __serializer,
                        "Exit",
                        false as usize + 1,
                    )?;
                    _serde::ser::SerializeStruct::serialize_field(
                        &mut __serde_state,
                        "StatusCode",
                        &self.status_code,
                    )?;
                    _serde::ser::SerializeStruct::end(__serde_state)
                }
            }
        };
        #[doc(hidden)]
        #[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
        const _: () = {
            #[allow(unused_extern_crates, clippy::useless_attribute)]
            extern crate serde as _serde;
            #[automatically_derived]
            impl<'de> _serde::Deserialize<'de> for Exit {
                fn deserialize<__D>(
                    __deserializer: __D,
                ) -> _serde::__private::Result<Self, __D::Error>
                where
                    __D: _serde::Deserializer<'de>,
                {
                    #[allow(non_camel_case_types)]
                    #[doc(hidden)]
                    enum __Field {
                        __field0,
                        __ignore,
                    }
                    #[doc(hidden)]
                    struct __FieldVisitor;
                    impl<'de> _serde::de::Visitor<'de> for __FieldVisitor {
                        type Value = __Field;
                        fn expecting(
                            &self,
                            __formatter: &mut _serde::__private::Formatter,
                        ) -> _serde::__private::fmt::Result {
                            _serde::__private::Formatter::write_str(
                                __formatter,
                                "field identifier",
                            )
                        }
                        fn visit_u64<__E>(
                            self,
                            __value: u64,
                        ) -> _serde::__private::Result<Self::Value, __E>
                        where
                            __E: _serde::de::Error,
                        {
                            match __value {
                                0u64 => _serde::__private::Ok(__Field::__field0),
                                _ => _serde::__private::Ok(__Field::__ignore),
                            }
                        }
                        fn visit_str<__E>(
                            self,
                            __value: &str,
                        ) -> _serde::__private::Result<Self::Value, __E>
                        where
                            __E: _serde::de::Error,
                        {
                            match __value {
                                "StatusCode" => _serde::__private::Ok(__Field::__field0),
                                _ => _serde::__private::Ok(__Field::__ignore),
                            }
                        }
                        fn visit_bytes<__E>(
                            self,
                            __value: &[u8],
                        ) -> _serde::__private::Result<Self::Value, __E>
                        where
                            __E: _serde::de::Error,
                        {
                            match __value {
                                b"StatusCode" => _serde::__private::Ok(__Field::__field0),
                                _ => _serde::__private::Ok(__Field::__ignore),
                            }
                        }
                    }
                    impl<'de> _serde::Deserialize<'de> for __Field {
                        #[inline]
                        fn deserialize<__D>(
                            __deserializer: __D,
                        ) -> _serde::__private::Result<Self, __D::Error>
                        where
                            __D: _serde::Deserializer<'de>,
                        {
                            _serde::Deserializer::deserialize_identifier(
                                __deserializer,
                                __FieldVisitor,
                            )
                        }
                    }
                    #[doc(hidden)]
                    struct __Visitor<'de> {
                        marker: _serde::__private::PhantomData<Exit>,
                        lifetime: _serde::__private::PhantomData<&'de ()>,
                    }
                    impl<'de> _serde::de::Visitor<'de> for __Visitor<'de> {
                        type Value = Exit;
                        fn expecting(
                            &self,
                            __formatter: &mut _serde::__private::Formatter,
                        ) -> _serde::__private::fmt::Result {
                            _serde::__private::Formatter::write_str(
                                __formatter,
                                "struct Exit",
                            )
                        }
                        #[inline]
                        fn visit_seq<__A>(
                            self,
                            mut __seq: __A,
                        ) -> _serde::__private::Result<Self::Value, __A::Error>
                        where
                            __A: _serde::de::SeqAccess<'de>,
                        {
                            let __field0 = match _serde::de::SeqAccess::next_element::<
                                u64,
                            >(&mut __seq)? {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            0usize,
                                            &"struct Exit with 1 element",
                                        ),
                                    );
                                }
                            };
                            _serde::__private::Ok(Exit { status_code: __field0 })
                        }
                        #[inline]
                        fn visit_map<__A>(
                            self,
                            mut __map: __A,
                        ) -> _serde::__private::Result<Self::Value, __A::Error>
                        where
                            __A: _serde::de::MapAccess<'de>,
                        {
                            let mut __field0: _serde::__private::Option<u64> = _serde::__private::None;
                            while let _serde::__private::Some(__key) = _serde::de::MapAccess::next_key::<
                                __Field,
                            >(&mut __map)? {
                                match __key {
                                    __Field::__field0 => {
                                        if _serde::__private::Option::is_some(&__field0) {
                                            return _serde::__private::Err(
                                                <__A::Error as _serde::de::Error>::duplicate_field(
                                                    "StatusCode",
                                                ),
                                            );
                                        }
                                        __field0 = _serde::__private::Some(
                                            _serde::de::MapAccess::next_value::<u64>(&mut __map)?,
                                        );
                                    }
                                    _ => {
                                        let _ = _serde::de::MapAccess::next_value::<
                                            _serde::de::IgnoredAny,
                                        >(&mut __map)?;
                                    }
                                }
                            }
                            let __field0 = match __field0 {
                                _serde::__private::Some(__field0) => __field0,
                                _serde::__private::None => {
                                    _serde::__private::de::missing_field("StatusCode")?
                                }
                            };
                            _serde::__private::Ok(Exit { status_code: __field0 })
                        }
                    }
                    #[doc(hidden)]
                    const FIELDS: &'static [&'static str] = &["StatusCode"];
                    _serde::Deserializer::deserialize_struct(
                        __deserializer,
                        "Exit",
                        FIELDS,
                        __Visitor {
                            marker: _serde::__private::PhantomData::<Exit>,
                            lifetime: _serde::__private::PhantomData,
                        },
                    )
                }
            }
        };
    }
    pub mod image {
        use std::collections::HashMap;
        use serde::{Deserialize, Serialize};
        #[serde(rename_all = "PascalCase")]
        pub struct ContainerConfig {
            pub hostname: String,
            pub domainname: String,
            pub user: String,
            pub attach_stdin: bool,
            pub attach_stdout: bool,
            pub attach_stderr: bool,
            pub exposed_ports: Option<HashMap<String, HashMap<String, String>>>,
            pub tty: bool,
            pub open_stdin: bool,
            pub stdin_once: bool,
            pub env: Vec<String>,
            pub cmd: Option<Vec<String>>,
            pub args_escaped: Option<bool>,
            pub image: String,
            pub volumes: Option<HashMap<String, HashMap<String, String>>>,
            pub working_dir: String,
            pub entrypoint: Option<Vec<String>>,
            pub network_disabled: Option<bool>,
            pub mac_address: Option<String>,
            pub on_build: Option<Vec<String>>,
            pub labels: Option<HashMap<String, String>>,
            pub stop_signal: Option<String>,
            pub stop_timeout: Option<u32>,
            pub shell: Option<Vec<String>>,
        }
        #[automatically_derived]
        impl ::core::clone::Clone for ContainerConfig {
            #[inline]
            fn clone(&self) -> ContainerConfig {
                ContainerConfig {
                    hostname: ::core::clone::Clone::clone(&self.hostname),
                    domainname: ::core::clone::Clone::clone(&self.domainname),
                    user: ::core::clone::Clone::clone(&self.user),
                    attach_stdin: ::core::clone::Clone::clone(&self.attach_stdin),
                    attach_stdout: ::core::clone::Clone::clone(&self.attach_stdout),
                    attach_stderr: ::core::clone::Clone::clone(&self.attach_stderr),
                    exposed_ports: ::core::clone::Clone::clone(&self.exposed_ports),
                    tty: ::core::clone::Clone::clone(&self.tty),
                    open_stdin: ::core::clone::Clone::clone(&self.open_stdin),
                    stdin_once: ::core::clone::Clone::clone(&self.stdin_once),
                    env: ::core::clone::Clone::clone(&self.env),
                    cmd: ::core::clone::Clone::clone(&self.cmd),
                    args_escaped: ::core::clone::Clone::clone(&self.args_escaped),
                    image: ::core::clone::Clone::clone(&self.image),
                    volumes: ::core::clone::Clone::clone(&self.volumes),
                    working_dir: ::core::clone::Clone::clone(&self.working_dir),
                    entrypoint: ::core::clone::Clone::clone(&self.entrypoint),
                    network_disabled: ::core::clone::Clone::clone(
                        &self.network_disabled,
                    ),
                    mac_address: ::core::clone::Clone::clone(&self.mac_address),
                    on_build: ::core::clone::Clone::clone(&self.on_build),
                    labels: ::core::clone::Clone::clone(&self.labels),
                    stop_signal: ::core::clone::Clone::clone(&self.stop_signal),
                    stop_timeout: ::core::clone::Clone::clone(&self.stop_timeout),
                    shell: ::core::clone::Clone::clone(&self.shell),
                }
            }
        }
        #[automatically_derived]
        impl ::core::fmt::Debug for ContainerConfig {
            #[inline]
            fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                let names: &'static _ = &[
                    "hostname",
                    "domainname",
                    "user",
                    "attach_stdin",
                    "attach_stdout",
                    "attach_stderr",
                    "exposed_ports",
                    "tty",
                    "open_stdin",
                    "stdin_once",
                    "env",
                    "cmd",
                    "args_escaped",
                    "image",
                    "volumes",
                    "working_dir",
                    "entrypoint",
                    "network_disabled",
                    "mac_address",
                    "on_build",
                    "labels",
                    "stop_signal",
                    "stop_timeout",
                    "shell",
                ];
                let values: &[&dyn ::core::fmt::Debug] = &[
                    &self.hostname,
                    &self.domainname,
                    &self.user,
                    &self.attach_stdin,
                    &self.attach_stdout,
                    &self.attach_stderr,
                    &self.exposed_ports,
                    &self.tty,
                    &self.open_stdin,
                    &self.stdin_once,
                    &self.env,
                    &self.cmd,
                    &self.args_escaped,
                    &self.image,
                    &self.volumes,
                    &self.working_dir,
                    &self.entrypoint,
                    &self.network_disabled,
                    &self.mac_address,
                    &self.on_build,
                    &self.labels,
                    &self.stop_signal,
                    &self.stop_timeout,
                    &&self.shell,
                ];
                ::core::fmt::Formatter::debug_struct_fields_finish(
                    f,
                    "ContainerConfig",
                    names,
                    values,
                )
            }
        }
        #[doc(hidden)]
        #[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
        const _: () = {
            #[allow(unused_extern_crates, clippy::useless_attribute)]
            extern crate serde as _serde;
            #[automatically_derived]
            impl _serde::Serialize for ContainerConfig {
                fn serialize<__S>(
                    &self,
                    __serializer: __S,
                ) -> _serde::__private::Result<__S::Ok, __S::Error>
                where
                    __S: _serde::Serializer,
                {
                    let mut __serde_state = _serde::Serializer::serialize_struct(
                        __serializer,
                        "ContainerConfig",
                        false as usize + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1
                            + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1,
                    )?;
                    _serde::ser::SerializeStruct::serialize_field(
                        &mut __serde_state,
                        "Hostname",
                        &self.hostname,
                    )?;
                    _serde::ser::SerializeStruct::serialize_field(
                        &mut __serde_state,
                        "Domainname",
                        &self.domainname,
                    )?;
                    _serde::ser::SerializeStruct::serialize_field(
                        &mut __serde_state,
                        "User",
                        &self.user,
                    )?;
                    _serde::ser::SerializeStruct::serialize_field(
                        &mut __serde_state,
                        "AttachStdin",
                        &self.attach_stdin,
                    )?;
                    _serde::ser::SerializeStruct::serialize_field(
                        &mut __serde_state,
                        "AttachStdout",
                        &self.attach_stdout,
                    )?;
                    _serde::ser::SerializeStruct::serialize_field(
                        &mut __serde_state,
                        "AttachStderr",
                        &self.attach_stderr,
                    )?;
                    _serde::ser::SerializeStruct::serialize_field(
                        &mut __serde_state,
                        "ExposedPorts",
                        &self.exposed_ports,
                    )?;
                    _serde::ser::SerializeStruct::serialize_field(
                        &mut __serde_state,
                        "Tty",
                        &self.tty,
                    )?;
                    _serde::ser::SerializeStruct::serialize_field(
                        &mut __serde_state,
                        "OpenStdin",
                        &self.open_stdin,
                    )?;
                    _serde::ser::SerializeStruct::serialize_field(
                        &mut __serde_state,
                        "StdinOnce",
                        &self.stdin_once,
                    )?;
                    _serde::ser::SerializeStruct::serialize_field(
                        &mut __serde_state,
                        "Env",
                        &self.env,
                    )?;
                    _serde::ser::SerializeStruct::serialize_field(
                        &mut __serde_state,
                        "Cmd",
                        &self.cmd,
                    )?;
                    _serde::ser::SerializeStruct::serialize_field(
                        &mut __serde_state,
                        "ArgsEscaped",
                        &self.args_escaped,
                    )?;
                    _serde::ser::SerializeStruct::serialize_field(
                        &mut __serde_state,
                        "Image",
                        &self.image,
                    )?;
                    _serde::ser::SerializeStruct::serialize_field(
                        &mut __serde_state,
                        "Volumes",
                        &self.volumes,
                    )?;
                    _serde::ser::SerializeStruct::serialize_field(
                        &mut __serde_state,
                        "WorkingDir",
                        &self.working_dir,
                    )?;
                    _serde::ser::SerializeStruct::serialize_field(
                        &mut __serde_state,
                        "Entrypoint",
                        &self.entrypoint,
                    )?;
                    _serde::ser::SerializeStruct::serialize_field(
                        &mut __serde_state,
                        "NetworkDisabled",
                        &self.network_disabled,
                    )?;
                    _serde::ser::SerializeStruct::serialize_field(
                        &mut __serde_state,
                        "MacAddress",
                        &self.mac_address,
                    )?;
                    _serde::ser::SerializeStruct::serialize_field(
                        &mut __serde_state,
                        "OnBuild",
                        &self.on_build,
                    )?;
                    _serde::ser::SerializeStruct::serialize_field(
                        &mut __serde_state,
                        "Labels",
                        &self.labels,
                    )?;
                    _serde::ser::SerializeStruct::serialize_field(
                        &mut __serde_state,
                        "StopSignal",
                        &self.stop_signal,
                    )?;
                    _serde::ser::SerializeStruct::serialize_field(
                        &mut __serde_state,
                        "StopTimeout",
                        &self.stop_timeout,
                    )?;
                    _serde::ser::SerializeStruct::serialize_field(
                        &mut __serde_state,
                        "Shell",
                        &self.shell,
                    )?;
                    _serde::ser::SerializeStruct::end(__serde_state)
                }
            }
        };
        #[doc(hidden)]
        #[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
        const _: () = {
            #[allow(unused_extern_crates, clippy::useless_attribute)]
            extern crate serde as _serde;
            #[automatically_derived]
            impl<'de> _serde::Deserialize<'de> for ContainerConfig {
                fn deserialize<__D>(
                    __deserializer: __D,
                ) -> _serde::__private::Result<Self, __D::Error>
                where
                    __D: _serde::Deserializer<'de>,
                {
                    #[allow(non_camel_case_types)]
                    #[doc(hidden)]
                    enum __Field {
                        __field0,
                        __field1,
                        __field2,
                        __field3,
                        __field4,
                        __field5,
                        __field6,
                        __field7,
                        __field8,
                        __field9,
                        __field10,
                        __field11,
                        __field12,
                        __field13,
                        __field14,
                        __field15,
                        __field16,
                        __field17,
                        __field18,
                        __field19,
                        __field20,
                        __field21,
                        __field22,
                        __field23,
                        __ignore,
                    }
                    #[doc(hidden)]
                    struct __FieldVisitor;
                    impl<'de> _serde::de::Visitor<'de> for __FieldVisitor {
                        type Value = __Field;
                        fn expecting(
                            &self,
                            __formatter: &mut _serde::__private::Formatter,
                        ) -> _serde::__private::fmt::Result {
                            _serde::__private::Formatter::write_str(
                                __formatter,
                                "field identifier",
                            )
                        }
                        fn visit_u64<__E>(
                            self,
                            __value: u64,
                        ) -> _serde::__private::Result<Self::Value, __E>
                        where
                            __E: _serde::de::Error,
                        {
                            match __value {
                                0u64 => _serde::__private::Ok(__Field::__field0),
                                1u64 => _serde::__private::Ok(__Field::__field1),
                                2u64 => _serde::__private::Ok(__Field::__field2),
                                3u64 => _serde::__private::Ok(__Field::__field3),
                                4u64 => _serde::__private::Ok(__Field::__field4),
                                5u64 => _serde::__private::Ok(__Field::__field5),
                                6u64 => _serde::__private::Ok(__Field::__field6),
                                7u64 => _serde::__private::Ok(__Field::__field7),
                                8u64 => _serde::__private::Ok(__Field::__field8),
                                9u64 => _serde::__private::Ok(__Field::__field9),
                                10u64 => _serde::__private::Ok(__Field::__field10),
                                11u64 => _serde::__private::Ok(__Field::__field11),
                                12u64 => _serde::__private::Ok(__Field::__field12),
                                13u64 => _serde::__private::Ok(__Field::__field13),
                                14u64 => _serde::__private::Ok(__Field::__field14),
                                15u64 => _serde::__private::Ok(__Field::__field15),
                                16u64 => _serde::__private::Ok(__Field::__field16),
                                17u64 => _serde::__private::Ok(__Field::__field17),
                                18u64 => _serde::__private::Ok(__Field::__field18),
                                19u64 => _serde::__private::Ok(__Field::__field19),
                                20u64 => _serde::__private::Ok(__Field::__field20),
                                21u64 => _serde::__private::Ok(__Field::__field21),
                                22u64 => _serde::__private::Ok(__Field::__field22),
                                23u64 => _serde::__private::Ok(__Field::__field23),
                                _ => _serde::__private::Ok(__Field::__ignore),
                            }
                        }
                        fn visit_str<__E>(
                            self,
                            __value: &str,
                        ) -> _serde::__private::Result<Self::Value, __E>
                        where
                            __E: _serde::de::Error,
                        {
                            match __value {
                                "Hostname" => _serde::__private::Ok(__Field::__field0),
                                "Domainname" => _serde::__private::Ok(__Field::__field1),
                                "User" => _serde::__private::Ok(__Field::__field2),
                                "AttachStdin" => _serde::__private::Ok(__Field::__field3),
                                "AttachStdout" => _serde::__private::Ok(__Field::__field4),
                                "AttachStderr" => _serde::__private::Ok(__Field::__field5),
                                "ExposedPorts" => _serde::__private::Ok(__Field::__field6),
                                "Tty" => _serde::__private::Ok(__Field::__field7),
                                "OpenStdin" => _serde::__private::Ok(__Field::__field8),
                                "StdinOnce" => _serde::__private::Ok(__Field::__field9),
                                "Env" => _serde::__private::Ok(__Field::__field10),
                                "Cmd" => _serde::__private::Ok(__Field::__field11),
                                "ArgsEscaped" => _serde::__private::Ok(__Field::__field12),
                                "Image" => _serde::__private::Ok(__Field::__field13),
                                "Volumes" => _serde::__private::Ok(__Field::__field14),
                                "WorkingDir" => _serde::__private::Ok(__Field::__field15),
                                "Entrypoint" => _serde::__private::Ok(__Field::__field16),
                                "NetworkDisabled" => {
                                    _serde::__private::Ok(__Field::__field17)
                                }
                                "MacAddress" => _serde::__private::Ok(__Field::__field18),
                                "OnBuild" => _serde::__private::Ok(__Field::__field19),
                                "Labels" => _serde::__private::Ok(__Field::__field20),
                                "StopSignal" => _serde::__private::Ok(__Field::__field21),
                                "StopTimeout" => _serde::__private::Ok(__Field::__field22),
                                "Shell" => _serde::__private::Ok(__Field::__field23),
                                _ => _serde::__private::Ok(__Field::__ignore),
                            }
                        }
                        fn visit_bytes<__E>(
                            self,
                            __value: &[u8],
                        ) -> _serde::__private::Result<Self::Value, __E>
                        where
                            __E: _serde::de::Error,
                        {
                            match __value {
                                b"Hostname" => _serde::__private::Ok(__Field::__field0),
                                b"Domainname" => _serde::__private::Ok(__Field::__field1),
                                b"User" => _serde::__private::Ok(__Field::__field2),
                                b"AttachStdin" => _serde::__private::Ok(__Field::__field3),
                                b"AttachStdout" => _serde::__private::Ok(__Field::__field4),
                                b"AttachStderr" => _serde::__private::Ok(__Field::__field5),
                                b"ExposedPorts" => _serde::__private::Ok(__Field::__field6),
                                b"Tty" => _serde::__private::Ok(__Field::__field7),
                                b"OpenStdin" => _serde::__private::Ok(__Field::__field8),
                                b"StdinOnce" => _serde::__private::Ok(__Field::__field9),
                                b"Env" => _serde::__private::Ok(__Field::__field10),
                                b"Cmd" => _serde::__private::Ok(__Field::__field11),
                                b"ArgsEscaped" => _serde::__private::Ok(__Field::__field12),
                                b"Image" => _serde::__private::Ok(__Field::__field13),
                                b"Volumes" => _serde::__private::Ok(__Field::__field14),
                                b"WorkingDir" => _serde::__private::Ok(__Field::__field15),
                                b"Entrypoint" => _serde::__private::Ok(__Field::__field16),
                                b"NetworkDisabled" => {
                                    _serde::__private::Ok(__Field::__field17)
                                }
                                b"MacAddress" => _serde::__private::Ok(__Field::__field18),
                                b"OnBuild" => _serde::__private::Ok(__Field::__field19),
                                b"Labels" => _serde::__private::Ok(__Field::__field20),
                                b"StopSignal" => _serde::__private::Ok(__Field::__field21),
                                b"StopTimeout" => _serde::__private::Ok(__Field::__field22),
                                b"Shell" => _serde::__private::Ok(__Field::__field23),
                                _ => _serde::__private::Ok(__Field::__ignore),
                            }
                        }
                    }
                    impl<'de> _serde::Deserialize<'de> for __Field {
                        #[inline]
                        fn deserialize<__D>(
                            __deserializer: __D,
                        ) -> _serde::__private::Result<Self, __D::Error>
                        where
                            __D: _serde::Deserializer<'de>,
                        {
                            _serde::Deserializer::deserialize_identifier(
                                __deserializer,
                                __FieldVisitor,
                            )
                        }
                    }
                    #[doc(hidden)]
                    struct __Visitor<'de> {
                        marker: _serde::__private::PhantomData<ContainerConfig>,
                        lifetime: _serde::__private::PhantomData<&'de ()>,
                    }
                    impl<'de> _serde::de::Visitor<'de> for __Visitor<'de> {
                        type Value = ContainerConfig;
                        fn expecting(
                            &self,
                            __formatter: &mut _serde::__private::Formatter,
                        ) -> _serde::__private::fmt::Result {
                            _serde::__private::Formatter::write_str(
                                __formatter,
                                "struct ContainerConfig",
                            )
                        }
                        #[inline]
                        fn visit_seq<__A>(
                            self,
                            mut __seq: __A,
                        ) -> _serde::__private::Result<Self::Value, __A::Error>
                        where
                            __A: _serde::de::SeqAccess<'de>,
                        {
                            let __field0 = match _serde::de::SeqAccess::next_element::<
                                String,
                            >(&mut __seq)? {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            0usize,
                                            &"struct ContainerConfig with 24 elements",
                                        ),
                                    );
                                }
                            };
                            let __field1 = match _serde::de::SeqAccess::next_element::<
                                String,
                            >(&mut __seq)? {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            1usize,
                                            &"struct ContainerConfig with 24 elements",
                                        ),
                                    );
                                }
                            };
                            let __field2 = match _serde::de::SeqAccess::next_element::<
                                String,
                            >(&mut __seq)? {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            2usize,
                                            &"struct ContainerConfig with 24 elements",
                                        ),
                                    );
                                }
                            };
                            let __field3 = match _serde::de::SeqAccess::next_element::<
                                bool,
                            >(&mut __seq)? {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            3usize,
                                            &"struct ContainerConfig with 24 elements",
                                        ),
                                    );
                                }
                            };
                            let __field4 = match _serde::de::SeqAccess::next_element::<
                                bool,
                            >(&mut __seq)? {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            4usize,
                                            &"struct ContainerConfig with 24 elements",
                                        ),
                                    );
                                }
                            };
                            let __field5 = match _serde::de::SeqAccess::next_element::<
                                bool,
                            >(&mut __seq)? {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            5usize,
                                            &"struct ContainerConfig with 24 elements",
                                        ),
                                    );
                                }
                            };
                            let __field6 = match _serde::de::SeqAccess::next_element::<
                                Option<HashMap<String, HashMap<String, String>>>,
                            >(&mut __seq)? {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            6usize,
                                            &"struct ContainerConfig with 24 elements",
                                        ),
                                    );
                                }
                            };
                            let __field7 = match _serde::de::SeqAccess::next_element::<
                                bool,
                            >(&mut __seq)? {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            7usize,
                                            &"struct ContainerConfig with 24 elements",
                                        ),
                                    );
                                }
                            };
                            let __field8 = match _serde::de::SeqAccess::next_element::<
                                bool,
                            >(&mut __seq)? {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            8usize,
                                            &"struct ContainerConfig with 24 elements",
                                        ),
                                    );
                                }
                            };
                            let __field9 = match _serde::de::SeqAccess::next_element::<
                                bool,
                            >(&mut __seq)? {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            9usize,
                                            &"struct ContainerConfig with 24 elements",
                                        ),
                                    );
                                }
                            };
                            let __field10 = match _serde::de::SeqAccess::next_element::<
                                Vec<String>,
                            >(&mut __seq)? {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            10usize,
                                            &"struct ContainerConfig with 24 elements",
                                        ),
                                    );
                                }
                            };
                            let __field11 = match _serde::de::SeqAccess::next_element::<
                                Option<Vec<String>>,
                            >(&mut __seq)? {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            11usize,
                                            &"struct ContainerConfig with 24 elements",
                                        ),
                                    );
                                }
                            };
                            let __field12 = match _serde::de::SeqAccess::next_element::<
                                Option<bool>,
                            >(&mut __seq)? {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            12usize,
                                            &"struct ContainerConfig with 24 elements",
                                        ),
                                    );
                                }
                            };
                            let __field13 = match _serde::de::SeqAccess::next_element::<
                                String,
                            >(&mut __seq)? {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            13usize,
                                            &"struct ContainerConfig with 24 elements",
                                        ),
                                    );
                                }
                            };
                            let __field14 = match _serde::de::SeqAccess::next_element::<
                                Option<HashMap<String, HashMap<String, String>>>,
                            >(&mut __seq)? {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            14usize,
                                            &"struct ContainerConfig with 24 elements",
                                        ),
                                    );
                                }
                            };
                            let __field15 = match _serde::de::SeqAccess::next_element::<
                                String,
                            >(&mut __seq)? {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            15usize,
                                            &"struct ContainerConfig with 24 elements",
                                        ),
                                    );
                                }
                            };
                            let __field16 = match _serde::de::SeqAccess::next_element::<
                                Option<Vec<String>>,
                            >(&mut __seq)? {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            16usize,
                                            &"struct ContainerConfig with 24 elements",
                                        ),
                                    );
                                }
                            };
                            let __field17 = match _serde::de::SeqAccess::next_element::<
                                Option<bool>,
                            >(&mut __seq)? {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            17usize,
                                            &"struct ContainerConfig with 24 elements",
                                        ),
                                    );
                                }
                            };
                            let __field18 = match _serde::de::SeqAccess::next_element::<
                                Option<String>,
                            >(&mut __seq)? {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            18usize,
                                            &"struct ContainerConfig with 24 elements",
                                        ),
                                    );
                                }
                            };
                            let __field19 = match _serde::de::SeqAccess::next_element::<
                                Option<Vec<String>>,
                            >(&mut __seq)? {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            19usize,
                                            &"struct ContainerConfig with 24 elements",
                                        ),
                                    );
                                }
                            };
                            let __field20 = match _serde::de::SeqAccess::next_element::<
                                Option<HashMap<String, String>>,
                            >(&mut __seq)? {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            20usize,
                                            &"struct ContainerConfig with 24 elements",
                                        ),
                                    );
                                }
                            };
                            let __field21 = match _serde::de::SeqAccess::next_element::<
                                Option<String>,
                            >(&mut __seq)? {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            21usize,
                                            &"struct ContainerConfig with 24 elements",
                                        ),
                                    );
                                }
                            };
                            let __field22 = match _serde::de::SeqAccess::next_element::<
                                Option<u32>,
                            >(&mut __seq)? {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            22usize,
                                            &"struct ContainerConfig with 24 elements",
                                        ),
                                    );
                                }
                            };
                            let __field23 = match _serde::de::SeqAccess::next_element::<
                                Option<Vec<String>>,
                            >(&mut __seq)? {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            23usize,
                                            &"struct ContainerConfig with 24 elements",
                                        ),
                                    );
                                }
                            };
                            _serde::__private::Ok(ContainerConfig {
                                hostname: __field0,
                                domainname: __field1,
                                user: __field2,
                                attach_stdin: __field3,
                                attach_stdout: __field4,
                                attach_stderr: __field5,
                                exposed_ports: __field6,
                                tty: __field7,
                                open_stdin: __field8,
                                stdin_once: __field9,
                                env: __field10,
                                cmd: __field11,
                                args_escaped: __field12,
                                image: __field13,
                                volumes: __field14,
                                working_dir: __field15,
                                entrypoint: __field16,
                                network_disabled: __field17,
                                mac_address: __field18,
                                on_build: __field19,
                                labels: __field20,
                                stop_signal: __field21,
                                stop_timeout: __field22,
                                shell: __field23,
                            })
                        }
                        #[inline]
                        fn visit_map<__A>(
                            self,
                            mut __map: __A,
                        ) -> _serde::__private::Result<Self::Value, __A::Error>
                        where
                            __A: _serde::de::MapAccess<'de>,
                        {
                            let mut __field0: _serde::__private::Option<String> = _serde::__private::None;
                            let mut __field1: _serde::__private::Option<String> = _serde::__private::None;
                            let mut __field2: _serde::__private::Option<String> = _serde::__private::None;
                            let mut __field3: _serde::__private::Option<bool> = _serde::__private::None;
                            let mut __field4: _serde::__private::Option<bool> = _serde::__private::None;
                            let mut __field5: _serde::__private::Option<bool> = _serde::__private::None;
                            let mut __field6: _serde::__private::Option<
                                Option<HashMap<String, HashMap<String, String>>>,
                            > = _serde::__private::None;
                            let mut __field7: _serde::__private::Option<bool> = _serde::__private::None;
                            let mut __field8: _serde::__private::Option<bool> = _serde::__private::None;
                            let mut __field9: _serde::__private::Option<bool> = _serde::__private::None;
                            let mut __field10: _serde::__private::Option<Vec<String>> = _serde::__private::None;
                            let mut __field11: _serde::__private::Option<
                                Option<Vec<String>>,
                            > = _serde::__private::None;
                            let mut __field12: _serde::__private::Option<Option<bool>> = _serde::__private::None;
                            let mut __field13: _serde::__private::Option<String> = _serde::__private::None;
                            let mut __field14: _serde::__private::Option<
                                Option<HashMap<String, HashMap<String, String>>>,
                            > = _serde::__private::None;
                            let mut __field15: _serde::__private::Option<String> = _serde::__private::None;
                            let mut __field16: _serde::__private::Option<
                                Option<Vec<String>>,
                            > = _serde::__private::None;
                            let mut __field17: _serde::__private::Option<Option<bool>> = _serde::__private::None;
                            let mut __field18: _serde::__private::Option<
                                Option<String>,
                            > = _serde::__private::None;
                            let mut __field19: _serde::__private::Option<
                                Option<Vec<String>>,
                            > = _serde::__private::None;
                            let mut __field20: _serde::__private::Option<
                                Option<HashMap<String, String>>,
                            > = _serde::__private::None;
                            let mut __field21: _serde::__private::Option<
                                Option<String>,
                            > = _serde::__private::None;
                            let mut __field22: _serde::__private::Option<Option<u32>> = _serde::__private::None;
                            let mut __field23: _serde::__private::Option<
                                Option<Vec<String>>,
                            > = _serde::__private::None;
                            while let _serde::__private::Some(__key) = _serde::de::MapAccess::next_key::<
                                __Field,
                            >(&mut __map)? {
                                match __key {
                                    __Field::__field0 => {
                                        if _serde::__private::Option::is_some(&__field0) {
                                            return _serde::__private::Err(
                                                <__A::Error as _serde::de::Error>::duplicate_field(
                                                    "Hostname",
                                                ),
                                            );
                                        }
                                        __field0 = _serde::__private::Some(
                                            _serde::de::MapAccess::next_value::<String>(&mut __map)?,
                                        );
                                    }
                                    __Field::__field1 => {
                                        if _serde::__private::Option::is_some(&__field1) {
                                            return _serde::__private::Err(
                                                <__A::Error as _serde::de::Error>::duplicate_field(
                                                    "Domainname",
                                                ),
                                            );
                                        }
                                        __field1 = _serde::__private::Some(
                                            _serde::de::MapAccess::next_value::<String>(&mut __map)?,
                                        );
                                    }
                                    __Field::__field2 => {
                                        if _serde::__private::Option::is_some(&__field2) {
                                            return _serde::__private::Err(
                                                <__A::Error as _serde::de::Error>::duplicate_field("User"),
                                            );
                                        }
                                        __field2 = _serde::__private::Some(
                                            _serde::de::MapAccess::next_value::<String>(&mut __map)?,
                                        );
                                    }
                                    __Field::__field3 => {
                                        if _serde::__private::Option::is_some(&__field3) {
                                            return _serde::__private::Err(
                                                <__A::Error as _serde::de::Error>::duplicate_field(
                                                    "AttachStdin",
                                                ),
                                            );
                                        }
                                        __field3 = _serde::__private::Some(
                                            _serde::de::MapAccess::next_value::<bool>(&mut __map)?,
                                        );
                                    }
                                    __Field::__field4 => {
                                        if _serde::__private::Option::is_some(&__field4) {
                                            return _serde::__private::Err(
                                                <__A::Error as _serde::de::Error>::duplicate_field(
                                                    "AttachStdout",
                                                ),
                                            );
                                        }
                                        __field4 = _serde::__private::Some(
                                            _serde::de::MapAccess::next_value::<bool>(&mut __map)?,
                                        );
                                    }
                                    __Field::__field5 => {
                                        if _serde::__private::Option::is_some(&__field5) {
                                            return _serde::__private::Err(
                                                <__A::Error as _serde::de::Error>::duplicate_field(
                                                    "AttachStderr",
                                                ),
                                            );
                                        }
                                        __field5 = _serde::__private::Some(
                                            _serde::de::MapAccess::next_value::<bool>(&mut __map)?,
                                        );
                                    }
                                    __Field::__field6 => {
                                        if _serde::__private::Option::is_some(&__field6) {
                                            return _serde::__private::Err(
                                                <__A::Error as _serde::de::Error>::duplicate_field(
                                                    "ExposedPorts",
                                                ),
                                            );
                                        }
                                        __field6 = _serde::__private::Some(
                                            _serde::de::MapAccess::next_value::<
                                                Option<HashMap<String, HashMap<String, String>>>,
                                            >(&mut __map)?,
                                        );
                                    }
                                    __Field::__field7 => {
                                        if _serde::__private::Option::is_some(&__field7) {
                                            return _serde::__private::Err(
                                                <__A::Error as _serde::de::Error>::duplicate_field("Tty"),
                                            );
                                        }
                                        __field7 = _serde::__private::Some(
                                            _serde::de::MapAccess::next_value::<bool>(&mut __map)?,
                                        );
                                    }
                                    __Field::__field8 => {
                                        if _serde::__private::Option::is_some(&__field8) {
                                            return _serde::__private::Err(
                                                <__A::Error as _serde::de::Error>::duplicate_field(
                                                    "OpenStdin",
                                                ),
                                            );
                                        }
                                        __field8 = _serde::__private::Some(
                                            _serde::de::MapAccess::next_value::<bool>(&mut __map)?,
                                        );
                                    }
                                    __Field::__field9 => {
                                        if _serde::__private::Option::is_some(&__field9) {
                                            return _serde::__private::Err(
                                                <__A::Error as _serde::de::Error>::duplicate_field(
                                                    "StdinOnce",
                                                ),
                                            );
                                        }
                                        __field9 = _serde::__private::Some(
                                            _serde::de::MapAccess::next_value::<bool>(&mut __map)?,
                                        );
                                    }
                                    __Field::__field10 => {
                                        if _serde::__private::Option::is_some(&__field10) {
                                            return _serde::__private::Err(
                                                <__A::Error as _serde::de::Error>::duplicate_field("Env"),
                                            );
                                        }
                                        __field10 = _serde::__private::Some(
                                            _serde::de::MapAccess::next_value::<
                                                Vec<String>,
                                            >(&mut __map)?,
                                        );
                                    }
                                    __Field::__field11 => {
                                        if _serde::__private::Option::is_some(&__field11) {
                                            return _serde::__private::Err(
                                                <__A::Error as _serde::de::Error>::duplicate_field("Cmd"),
                                            );
                                        }
                                        __field11 = _serde::__private::Some(
                                            _serde::de::MapAccess::next_value::<
                                                Option<Vec<String>>,
                                            >(&mut __map)?,
                                        );
                                    }
                                    __Field::__field12 => {
                                        if _serde::__private::Option::is_some(&__field12) {
                                            return _serde::__private::Err(
                                                <__A::Error as _serde::de::Error>::duplicate_field(
                                                    "ArgsEscaped",
                                                ),
                                            );
                                        }
                                        __field12 = _serde::__private::Some(
                                            _serde::de::MapAccess::next_value::<
                                                Option<bool>,
                                            >(&mut __map)?,
                                        );
                                    }
                                    __Field::__field13 => {
                                        if _serde::__private::Option::is_some(&__field13) {
                                            return _serde::__private::Err(
                                                <__A::Error as _serde::de::Error>::duplicate_field("Image"),
                                            );
                                        }
                                        __field13 = _serde::__private::Some(
                                            _serde::de::MapAccess::next_value::<String>(&mut __map)?,
                                        );
                                    }
                                    __Field::__field14 => {
                                        if _serde::__private::Option::is_some(&__field14) {
                                            return _serde::__private::Err(
                                                <__A::Error as _serde::de::Error>::duplicate_field(
                                                    "Volumes",
                                                ),
                                            );
                                        }
                                        __field14 = _serde::__private::Some(
                                            _serde::de::MapAccess::next_value::<
                                                Option<HashMap<String, HashMap<String, String>>>,
                                            >(&mut __map)?,
                                        );
                                    }
                                    __Field::__field15 => {
                                        if _serde::__private::Option::is_some(&__field15) {
                                            return _serde::__private::Err(
                                                <__A::Error as _serde::de::Error>::duplicate_field(
                                                    "WorkingDir",
                                                ),
                                            );
                                        }
                                        __field15 = _serde::__private::Some(
                                            _serde::de::MapAccess::next_value::<String>(&mut __map)?,
                                        );
                                    }
                                    __Field::__field16 => {
                                        if _serde::__private::Option::is_some(&__field16) {
                                            return _serde::__private::Err(
                                                <__A::Error as _serde::de::Error>::duplicate_field(
                                                    "Entrypoint",
                                                ),
                                            );
                                        }
                                        __field16 = _serde::__private::Some(
                                            _serde::de::MapAccess::next_value::<
                                                Option<Vec<String>>,
                                            >(&mut __map)?,
                                        );
                                    }
                                    __Field::__field17 => {
                                        if _serde::__private::Option::is_some(&__field17) {
                                            return _serde::__private::Err(
                                                <__A::Error as _serde::de::Error>::duplicate_field(
                                                    "NetworkDisabled",
                                                ),
                                            );
                                        }
                                        __field17 = _serde::__private::Some(
                                            _serde::de::MapAccess::next_value::<
                                                Option<bool>,
                                            >(&mut __map)?,
                                        );
                                    }
                                    __Field::__field18 => {
                                        if _serde::__private::Option::is_some(&__field18) {
                                            return _serde::__private::Err(
                                                <__A::Error as _serde::de::Error>::duplicate_field(
                                                    "MacAddress",
                                                ),
                                            );
                                        }
                                        __field18 = _serde::__private::Some(
                                            _serde::de::MapAccess::next_value::<
                                                Option<String>,
                                            >(&mut __map)?,
                                        );
                                    }
                                    __Field::__field19 => {
                                        if _serde::__private::Option::is_some(&__field19) {
                                            return _serde::__private::Err(
                                                <__A::Error as _serde::de::Error>::duplicate_field(
                                                    "OnBuild",
                                                ),
                                            );
                                        }
                                        __field19 = _serde::__private::Some(
                                            _serde::de::MapAccess::next_value::<
                                                Option<Vec<String>>,
                                            >(&mut __map)?,
                                        );
                                    }
                                    __Field::__field20 => {
                                        if _serde::__private::Option::is_some(&__field20) {
                                            return _serde::__private::Err(
                                                <__A::Error as _serde::de::Error>::duplicate_field("Labels"),
                                            );
                                        }
                                        __field20 = _serde::__private::Some(
                                            _serde::de::MapAccess::next_value::<
                                                Option<HashMap<String, String>>,
                                            >(&mut __map)?,
                                        );
                                    }
                                    __Field::__field21 => {
                                        if _serde::__private::Option::is_some(&__field21) {
                                            return _serde::__private::Err(
                                                <__A::Error as _serde::de::Error>::duplicate_field(
                                                    "StopSignal",
                                                ),
                                            );
                                        }
                                        __field21 = _serde::__private::Some(
                                            _serde::de::MapAccess::next_value::<
                                                Option<String>,
                                            >(&mut __map)?,
                                        );
                                    }
                                    __Field::__field22 => {
                                        if _serde::__private::Option::is_some(&__field22) {
                                            return _serde::__private::Err(
                                                <__A::Error as _serde::de::Error>::duplicate_field(
                                                    "StopTimeout",
                                                ),
                                            );
                                        }
                                        __field22 = _serde::__private::Some(
                                            _serde::de::MapAccess::next_value::<
                                                Option<u32>,
                                            >(&mut __map)?,
                                        );
                                    }
                                    __Field::__field23 => {
                                        if _serde::__private::Option::is_some(&__field23) {
                                            return _serde::__private::Err(
                                                <__A::Error as _serde::de::Error>::duplicate_field("Shell"),
                                            );
                                        }
                                        __field23 = _serde::__private::Some(
                                            _serde::de::MapAccess::next_value::<
                                                Option<Vec<String>>,
                                            >(&mut __map)?,
                                        );
                                    }
                                    _ => {
                                        let _ = _serde::de::MapAccess::next_value::<
                                            _serde::de::IgnoredAny,
                                        >(&mut __map)?;
                                    }
                                }
                            }
                            let __field0 = match __field0 {
                                _serde::__private::Some(__field0) => __field0,
                                _serde::__private::None => {
                                    _serde::__private::de::missing_field("Hostname")?
                                }
                            };
                            let __field1 = match __field1 {
                                _serde::__private::Some(__field1) => __field1,
                                _serde::__private::None => {
                                    _serde::__private::de::missing_field("Domainname")?
                                }
                            };
                            let __field2 = match __field2 {
                                _serde::__private::Some(__field2) => __field2,
                                _serde::__private::None => {
                                    _serde::__private::de::missing_field("User")?
                                }
                            };
                            let __field3 = match __field3 {
                                _serde::__private::Some(__field3) => __field3,
                                _serde::__private::None => {
                                    _serde::__private::de::missing_field("AttachStdin")?
                                }
                            };
                            let __field4 = match __field4 {
                                _serde::__private::Some(__field4) => __field4,
                                _serde::__private::None => {
                                    _serde::__private::de::missing_field("AttachStdout")?
                                }
                            };
                            let __field5 = match __field5 {
                                _serde::__private::Some(__field5) => __field5,
                                _serde::__private::None => {
                                    _serde::__private::de::missing_field("AttachStderr")?
                                }
                            };
                            let __field6 = match __field6 {
                                _serde::__private::Some(__field6) => __field6,
                                _serde::__private::None => {
                                    _serde::__private::de::missing_field("ExposedPorts")?
                                }
                            };
                            let __field7 = match __field7 {
                                _serde::__private::Some(__field7) => __field7,
                                _serde::__private::None => {
                                    _serde::__private::de::missing_field("Tty")?
                                }
                            };
                            let __field8 = match __field8 {
                                _serde::__private::Some(__field8) => __field8,
                                _serde::__private::None => {
                                    _serde::__private::de::missing_field("OpenStdin")?
                                }
                            };
                            let __field9 = match __field9 {
                                _serde::__private::Some(__field9) => __field9,
                                _serde::__private::None => {
                                    _serde::__private::de::missing_field("StdinOnce")?
                                }
                            };
                            let __field10 = match __field10 {
                                _serde::__private::Some(__field10) => __field10,
                                _serde::__private::None => {
                                    _serde::__private::de::missing_field("Env")?
                                }
                            };
                            let __field11 = match __field11 {
                                _serde::__private::Some(__field11) => __field11,
                                _serde::__private::None => {
                                    _serde::__private::de::missing_field("Cmd")?
                                }
                            };
                            let __field12 = match __field12 {
                                _serde::__private::Some(__field12) => __field12,
                                _serde::__private::None => {
                                    _serde::__private::de::missing_field("ArgsEscaped")?
                                }
                            };
                            let __field13 = match __field13 {
                                _serde::__private::Some(__field13) => __field13,
                                _serde::__private::None => {
                                    _serde::__private::de::missing_field("Image")?
                                }
                            };
                            let __field14 = match __field14 {
                                _serde::__private::Some(__field14) => __field14,
                                _serde::__private::None => {
                                    _serde::__private::de::missing_field("Volumes")?
                                }
                            };
                            let __field15 = match __field15 {
                                _serde::__private::Some(__field15) => __field15,
                                _serde::__private::None => {
                                    _serde::__private::de::missing_field("WorkingDir")?
                                }
                            };
                            let __field16 = match __field16 {
                                _serde::__private::Some(__field16) => __field16,
                                _serde::__private::None => {
                                    _serde::__private::de::missing_field("Entrypoint")?
                                }
                            };
                            let __field17 = match __field17 {
                                _serde::__private::Some(__field17) => __field17,
                                _serde::__private::None => {
                                    _serde::__private::de::missing_field("NetworkDisabled")?
                                }
                            };
                            let __field18 = match __field18 {
                                _serde::__private::Some(__field18) => __field18,
                                _serde::__private::None => {
                                    _serde::__private::de::missing_field("MacAddress")?
                                }
                            };
                            let __field19 = match __field19 {
                                _serde::__private::Some(__field19) => __field19,
                                _serde::__private::None => {
                                    _serde::__private::de::missing_field("OnBuild")?
                                }
                            };
                            let __field20 = match __field20 {
                                _serde::__private::Some(__field20) => __field20,
                                _serde::__private::None => {
                                    _serde::__private::de::missing_field("Labels")?
                                }
                            };
                            let __field21 = match __field21 {
                                _serde::__private::Some(__field21) => __field21,
                                _serde::__private::None => {
                                    _serde::__private::de::missing_field("StopSignal")?
                                }
                            };
                            let __field22 = match __field22 {
                                _serde::__private::Some(__field22) => __field22,
                                _serde::__private::None => {
                                    _serde::__private::de::missing_field("StopTimeout")?
                                }
                            };
                            let __field23 = match __field23 {
                                _serde::__private::Some(__field23) => __field23,
                                _serde::__private::None => {
                                    _serde::__private::de::missing_field("Shell")?
                                }
                            };
                            _serde::__private::Ok(ContainerConfig {
                                hostname: __field0,
                                domainname: __field1,
                                user: __field2,
                                attach_stdin: __field3,
                                attach_stdout: __field4,
                                attach_stderr: __field5,
                                exposed_ports: __field6,
                                tty: __field7,
                                open_stdin: __field8,
                                stdin_once: __field9,
                                env: __field10,
                                cmd: __field11,
                                args_escaped: __field12,
                                image: __field13,
                                volumes: __field14,
                                working_dir: __field15,
                                entrypoint: __field16,
                                network_disabled: __field17,
                                mac_address: __field18,
                                on_build: __field19,
                                labels: __field20,
                                stop_signal: __field21,
                                stop_timeout: __field22,
                                shell: __field23,
                            })
                        }
                    }
                    #[doc(hidden)]
                    const FIELDS: &'static [&'static str] = &[
                        "Hostname",
                        "Domainname",
                        "User",
                        "AttachStdin",
                        "AttachStdout",
                        "AttachStderr",
                        "ExposedPorts",
                        "Tty",
                        "OpenStdin",
                        "StdinOnce",
                        "Env",
                        "Cmd",
                        "ArgsEscaped",
                        "Image",
                        "Volumes",
                        "WorkingDir",
                        "Entrypoint",
                        "NetworkDisabled",
                        "MacAddress",
                        "OnBuild",
                        "Labels",
                        "StopSignal",
                        "StopTimeout",
                        "Shell",
                    ];
                    _serde::Deserializer::deserialize_struct(
                        __deserializer,
                        "ContainerConfig",
                        FIELDS,
                        __Visitor {
                            marker: _serde::__private::PhantomData::<ContainerConfig>,
                            lifetime: _serde::__private::PhantomData,
                        },
                    )
                }
            }
        };
    }
    pub mod network {
        use std::collections::HashMap;
        use serde::{Deserialize, Serialize};
        type PortDescription = HashMap<String, Option<Vec<HashMap<String, String>>>>;
        #[serde(rename_all = "PascalCase")]
        pub struct NetworkSettings {
            pub bridge: String,
            pub gateway: String,
            #[serde(rename = "IPAddress")]
            pub ip_address: String,
            #[serde(rename = "IPPrefixLen")]
            pub ip_prefix_len: u64,
            pub mac_address: String,
            pub ports: Option<PortDescription>,
            pub networks: HashMap<String, NetworkEntry>,
        }
        #[automatically_derived]
        impl ::core::clone::Clone for NetworkSettings {
            #[inline]
            fn clone(&self) -> NetworkSettings {
                NetworkSettings {
                    bridge: ::core::clone::Clone::clone(&self.bridge),
                    gateway: ::core::clone::Clone::clone(&self.gateway),
                    ip_address: ::core::clone::Clone::clone(&self.ip_address),
                    ip_prefix_len: ::core::clone::Clone::clone(&self.ip_prefix_len),
                    mac_address: ::core::clone::Clone::clone(&self.mac_address),
                    ports: ::core::clone::Clone::clone(&self.ports),
                    networks: ::core::clone::Clone::clone(&self.networks),
                }
            }
        }
        #[automatically_derived]
        impl ::core::fmt::Debug for NetworkSettings {
            #[inline]
            fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                let names: &'static _ = &[
                    "bridge",
                    "gateway",
                    "ip_address",
                    "ip_prefix_len",
                    "mac_address",
                    "ports",
                    "networks",
                ];
                let values: &[&dyn ::core::fmt::Debug] = &[
                    &self.bridge,
                    &self.gateway,
                    &self.ip_address,
                    &self.ip_prefix_len,
                    &self.mac_address,
                    &self.ports,
                    &&self.networks,
                ];
                ::core::fmt::Formatter::debug_struct_fields_finish(
                    f,
                    "NetworkSettings",
                    names,
                    values,
                )
            }
        }
        #[doc(hidden)]
        #[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
        const _: () = {
            #[allow(unused_extern_crates, clippy::useless_attribute)]
            extern crate serde as _serde;
            #[automatically_derived]
            impl _serde::Serialize for NetworkSettings {
                fn serialize<__S>(
                    &self,
                    __serializer: __S,
                ) -> _serde::__private::Result<__S::Ok, __S::Error>
                where
                    __S: _serde::Serializer,
                {
                    let mut __serde_state = _serde::Serializer::serialize_struct(
                        __serializer,
                        "NetworkSettings",
                        false as usize + 1 + 1 + 1 + 1 + 1 + 1 + 1,
                    )?;
                    _serde::ser::SerializeStruct::serialize_field(
                        &mut __serde_state,
                        "Bridge",
                        &self.bridge,
                    )?;
                    _serde::ser::SerializeStruct::serialize_field(
                        &mut __serde_state,
                        "Gateway",
                        &self.gateway,
                    )?;
                    _serde::ser::SerializeStruct::serialize_field(
                        &mut __serde_state,
                        "IPAddress",
                        &self.ip_address,
                    )?;
                    _serde::ser::SerializeStruct::serialize_field(
                        &mut __serde_state,
                        "IPPrefixLen",
                        &self.ip_prefix_len,
                    )?;
                    _serde::ser::SerializeStruct::serialize_field(
                        &mut __serde_state,
                        "MacAddress",
                        &self.mac_address,
                    )?;
                    _serde::ser::SerializeStruct::serialize_field(
                        &mut __serde_state,
                        "Ports",
                        &self.ports,
                    )?;
                    _serde::ser::SerializeStruct::serialize_field(
                        &mut __serde_state,
                        "Networks",
                        &self.networks,
                    )?;
                    _serde::ser::SerializeStruct::end(__serde_state)
                }
            }
        };
        #[doc(hidden)]
        #[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
        const _: () = {
            #[allow(unused_extern_crates, clippy::useless_attribute)]
            extern crate serde as _serde;
            #[automatically_derived]
            impl<'de> _serde::Deserialize<'de> for NetworkSettings {
                fn deserialize<__D>(
                    __deserializer: __D,
                ) -> _serde::__private::Result<Self, __D::Error>
                where
                    __D: _serde::Deserializer<'de>,
                {
                    #[allow(non_camel_case_types)]
                    #[doc(hidden)]
                    enum __Field {
                        __field0,
                        __field1,
                        __field2,
                        __field3,
                        __field4,
                        __field5,
                        __field6,
                        __ignore,
                    }
                    #[doc(hidden)]
                    struct __FieldVisitor;
                    impl<'de> _serde::de::Visitor<'de> for __FieldVisitor {
                        type Value = __Field;
                        fn expecting(
                            &self,
                            __formatter: &mut _serde::__private::Formatter,
                        ) -> _serde::__private::fmt::Result {
                            _serde::__private::Formatter::write_str(
                                __formatter,
                                "field identifier",
                            )
                        }
                        fn visit_u64<__E>(
                            self,
                            __value: u64,
                        ) -> _serde::__private::Result<Self::Value, __E>
                        where
                            __E: _serde::de::Error,
                        {
                            match __value {
                                0u64 => _serde::__private::Ok(__Field::__field0),
                                1u64 => _serde::__private::Ok(__Field::__field1),
                                2u64 => _serde::__private::Ok(__Field::__field2),
                                3u64 => _serde::__private::Ok(__Field::__field3),
                                4u64 => _serde::__private::Ok(__Field::__field4),
                                5u64 => _serde::__private::Ok(__Field::__field5),
                                6u64 => _serde::__private::Ok(__Field::__field6),
                                _ => _serde::__private::Ok(__Field::__ignore),
                            }
                        }
                        fn visit_str<__E>(
                            self,
                            __value: &str,
                        ) -> _serde::__private::Result<Self::Value, __E>
                        where
                            __E: _serde::de::Error,
                        {
                            match __value {
                                "Bridge" => _serde::__private::Ok(__Field::__field0),
                                "Gateway" => _serde::__private::Ok(__Field::__field1),
                                "IPAddress" => _serde::__private::Ok(__Field::__field2),
                                "IPPrefixLen" => _serde::__private::Ok(__Field::__field3),
                                "MacAddress" => _serde::__private::Ok(__Field::__field4),
                                "Ports" => _serde::__private::Ok(__Field::__field5),
                                "Networks" => _serde::__private::Ok(__Field::__field6),
                                _ => _serde::__private::Ok(__Field::__ignore),
                            }
                        }
                        fn visit_bytes<__E>(
                            self,
                            __value: &[u8],
                        ) -> _serde::__private::Result<Self::Value, __E>
                        where
                            __E: _serde::de::Error,
                        {
                            match __value {
                                b"Bridge" => _serde::__private::Ok(__Field::__field0),
                                b"Gateway" => _serde::__private::Ok(__Field::__field1),
                                b"IPAddress" => _serde::__private::Ok(__Field::__field2),
                                b"IPPrefixLen" => _serde::__private::Ok(__Field::__field3),
                                b"MacAddress" => _serde::__private::Ok(__Field::__field4),
                                b"Ports" => _serde::__private::Ok(__Field::__field5),
                                b"Networks" => _serde::__private::Ok(__Field::__field6),
                                _ => _serde::__private::Ok(__Field::__ignore),
                            }
                        }
                    }
                    impl<'de> _serde::Deserialize<'de> for __Field {
                        #[inline]
                        fn deserialize<__D>(
                            __deserializer: __D,
                        ) -> _serde::__private::Result<Self, __D::Error>
                        where
                            __D: _serde::Deserializer<'de>,
                        {
                            _serde::Deserializer::deserialize_identifier(
                                __deserializer,
                                __FieldVisitor,
                            )
                        }
                    }
                    #[doc(hidden)]
                    struct __Visitor<'de> {
                        marker: _serde::__private::PhantomData<NetworkSettings>,
                        lifetime: _serde::__private::PhantomData<&'de ()>,
                    }
                    impl<'de> _serde::de::Visitor<'de> for __Visitor<'de> {
                        type Value = NetworkSettings;
                        fn expecting(
                            &self,
                            __formatter: &mut _serde::__private::Formatter,
                        ) -> _serde::__private::fmt::Result {
                            _serde::__private::Formatter::write_str(
                                __formatter,
                                "struct NetworkSettings",
                            )
                        }
                        #[inline]
                        fn visit_seq<__A>(
                            self,
                            mut __seq: __A,
                        ) -> _serde::__private::Result<Self::Value, __A::Error>
                        where
                            __A: _serde::de::SeqAccess<'de>,
                        {
                            let __field0 = match _serde::de::SeqAccess::next_element::<
                                String,
                            >(&mut __seq)? {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            0usize,
                                            &"struct NetworkSettings with 7 elements",
                                        ),
                                    );
                                }
                            };
                            let __field1 = match _serde::de::SeqAccess::next_element::<
                                String,
                            >(&mut __seq)? {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            1usize,
                                            &"struct NetworkSettings with 7 elements",
                                        ),
                                    );
                                }
                            };
                            let __field2 = match _serde::de::SeqAccess::next_element::<
                                String,
                            >(&mut __seq)? {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            2usize,
                                            &"struct NetworkSettings with 7 elements",
                                        ),
                                    );
                                }
                            };
                            let __field3 = match _serde::de::SeqAccess::next_element::<
                                u64,
                            >(&mut __seq)? {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            3usize,
                                            &"struct NetworkSettings with 7 elements",
                                        ),
                                    );
                                }
                            };
                            let __field4 = match _serde::de::SeqAccess::next_element::<
                                String,
                            >(&mut __seq)? {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            4usize,
                                            &"struct NetworkSettings with 7 elements",
                                        ),
                                    );
                                }
                            };
                            let __field5 = match _serde::de::SeqAccess::next_element::<
                                Option<PortDescription>,
                            >(&mut __seq)? {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            5usize,
                                            &"struct NetworkSettings with 7 elements",
                                        ),
                                    );
                                }
                            };
                            let __field6 = match _serde::de::SeqAccess::next_element::<
                                HashMap<String, NetworkEntry>,
                            >(&mut __seq)? {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            6usize,
                                            &"struct NetworkSettings with 7 elements",
                                        ),
                                    );
                                }
                            };
                            _serde::__private::Ok(NetworkSettings {
                                bridge: __field0,
                                gateway: __field1,
                                ip_address: __field2,
                                ip_prefix_len: __field3,
                                mac_address: __field4,
                                ports: __field5,
                                networks: __field6,
                            })
                        }
                        #[inline]
                        fn visit_map<__A>(
                            self,
                            mut __map: __A,
                        ) -> _serde::__private::Result<Self::Value, __A::Error>
                        where
                            __A: _serde::de::MapAccess<'de>,
                        {
                            let mut __field0: _serde::__private::Option<String> = _serde::__private::None;
                            let mut __field1: _serde::__private::Option<String> = _serde::__private::None;
                            let mut __field2: _serde::__private::Option<String> = _serde::__private::None;
                            let mut __field3: _serde::__private::Option<u64> = _serde::__private::None;
                            let mut __field4: _serde::__private::Option<String> = _serde::__private::None;
                            let mut __field5: _serde::__private::Option<
                                Option<PortDescription>,
                            > = _serde::__private::None;
                            let mut __field6: _serde::__private::Option<
                                HashMap<String, NetworkEntry>,
                            > = _serde::__private::None;
                            while let _serde::__private::Some(__key) = _serde::de::MapAccess::next_key::<
                                __Field,
                            >(&mut __map)? {
                                match __key {
                                    __Field::__field0 => {
                                        if _serde::__private::Option::is_some(&__field0) {
                                            return _serde::__private::Err(
                                                <__A::Error as _serde::de::Error>::duplicate_field("Bridge"),
                                            );
                                        }
                                        __field0 = _serde::__private::Some(
                                            _serde::de::MapAccess::next_value::<String>(&mut __map)?,
                                        );
                                    }
                                    __Field::__field1 => {
                                        if _serde::__private::Option::is_some(&__field1) {
                                            return _serde::__private::Err(
                                                <__A::Error as _serde::de::Error>::duplicate_field(
                                                    "Gateway",
                                                ),
                                            );
                                        }
                                        __field1 = _serde::__private::Some(
                                            _serde::de::MapAccess::next_value::<String>(&mut __map)?,
                                        );
                                    }
                                    __Field::__field2 => {
                                        if _serde::__private::Option::is_some(&__field2) {
                                            return _serde::__private::Err(
                                                <__A::Error as _serde::de::Error>::duplicate_field(
                                                    "IPAddress",
                                                ),
                                            );
                                        }
                                        __field2 = _serde::__private::Some(
                                            _serde::de::MapAccess::next_value::<String>(&mut __map)?,
                                        );
                                    }
                                    __Field::__field3 => {
                                        if _serde::__private::Option::is_some(&__field3) {
                                            return _serde::__private::Err(
                                                <__A::Error as _serde::de::Error>::duplicate_field(
                                                    "IPPrefixLen",
                                                ),
                                            );
                                        }
                                        __field3 = _serde::__private::Some(
                                            _serde::de::MapAccess::next_value::<u64>(&mut __map)?,
                                        );
                                    }
                                    __Field::__field4 => {
                                        if _serde::__private::Option::is_some(&__field4) {
                                            return _serde::__private::Err(
                                                <__A::Error as _serde::de::Error>::duplicate_field(
                                                    "MacAddress",
                                                ),
                                            );
                                        }
                                        __field4 = _serde::__private::Some(
                                            _serde::de::MapAccess::next_value::<String>(&mut __map)?,
                                        );
                                    }
                                    __Field::__field5 => {
                                        if _serde::__private::Option::is_some(&__field5) {
                                            return _serde::__private::Err(
                                                <__A::Error as _serde::de::Error>::duplicate_field("Ports"),
                                            );
                                        }
                                        __field5 = _serde::__private::Some(
                                            _serde::de::MapAccess::next_value::<
                                                Option<PortDescription>,
                                            >(&mut __map)?,
                                        );
                                    }
                                    __Field::__field6 => {
                                        if _serde::__private::Option::is_some(&__field6) {
                                            return _serde::__private::Err(
                                                <__A::Error as _serde::de::Error>::duplicate_field(
                                                    "Networks",
                                                ),
                                            );
                                        }
                                        __field6 = _serde::__private::Some(
                                            _serde::de::MapAccess::next_value::<
                                                HashMap<String, NetworkEntry>,
                                            >(&mut __map)?,
                                        );
                                    }
                                    _ => {
                                        let _ = _serde::de::MapAccess::next_value::<
                                            _serde::de::IgnoredAny,
                                        >(&mut __map)?;
                                    }
                                }
                            }
                            let __field0 = match __field0 {
                                _serde::__private::Some(__field0) => __field0,
                                _serde::__private::None => {
                                    _serde::__private::de::missing_field("Bridge")?
                                }
                            };
                            let __field1 = match __field1 {
                                _serde::__private::Some(__field1) => __field1,
                                _serde::__private::None => {
                                    _serde::__private::de::missing_field("Gateway")?
                                }
                            };
                            let __field2 = match __field2 {
                                _serde::__private::Some(__field2) => __field2,
                                _serde::__private::None => {
                                    _serde::__private::de::missing_field("IPAddress")?
                                }
                            };
                            let __field3 = match __field3 {
                                _serde::__private::Some(__field3) => __field3,
                                _serde::__private::None => {
                                    _serde::__private::de::missing_field("IPPrefixLen")?
                                }
                            };
                            let __field4 = match __field4 {
                                _serde::__private::Some(__field4) => __field4,
                                _serde::__private::None => {
                                    _serde::__private::de::missing_field("MacAddress")?
                                }
                            };
                            let __field5 = match __field5 {
                                _serde::__private::Some(__field5) => __field5,
                                _serde::__private::None => {
                                    _serde::__private::de::missing_field("Ports")?
                                }
                            };
                            let __field6 = match __field6 {
                                _serde::__private::Some(__field6) => __field6,
                                _serde::__private::None => {
                                    _serde::__private::de::missing_field("Networks")?
                                }
                            };
                            _serde::__private::Ok(NetworkSettings {
                                bridge: __field0,
                                gateway: __field1,
                                ip_address: __field2,
                                ip_prefix_len: __field3,
                                mac_address: __field4,
                                ports: __field5,
                                networks: __field6,
                            })
                        }
                    }
                    #[doc(hidden)]
                    const FIELDS: &'static [&'static str] = &[
                        "Bridge",
                        "Gateway",
                        "IPAddress",
                        "IPPrefixLen",
                        "MacAddress",
                        "Ports",
                        "Networks",
                    ];
                    _serde::Deserializer::deserialize_struct(
                        __deserializer,
                        "NetworkSettings",
                        FIELDS,
                        __Visitor {
                            marker: _serde::__private::PhantomData::<NetworkSettings>,
                            lifetime: _serde::__private::PhantomData,
                        },
                    )
                }
            }
        };
        #[serde(rename_all = "PascalCase")]
        pub struct NetworkEntry {
            #[serde(rename = "NetworkID")]
            pub network_id: String,
            #[serde(rename = "EndpointID")]
            pub endpoint_id: String,
            pub gateway: String,
            #[serde(rename = "IPAddress")]
            pub ip_address: String,
            #[serde(rename = "IPPrefixLen")]
            pub ip_prefix_len: u64,
            #[serde(rename = "IPv6Gateway")]
            pub ipv6_gateway: String,
            #[serde(rename = "GlobalIPv6Address")]
            pub global_ipv6_address: String,
            #[serde(rename = "GlobalIPv6PrefixLen")]
            pub global_ipv6_prefix_len: u64,
            pub mac_address: String,
            pub links: Option<Vec<String>>,
            pub aliases: Option<Vec<String>>,
            #[serde(rename = "IPAMConfig")]
            pub ipam_config: Option<EndpointIPAMConfig>,
        }
        #[automatically_derived]
        impl ::core::clone::Clone for NetworkEntry {
            #[inline]
            fn clone(&self) -> NetworkEntry {
                NetworkEntry {
                    network_id: ::core::clone::Clone::clone(&self.network_id),
                    endpoint_id: ::core::clone::Clone::clone(&self.endpoint_id),
                    gateway: ::core::clone::Clone::clone(&self.gateway),
                    ip_address: ::core::clone::Clone::clone(&self.ip_address),
                    ip_prefix_len: ::core::clone::Clone::clone(&self.ip_prefix_len),
                    ipv6_gateway: ::core::clone::Clone::clone(&self.ipv6_gateway),
                    global_ipv6_address: ::core::clone::Clone::clone(
                        &self.global_ipv6_address,
                    ),
                    global_ipv6_prefix_len: ::core::clone::Clone::clone(
                        &self.global_ipv6_prefix_len,
                    ),
                    mac_address: ::core::clone::Clone::clone(&self.mac_address),
                    links: ::core::clone::Clone::clone(&self.links),
                    aliases: ::core::clone::Clone::clone(&self.aliases),
                    ipam_config: ::core::clone::Clone::clone(&self.ipam_config),
                }
            }
        }
        #[automatically_derived]
        impl ::core::fmt::Debug for NetworkEntry {
            #[inline]
            fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                let names: &'static _ = &[
                    "network_id",
                    "endpoint_id",
                    "gateway",
                    "ip_address",
                    "ip_prefix_len",
                    "ipv6_gateway",
                    "global_ipv6_address",
                    "global_ipv6_prefix_len",
                    "mac_address",
                    "links",
                    "aliases",
                    "ipam_config",
                ];
                let values: &[&dyn ::core::fmt::Debug] = &[
                    &self.network_id,
                    &self.endpoint_id,
                    &self.gateway,
                    &self.ip_address,
                    &self.ip_prefix_len,
                    &self.ipv6_gateway,
                    &self.global_ipv6_address,
                    &self.global_ipv6_prefix_len,
                    &self.mac_address,
                    &self.links,
                    &self.aliases,
                    &&self.ipam_config,
                ];
                ::core::fmt::Formatter::debug_struct_fields_finish(
                    f,
                    "NetworkEntry",
                    names,
                    values,
                )
            }
        }
        #[doc(hidden)]
        #[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
        const _: () = {
            #[allow(unused_extern_crates, clippy::useless_attribute)]
            extern crate serde as _serde;
            #[automatically_derived]
            impl _serde::Serialize for NetworkEntry {
                fn serialize<__S>(
                    &self,
                    __serializer: __S,
                ) -> _serde::__private::Result<__S::Ok, __S::Error>
                where
                    __S: _serde::Serializer,
                {
                    let mut __serde_state = _serde::Serializer::serialize_struct(
                        __serializer,
                        "NetworkEntry",
                        false as usize + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1,
                    )?;
                    _serde::ser::SerializeStruct::serialize_field(
                        &mut __serde_state,
                        "NetworkID",
                        &self.network_id,
                    )?;
                    _serde::ser::SerializeStruct::serialize_field(
                        &mut __serde_state,
                        "EndpointID",
                        &self.endpoint_id,
                    )?;
                    _serde::ser::SerializeStruct::serialize_field(
                        &mut __serde_state,
                        "Gateway",
                        &self.gateway,
                    )?;
                    _serde::ser::SerializeStruct::serialize_field(
                        &mut __serde_state,
                        "IPAddress",
                        &self.ip_address,
                    )?;
                    _serde::ser::SerializeStruct::serialize_field(
                        &mut __serde_state,
                        "IPPrefixLen",
                        &self.ip_prefix_len,
                    )?;
                    _serde::ser::SerializeStruct::serialize_field(
                        &mut __serde_state,
                        "IPv6Gateway",
                        &self.ipv6_gateway,
                    )?;
                    _serde::ser::SerializeStruct::serialize_field(
                        &mut __serde_state,
                        "GlobalIPv6Address",
                        &self.global_ipv6_address,
                    )?;
                    _serde::ser::SerializeStruct::serialize_field(
                        &mut __serde_state,
                        "GlobalIPv6PrefixLen",
                        &self.global_ipv6_prefix_len,
                    )?;
                    _serde::ser::SerializeStruct::serialize_field(
                        &mut __serde_state,
                        "MacAddress",
                        &self.mac_address,
                    )?;
                    _serde::ser::SerializeStruct::serialize_field(
                        &mut __serde_state,
                        "Links",
                        &self.links,
                    )?;
                    _serde::ser::SerializeStruct::serialize_field(
                        &mut __serde_state,
                        "Aliases",
                        &self.aliases,
                    )?;
                    _serde::ser::SerializeStruct::serialize_field(
                        &mut __serde_state,
                        "IPAMConfig",
                        &self.ipam_config,
                    )?;
                    _serde::ser::SerializeStruct::end(__serde_state)
                }
            }
        };
        #[doc(hidden)]
        #[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
        const _: () = {
            #[allow(unused_extern_crates, clippy::useless_attribute)]
            extern crate serde as _serde;
            #[automatically_derived]
            impl<'de> _serde::Deserialize<'de> for NetworkEntry {
                fn deserialize<__D>(
                    __deserializer: __D,
                ) -> _serde::__private::Result<Self, __D::Error>
                where
                    __D: _serde::Deserializer<'de>,
                {
                    #[allow(non_camel_case_types)]
                    #[doc(hidden)]
                    enum __Field {
                        __field0,
                        __field1,
                        __field2,
                        __field3,
                        __field4,
                        __field5,
                        __field6,
                        __field7,
                        __field8,
                        __field9,
                        __field10,
                        __field11,
                        __ignore,
                    }
                    #[doc(hidden)]
                    struct __FieldVisitor;
                    impl<'de> _serde::de::Visitor<'de> for __FieldVisitor {
                        type Value = __Field;
                        fn expecting(
                            &self,
                            __formatter: &mut _serde::__private::Formatter,
                        ) -> _serde::__private::fmt::Result {
                            _serde::__private::Formatter::write_str(
                                __formatter,
                                "field identifier",
                            )
                        }
                        fn visit_u64<__E>(
                            self,
                            __value: u64,
                        ) -> _serde::__private::Result<Self::Value, __E>
                        where
                            __E: _serde::de::Error,
                        {
                            match __value {
                                0u64 => _serde::__private::Ok(__Field::__field0),
                                1u64 => _serde::__private::Ok(__Field::__field1),
                                2u64 => _serde::__private::Ok(__Field::__field2),
                                3u64 => _serde::__private::Ok(__Field::__field3),
                                4u64 => _serde::__private::Ok(__Field::__field4),
                                5u64 => _serde::__private::Ok(__Field::__field5),
                                6u64 => _serde::__private::Ok(__Field::__field6),
                                7u64 => _serde::__private::Ok(__Field::__field7),
                                8u64 => _serde::__private::Ok(__Field::__field8),
                                9u64 => _serde::__private::Ok(__Field::__field9),
                                10u64 => _serde::__private::Ok(__Field::__field10),
                                11u64 => _serde::__private::Ok(__Field::__field11),
                                _ => _serde::__private::Ok(__Field::__ignore),
                            }
                        }
                        fn visit_str<__E>(
                            self,
                            __value: &str,
                        ) -> _serde::__private::Result<Self::Value, __E>
                        where
                            __E: _serde::de::Error,
                        {
                            match __value {
                                "NetworkID" => _serde::__private::Ok(__Field::__field0),
                                "EndpointID" => _serde::__private::Ok(__Field::__field1),
                                "Gateway" => _serde::__private::Ok(__Field::__field2),
                                "IPAddress" => _serde::__private::Ok(__Field::__field3),
                                "IPPrefixLen" => _serde::__private::Ok(__Field::__field4),
                                "IPv6Gateway" => _serde::__private::Ok(__Field::__field5),
                                "GlobalIPv6Address" => {
                                    _serde::__private::Ok(__Field::__field6)
                                }
                                "GlobalIPv6PrefixLen" => {
                                    _serde::__private::Ok(__Field::__field7)
                                }
                                "MacAddress" => _serde::__private::Ok(__Field::__field8),
                                "Links" => _serde::__private::Ok(__Field::__field9),
                                "Aliases" => _serde::__private::Ok(__Field::__field10),
                                "IPAMConfig" => _serde::__private::Ok(__Field::__field11),
                                _ => _serde::__private::Ok(__Field::__ignore),
                            }
                        }
                        fn visit_bytes<__E>(
                            self,
                            __value: &[u8],
                        ) -> _serde::__private::Result<Self::Value, __E>
                        where
                            __E: _serde::de::Error,
                        {
                            match __value {
                                b"NetworkID" => _serde::__private::Ok(__Field::__field0),
                                b"EndpointID" => _serde::__private::Ok(__Field::__field1),
                                b"Gateway" => _serde::__private::Ok(__Field::__field2),
                                b"IPAddress" => _serde::__private::Ok(__Field::__field3),
                                b"IPPrefixLen" => _serde::__private::Ok(__Field::__field4),
                                b"IPv6Gateway" => _serde::__private::Ok(__Field::__field5),
                                b"GlobalIPv6Address" => {
                                    _serde::__private::Ok(__Field::__field6)
                                }
                                b"GlobalIPv6PrefixLen" => {
                                    _serde::__private::Ok(__Field::__field7)
                                }
                                b"MacAddress" => _serde::__private::Ok(__Field::__field8),
                                b"Links" => _serde::__private::Ok(__Field::__field9),
                                b"Aliases" => _serde::__private::Ok(__Field::__field10),
                                b"IPAMConfig" => _serde::__private::Ok(__Field::__field11),
                                _ => _serde::__private::Ok(__Field::__ignore),
                            }
                        }
                    }
                    impl<'de> _serde::Deserialize<'de> for __Field {
                        #[inline]
                        fn deserialize<__D>(
                            __deserializer: __D,
                        ) -> _serde::__private::Result<Self, __D::Error>
                        where
                            __D: _serde::Deserializer<'de>,
                        {
                            _serde::Deserializer::deserialize_identifier(
                                __deserializer,
                                __FieldVisitor,
                            )
                        }
                    }
                    #[doc(hidden)]
                    struct __Visitor<'de> {
                        marker: _serde::__private::PhantomData<NetworkEntry>,
                        lifetime: _serde::__private::PhantomData<&'de ()>,
                    }
                    impl<'de> _serde::de::Visitor<'de> for __Visitor<'de> {
                        type Value = NetworkEntry;
                        fn expecting(
                            &self,
                            __formatter: &mut _serde::__private::Formatter,
                        ) -> _serde::__private::fmt::Result {
                            _serde::__private::Formatter::write_str(
                                __formatter,
                                "struct NetworkEntry",
                            )
                        }
                        #[inline]
                        fn visit_seq<__A>(
                            self,
                            mut __seq: __A,
                        ) -> _serde::__private::Result<Self::Value, __A::Error>
                        where
                            __A: _serde::de::SeqAccess<'de>,
                        {
                            let __field0 = match _serde::de::SeqAccess::next_element::<
                                String,
                            >(&mut __seq)? {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            0usize,
                                            &"struct NetworkEntry with 12 elements",
                                        ),
                                    );
                                }
                            };
                            let __field1 = match _serde::de::SeqAccess::next_element::<
                                String,
                            >(&mut __seq)? {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            1usize,
                                            &"struct NetworkEntry with 12 elements",
                                        ),
                                    );
                                }
                            };
                            let __field2 = match _serde::de::SeqAccess::next_element::<
                                String,
                            >(&mut __seq)? {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            2usize,
                                            &"struct NetworkEntry with 12 elements",
                                        ),
                                    );
                                }
                            };
                            let __field3 = match _serde::de::SeqAccess::next_element::<
                                String,
                            >(&mut __seq)? {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            3usize,
                                            &"struct NetworkEntry with 12 elements",
                                        ),
                                    );
                                }
                            };
                            let __field4 = match _serde::de::SeqAccess::next_element::<
                                u64,
                            >(&mut __seq)? {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            4usize,
                                            &"struct NetworkEntry with 12 elements",
                                        ),
                                    );
                                }
                            };
                            let __field5 = match _serde::de::SeqAccess::next_element::<
                                String,
                            >(&mut __seq)? {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            5usize,
                                            &"struct NetworkEntry with 12 elements",
                                        ),
                                    );
                                }
                            };
                            let __field6 = match _serde::de::SeqAccess::next_element::<
                                String,
                            >(&mut __seq)? {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            6usize,
                                            &"struct NetworkEntry with 12 elements",
                                        ),
                                    );
                                }
                            };
                            let __field7 = match _serde::de::SeqAccess::next_element::<
                                u64,
                            >(&mut __seq)? {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            7usize,
                                            &"struct NetworkEntry with 12 elements",
                                        ),
                                    );
                                }
                            };
                            let __field8 = match _serde::de::SeqAccess::next_element::<
                                String,
                            >(&mut __seq)? {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            8usize,
                                            &"struct NetworkEntry with 12 elements",
                                        ),
                                    );
                                }
                            };
                            let __field9 = match _serde::de::SeqAccess::next_element::<
                                Option<Vec<String>>,
                            >(&mut __seq)? {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            9usize,
                                            &"struct NetworkEntry with 12 elements",
                                        ),
                                    );
                                }
                            };
                            let __field10 = match _serde::de::SeqAccess::next_element::<
                                Option<Vec<String>>,
                            >(&mut __seq)? {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            10usize,
                                            &"struct NetworkEntry with 12 elements",
                                        ),
                                    );
                                }
                            };
                            let __field11 = match _serde::de::SeqAccess::next_element::<
                                Option<EndpointIPAMConfig>,
                            >(&mut __seq)? {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            11usize,
                                            &"struct NetworkEntry with 12 elements",
                                        ),
                                    );
                                }
                            };
                            _serde::__private::Ok(NetworkEntry {
                                network_id: __field0,
                                endpoint_id: __field1,
                                gateway: __field2,
                                ip_address: __field3,
                                ip_prefix_len: __field4,
                                ipv6_gateway: __field5,
                                global_ipv6_address: __field6,
                                global_ipv6_prefix_len: __field7,
                                mac_address: __field8,
                                links: __field9,
                                aliases: __field10,
                                ipam_config: __field11,
                            })
                        }
                        #[inline]
                        fn visit_map<__A>(
                            self,
                            mut __map: __A,
                        ) -> _serde::__private::Result<Self::Value, __A::Error>
                        where
                            __A: _serde::de::MapAccess<'de>,
                        {
                            let mut __field0: _serde::__private::Option<String> = _serde::__private::None;
                            let mut __field1: _serde::__private::Option<String> = _serde::__private::None;
                            let mut __field2: _serde::__private::Option<String> = _serde::__private::None;
                            let mut __field3: _serde::__private::Option<String> = _serde::__private::None;
                            let mut __field4: _serde::__private::Option<u64> = _serde::__private::None;
                            let mut __field5: _serde::__private::Option<String> = _serde::__private::None;
                            let mut __field6: _serde::__private::Option<String> = _serde::__private::None;
                            let mut __field7: _serde::__private::Option<u64> = _serde::__private::None;
                            let mut __field8: _serde::__private::Option<String> = _serde::__private::None;
                            let mut __field9: _serde::__private::Option<
                                Option<Vec<String>>,
                            > = _serde::__private::None;
                            let mut __field10: _serde::__private::Option<
                                Option<Vec<String>>,
                            > = _serde::__private::None;
                            let mut __field11: _serde::__private::Option<
                                Option<EndpointIPAMConfig>,
                            > = _serde::__private::None;
                            while let _serde::__private::Some(__key) = _serde::de::MapAccess::next_key::<
                                __Field,
                            >(&mut __map)? {
                                match __key {
                                    __Field::__field0 => {
                                        if _serde::__private::Option::is_some(&__field0) {
                                            return _serde::__private::Err(
                                                <__A::Error as _serde::de::Error>::duplicate_field(
                                                    "NetworkID",
                                                ),
                                            );
                                        }
                                        __field0 = _serde::__private::Some(
                                            _serde::de::MapAccess::next_value::<String>(&mut __map)?,
                                        );
                                    }
                                    __Field::__field1 => {
                                        if _serde::__private::Option::is_some(&__field1) {
                                            return _serde::__private::Err(
                                                <__A::Error as _serde::de::Error>::duplicate_field(
                                                    "EndpointID",
                                                ),
                                            );
                                        }
                                        __field1 = _serde::__private::Some(
                                            _serde::de::MapAccess::next_value::<String>(&mut __map)?,
                                        );
                                    }
                                    __Field::__field2 => {
                                        if _serde::__private::Option::is_some(&__field2) {
                                            return _serde::__private::Err(
                                                <__A::Error as _serde::de::Error>::duplicate_field(
                                                    "Gateway",
                                                ),
                                            );
                                        }
                                        __field2 = _serde::__private::Some(
                                            _serde::de::MapAccess::next_value::<String>(&mut __map)?,
                                        );
                                    }
                                    __Field::__field3 => {
                                        if _serde::__private::Option::is_some(&__field3) {
                                            return _serde::__private::Err(
                                                <__A::Error as _serde::de::Error>::duplicate_field(
                                                    "IPAddress",
                                                ),
                                            );
                                        }
                                        __field3 = _serde::__private::Some(
                                            _serde::de::MapAccess::next_value::<String>(&mut __map)?,
                                        );
                                    }
                                    __Field::__field4 => {
                                        if _serde::__private::Option::is_some(&__field4) {
                                            return _serde::__private::Err(
                                                <__A::Error as _serde::de::Error>::duplicate_field(
                                                    "IPPrefixLen",
                                                ),
                                            );
                                        }
                                        __field4 = _serde::__private::Some(
                                            _serde::de::MapAccess::next_value::<u64>(&mut __map)?,
                                        );
                                    }
                                    __Field::__field5 => {
                                        if _serde::__private::Option::is_some(&__field5) {
                                            return _serde::__private::Err(
                                                <__A::Error as _serde::de::Error>::duplicate_field(
                                                    "IPv6Gateway",
                                                ),
                                            );
                                        }
                                        __field5 = _serde::__private::Some(
                                            _serde::de::MapAccess::next_value::<String>(&mut __map)?,
                                        );
                                    }
                                    __Field::__field6 => {
                                        if _serde::__private::Option::is_some(&__field6) {
                                            return _serde::__private::Err(
                                                <__A::Error as _serde::de::Error>::duplicate_field(
                                                    "GlobalIPv6Address",
                                                ),
                                            );
                                        }
                                        __field6 = _serde::__private::Some(
                                            _serde::de::MapAccess::next_value::<String>(&mut __map)?,
                                        );
                                    }
                                    __Field::__field7 => {
                                        if _serde::__private::Option::is_some(&__field7) {
                                            return _serde::__private::Err(
                                                <__A::Error as _serde::de::Error>::duplicate_field(
                                                    "GlobalIPv6PrefixLen",
                                                ),
                                            );
                                        }
                                        __field7 = _serde::__private::Some(
                                            _serde::de::MapAccess::next_value::<u64>(&mut __map)?,
                                        );
                                    }
                                    __Field::__field8 => {
                                        if _serde::__private::Option::is_some(&__field8) {
                                            return _serde::__private::Err(
                                                <__A::Error as _serde::de::Error>::duplicate_field(
                                                    "MacAddress",
                                                ),
                                            );
                                        }
                                        __field8 = _serde::__private::Some(
                                            _serde::de::MapAccess::next_value::<String>(&mut __map)?,
                                        );
                                    }
                                    __Field::__field9 => {
                                        if _serde::__private::Option::is_some(&__field9) {
                                            return _serde::__private::Err(
                                                <__A::Error as _serde::de::Error>::duplicate_field("Links"),
                                            );
                                        }
                                        __field9 = _serde::__private::Some(
                                            _serde::de::MapAccess::next_value::<
                                                Option<Vec<String>>,
                                            >(&mut __map)?,
                                        );
                                    }
                                    __Field::__field10 => {
                                        if _serde::__private::Option::is_some(&__field10) {
                                            return _serde::__private::Err(
                                                <__A::Error as _serde::de::Error>::duplicate_field(
                                                    "Aliases",
                                                ),
                                            );
                                        }
                                        __field10 = _serde::__private::Some(
                                            _serde::de::MapAccess::next_value::<
                                                Option<Vec<String>>,
                                            >(&mut __map)?,
                                        );
                                    }
                                    __Field::__field11 => {
                                        if _serde::__private::Option::is_some(&__field11) {
                                            return _serde::__private::Err(
                                                <__A::Error as _serde::de::Error>::duplicate_field(
                                                    "IPAMConfig",
                                                ),
                                            );
                                        }
                                        __field11 = _serde::__private::Some(
                                            _serde::de::MapAccess::next_value::<
                                                Option<EndpointIPAMConfig>,
                                            >(&mut __map)?,
                                        );
                                    }
                                    _ => {
                                        let _ = _serde::de::MapAccess::next_value::<
                                            _serde::de::IgnoredAny,
                                        >(&mut __map)?;
                                    }
                                }
                            }
                            let __field0 = match __field0 {
                                _serde::__private::Some(__field0) => __field0,
                                _serde::__private::None => {
                                    _serde::__private::de::missing_field("NetworkID")?
                                }
                            };
                            let __field1 = match __field1 {
                                _serde::__private::Some(__field1) => __field1,
                                _serde::__private::None => {
                                    _serde::__private::de::missing_field("EndpointID")?
                                }
                            };
                            let __field2 = match __field2 {
                                _serde::__private::Some(__field2) => __field2,
                                _serde::__private::None => {
                                    _serde::__private::de::missing_field("Gateway")?
                                }
                            };
                            let __field3 = match __field3 {
                                _serde::__private::Some(__field3) => __field3,
                                _serde::__private::None => {
                                    _serde::__private::de::missing_field("IPAddress")?
                                }
                            };
                            let __field4 = match __field4 {
                                _serde::__private::Some(__field4) => __field4,
                                _serde::__private::None => {
                                    _serde::__private::de::missing_field("IPPrefixLen")?
                                }
                            };
                            let __field5 = match __field5 {
                                _serde::__private::Some(__field5) => __field5,
                                _serde::__private::None => {
                                    _serde::__private::de::missing_field("IPv6Gateway")?
                                }
                            };
                            let __field6 = match __field6 {
                                _serde::__private::Some(__field6) => __field6,
                                _serde::__private::None => {
                                    _serde::__private::de::missing_field("GlobalIPv6Address")?
                                }
                            };
                            let __field7 = match __field7 {
                                _serde::__private::Some(__field7) => __field7,
                                _serde::__private::None => {
                                    _serde::__private::de::missing_field("GlobalIPv6PrefixLen")?
                                }
                            };
                            let __field8 = match __field8 {
                                _serde::__private::Some(__field8) => __field8,
                                _serde::__private::None => {
                                    _serde::__private::de::missing_field("MacAddress")?
                                }
                            };
                            let __field9 = match __field9 {
                                _serde::__private::Some(__field9) => __field9,
                                _serde::__private::None => {
                                    _serde::__private::de::missing_field("Links")?
                                }
                            };
                            let __field10 = match __field10 {
                                _serde::__private::Some(__field10) => __field10,
                                _serde::__private::None => {
                                    _serde::__private::de::missing_field("Aliases")?
                                }
                            };
                            let __field11 = match __field11 {
                                _serde::__private::Some(__field11) => __field11,
                                _serde::__private::None => {
                                    _serde::__private::de::missing_field("IPAMConfig")?
                                }
                            };
                            _serde::__private::Ok(NetworkEntry {
                                network_id: __field0,
                                endpoint_id: __field1,
                                gateway: __field2,
                                ip_address: __field3,
                                ip_prefix_len: __field4,
                                ipv6_gateway: __field5,
                                global_ipv6_address: __field6,
                                global_ipv6_prefix_len: __field7,
                                mac_address: __field8,
                                links: __field9,
                                aliases: __field10,
                                ipam_config: __field11,
                            })
                        }
                    }
                    #[doc(hidden)]
                    const FIELDS: &'static [&'static str] = &[
                        "NetworkID",
                        "EndpointID",
                        "Gateway",
                        "IPAddress",
                        "IPPrefixLen",
                        "IPv6Gateway",
                        "GlobalIPv6Address",
                        "GlobalIPv6PrefixLen",
                        "MacAddress",
                        "Links",
                        "Aliases",
                        "IPAMConfig",
                    ];
                    _serde::Deserializer::deserialize_struct(
                        __deserializer,
                        "NetworkEntry",
                        FIELDS,
                        __Visitor {
                            marker: _serde::__private::PhantomData::<NetworkEntry>,
                            lifetime: _serde::__private::PhantomData,
                        },
                    )
                }
            }
        };
        #[allow(clippy::upper_case_acronyms)]
        pub struct EndpointIPAMConfig {
            #[serde(rename = "IPv4Address")]
            pub ipv4_address: String,
            #[serde(rename = "IPv6Address")]
            pub ipv6_address: String,
            #[serde(rename = "LinkLocalIPs")]
            pub link_local_ips: Vec<String>,
        }
        #[automatically_derived]
        #[allow(clippy::upper_case_acronyms)]
        impl ::core::clone::Clone for EndpointIPAMConfig {
            #[inline]
            fn clone(&self) -> EndpointIPAMConfig {
                EndpointIPAMConfig {
                    ipv4_address: ::core::clone::Clone::clone(&self.ipv4_address),
                    ipv6_address: ::core::clone::Clone::clone(&self.ipv6_address),
                    link_local_ips: ::core::clone::Clone::clone(&self.link_local_ips),
                }
            }
        }
        #[automatically_derived]
        #[allow(clippy::upper_case_acronyms)]
        impl ::core::fmt::Debug for EndpointIPAMConfig {
            #[inline]
            fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                ::core::fmt::Formatter::debug_struct_field3_finish(
                    f,
                    "EndpointIPAMConfig",
                    "ipv4_address",
                    &self.ipv4_address,
                    "ipv6_address",
                    &self.ipv6_address,
                    "link_local_ips",
                    &&self.link_local_ips,
                )
            }
        }
        #[doc(hidden)]
        #[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
        const _: () = {
            #[allow(unused_extern_crates, clippy::useless_attribute)]
            extern crate serde as _serde;
            #[automatically_derived]
            impl _serde::Serialize for EndpointIPAMConfig {
                fn serialize<__S>(
                    &self,
                    __serializer: __S,
                ) -> _serde::__private::Result<__S::Ok, __S::Error>
                where
                    __S: _serde::Serializer,
                {
                    let mut __serde_state = _serde::Serializer::serialize_struct(
                        __serializer,
                        "EndpointIPAMConfig",
                        false as usize + 1 + 1 + 1,
                    )?;
                    _serde::ser::SerializeStruct::serialize_field(
                        &mut __serde_state,
                        "IPv4Address",
                        &self.ipv4_address,
                    )?;
                    _serde::ser::SerializeStruct::serialize_field(
                        &mut __serde_state,
                        "IPv6Address",
                        &self.ipv6_address,
                    )?;
                    _serde::ser::SerializeStruct::serialize_field(
                        &mut __serde_state,
                        "LinkLocalIPs",
                        &self.link_local_ips,
                    )?;
                    _serde::ser::SerializeStruct::end(__serde_state)
                }
            }
        };
        #[doc(hidden)]
        #[allow(non_upper_case_globals, unused_attributes, unused_qualifications)]
        const _: () = {
            #[allow(unused_extern_crates, clippy::useless_attribute)]
            extern crate serde as _serde;
            #[automatically_derived]
            impl<'de> _serde::Deserialize<'de> for EndpointIPAMConfig {
                fn deserialize<__D>(
                    __deserializer: __D,
                ) -> _serde::__private::Result<Self, __D::Error>
                where
                    __D: _serde::Deserializer<'de>,
                {
                    #[allow(non_camel_case_types)]
                    #[doc(hidden)]
                    enum __Field {
                        __field0,
                        __field1,
                        __field2,
                        __ignore,
                    }
                    #[doc(hidden)]
                    struct __FieldVisitor;
                    impl<'de> _serde::de::Visitor<'de> for __FieldVisitor {
                        type Value = __Field;
                        fn expecting(
                            &self,
                            __formatter: &mut _serde::__private::Formatter,
                        ) -> _serde::__private::fmt::Result {
                            _serde::__private::Formatter::write_str(
                                __formatter,
                                "field identifier",
                            )
                        }
                        fn visit_u64<__E>(
                            self,
                            __value: u64,
                        ) -> _serde::__private::Result<Self::Value, __E>
                        where
                            __E: _serde::de::Error,
                        {
                            match __value {
                                0u64 => _serde::__private::Ok(__Field::__field0),
                                1u64 => _serde::__private::Ok(__Field::__field1),
                                2u64 => _serde::__private::Ok(__Field::__field2),
                                _ => _serde::__private::Ok(__Field::__ignore),
                            }
                        }
                        fn visit_str<__E>(
                            self,
                            __value: &str,
                        ) -> _serde::__private::Result<Self::Value, __E>
                        where
                            __E: _serde::de::Error,
                        {
                            match __value {
                                "IPv4Address" => _serde::__private::Ok(__Field::__field0),
                                "IPv6Address" => _serde::__private::Ok(__Field::__field1),
                                "LinkLocalIPs" => _serde::__private::Ok(__Field::__field2),
                                _ => _serde::__private::Ok(__Field::__ignore),
                            }
                        }
                        fn visit_bytes<__E>(
                            self,
                            __value: &[u8],
                        ) -> _serde::__private::Result<Self::Value, __E>
                        where
                            __E: _serde::de::Error,
                        {
                            match __value {
                                b"IPv4Address" => _serde::__private::Ok(__Field::__field0),
                                b"IPv6Address" => _serde::__private::Ok(__Field::__field1),
                                b"LinkLocalIPs" => _serde::__private::Ok(__Field::__field2),
                                _ => _serde::__private::Ok(__Field::__ignore),
                            }
                        }
                    }
                    impl<'de> _serde::Deserialize<'de> for __Field {
                        #[inline]
                        fn deserialize<__D>(
                            __deserializer: __D,
                        ) -> _serde::__private::Result<Self, __D::Error>
                        where
                            __D: _serde::Deserializer<'de>,
                        {
                            _serde::Deserializer::deserialize_identifier(
                                __deserializer,
                                __FieldVisitor,
                            )
                        }
                    }
                    #[doc(hidden)]
                    struct __Visitor<'de> {
                        marker: _serde::__private::PhantomData<EndpointIPAMConfig>,
                        lifetime: _serde::__private::PhantomData<&'de ()>,
                    }
                    impl<'de> _serde::de::Visitor<'de> for __Visitor<'de> {
                        type Value = EndpointIPAMConfig;
                        fn expecting(
                            &self,
                            __formatter: &mut _serde::__private::Formatter,
                        ) -> _serde::__private::fmt::Result {
                            _serde::__private::Formatter::write_str(
                                __formatter,
                                "struct EndpointIPAMConfig",
                            )
                        }
                        #[inline]
                        fn visit_seq<__A>(
                            self,
                            mut __seq: __A,
                        ) -> _serde::__private::Result<Self::Value, __A::Error>
                        where
                            __A: _serde::de::SeqAccess<'de>,
                        {
                            let __field0 = match _serde::de::SeqAccess::next_element::<
                                String,
                            >(&mut __seq)? {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            0usize,
                                            &"struct EndpointIPAMConfig with 3 elements",
                                        ),
                                    );
                                }
                            };
                            let __field1 = match _serde::de::SeqAccess::next_element::<
                                String,
                            >(&mut __seq)? {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            1usize,
                                            &"struct EndpointIPAMConfig with 3 elements",
                                        ),
                                    );
                                }
                            };
                            let __field2 = match _serde::de::SeqAccess::next_element::<
                                Vec<String>,
                            >(&mut __seq)? {
                                _serde::__private::Some(__value) => __value,
                                _serde::__private::None => {
                                    return _serde::__private::Err(
                                        _serde::de::Error::invalid_length(
                                            2usize,
                                            &"struct EndpointIPAMConfig with 3 elements",
                                        ),
                                    );
                                }
                            };
                            _serde::__private::Ok(EndpointIPAMConfig {
                                ipv4_address: __field0,
                                ipv6_address: __field1,
                                link_local_ips: __field2,
                            })
                        }
                        #[inline]
                        fn visit_map<__A>(
                            self,
                            mut __map: __A,
                        ) -> _serde::__private::Result<Self::Value, __A::Error>
                        where
                            __A: _serde::de::MapAccess<'de>,
                        {
                            let mut __field0: _serde::__private::Option<String> = _serde::__private::None;
                            let mut __field1: _serde::__private::Option<String> = _serde::__private::None;
                            let mut __field2: _serde::__private::Option<Vec<String>> = _serde::__private::None;
                            while let _serde::__private::Some(__key) = _serde::de::MapAccess::next_key::<
                                __Field,
                            >(&mut __map)? {
                                match __key {
                                    __Field::__field0 => {
                                        if _serde::__private::Option::is_some(&__field0) {
                                            return _serde::__private::Err(
                                                <__A::Error as _serde::de::Error>::duplicate_field(
                                                    "IPv4Address",
                                                ),
                                            );
                                        }
                                        __field0 = _serde::__private::Some(
                                            _serde::de::MapAccess::next_value::<String>(&mut __map)?,
                                        );
                                    }
                                    __Field::__field1 => {
                                        if _serde::__private::Option::is_some(&__field1) {
                                            return _serde::__private::Err(
                                                <__A::Error as _serde::de::Error>::duplicate_field(
                                                    "IPv6Address",
                                                ),
                                            );
                                        }
                                        __field1 = _serde::__private::Some(
                                            _serde::de::MapAccess::next_value::<String>(&mut __map)?,
                                        );
                                    }
                                    __Field::__field2 => {
                                        if _serde::__private::Option::is_some(&__field2) {
                                            return _serde::__private::Err(
                                                <__A::Error as _serde::de::Error>::duplicate_field(
                                                    "LinkLocalIPs",
                                                ),
                                            );
                                        }
                                        __field2 = _serde::__private::Some(
                                            _serde::de::MapAccess::next_value::<
                                                Vec<String>,
                                            >(&mut __map)?,
                                        );
                                    }
                                    _ => {
                                        let _ = _serde::de::MapAccess::next_value::<
                                            _serde::de::IgnoredAny,
                                        >(&mut __map)?;
                                    }
                                }
                            }
                            let __field0 = match __field0 {
                                _serde::__private::Some(__field0) => __field0,
                                _serde::__private::None => {
                                    _serde::__private::de::missing_field("IPv4Address")?
                                }
                            };
                            let __field1 = match __field1 {
                                _serde::__private::Some(__field1) => __field1,
                                _serde::__private::None => {
                                    _serde::__private::de::missing_field("IPv6Address")?
                                }
                            };
                            let __field2 = match __field2 {
                                _serde::__private::Some(__field2) => __field2,
                                _serde::__private::None => {
                                    _serde::__private::de::missing_field("LinkLocalIPs")?
                                }
                            };
                            _serde::__private::Ok(EndpointIPAMConfig {
                                ipv4_address: __field0,
                                ipv6_address: __field1,
                                link_local_ips: __field2,
                            })
                        }
                    }
                    #[doc(hidden)]
                    const FIELDS: &'static [&'static str] = &[
                        "IPv4Address",
                        "IPv6Address",
                        "LinkLocalIPs",
                    ];
                    _serde::Deserializer::deserialize_struct(
                        __deserializer,
                        "EndpointIPAMConfig",
                        FIELDS,
                        __Visitor {
                            marker: _serde::__private::PhantomData::<EndpointIPAMConfig>,
                            lifetime: _serde::__private::PhantomData,
                        },
                    )
                }
            }
        };
    }
    pub enum Test {}
    use model;
}
mod network {}
mod transport {
    use std::io::{Read, Write};
    use std::os::unix::net::UnixStream;
    use serde::Deserialize;
    use crate::{error::Result, http::{request::Request, response::Response}};
    pub enum Transport {
        Unix { client: Client<UnixStream>, path: String },
    }
    impl Transport {
        pub fn unix<S: Into<String>>(socket: S) -> Result<Self> {
            let socket = socket.into();
            Ok(Transport::Unix {
                client: Client {
                    socket: UnixStream::connect(&socket)?,
                },
                path: socket,
            })
        }
        pub fn request<B>(&self, req: Request) -> Result<Response<B>>
        where
            for<'de> B: Deserialize<'de>,
        {
            match self {
                Transport::Unix { client, .. } => client.request(req),
            }
        }
    }
    const BUFFER_SIZE: usize = 1024;
    const CRLF: &[u8] = b"\r\n";
    const END: &[u8] = b"0\r\n\r\n";
    pub struct Client<S> {
        socket: S,
    }
    impl Client<UnixStream> {
        fn request<B>(&self, req: Request) -> Result<Response<B>>
        where
            for<'de> B: Deserialize<'de>,
        {
            let mut socket = self.socket.try_clone()?;
            let buf = req.into_bytes();
            socket.write_all(&buf)?;
            let mut buf: [u8; BUFFER_SIZE] = [0; BUFFER_SIZE];
            let mut raw_resp = Vec::new();
            loop {
                let n = socket.read(&mut buf[..])?;
                buf.iter().take(n).for_each(|b| raw_resp.push(*b));
                if n > 4 && check_buf_end(&buf, n, END) {
                    break;
                }
                if n > 1 && check_buf_end(&buf, n, CRLF) {
                    continue;
                }
                if n < BUFFER_SIZE {
                    break;
                }
            }
            Response::<B>::try_from(raw_resp.as_slice())
        }
    }
    fn check_buf_end(buf: &[u8], len: usize, needle: &[u8]) -> bool {
        let needle_len = needle.len();
        len >= needle_len && &buf[len - needle_len..len] == needle
    }
}
const API_VERSION: &str = "v1.44";
pub use docker::Docker;
pub use error::{Error, Result};
pub use http::{
    request::{Request, RequestBuilder},
    response::Response, Method,
};
/// A docker socket.
pub enum Socket {
    Unix(String),
}
impl Socket {
    /// Create a new unix socket from a path.
    pub fn unix(path: &str) -> Self {
        Socket::Unix(path.to_string())
    }
}
impl TryInto<UnixStream> for &Socket {
    type Error = std::io::Error;
    fn try_into(self) -> std::result::Result<UnixStream, Self::Error> {
        match self {
            Socket::Unix(path) => UnixStream::connect(path),
        }
    }
}
